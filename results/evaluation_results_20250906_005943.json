{
  "single_hop": {
    "recall_at_k": {
      "recall@1": 0.0,
      "recall@3": 0.08333333333333333,
      "recall@5": 0.08333333333333333,
      "recall@10": 0.08333333333333333
    },
    "precision_at_k": {
      "precision@1": 0.0,
      "precision@3": 0.0,
      "precision@5": 0.0,
      "precision@10": 0.0
    },
    "groundedness_scores": [
      0.8,
      0.8
    ],
    "hallucination_rates": [
      0.1,
      0.1
    ],
    "query_details": [
      {
        "query": "What is AUTOSAR ECU State Manager?",
        "retrieved_ids": [
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null
        ],
        "retrieved_contents": [
          "BSW_00348, SRS_BSW_00353, SRS_BSW_00361, SRS_BSW_00439, SRS_- BSW_00449, SRS_BSW_00308, SRS_BSW_00309, SRS_BSW_00330, SRS_- BSW_00010, SRS_BSW_00341, SRS_BSW_00334) 210 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager",
          "Specification of ECU State Manager AUTOSAR CP R20-11 Document TitleSpecification of ECU State Manager Document Owner AUTOSAR Document Responsibility AUTOSAR Document Identification No 78 Document Status published Part of AUTOSAR Standard Classic Platform Part of Standard Release R20-11 Document Change History Date Release Changed by Description 2020-11-30 R20-11AUTOSAR Release ManagementCorrected broken chapter structure EcuM_UserType handling improved Minor content changes, clarifications (multi-core, configuration, values) 2019-11-28 R19-11AUTOSAR Release ManagementNo content changes Changed Document Status from Final to published 2018-10-31 4.4.0AUTOSAR Release ManagementReworked BswM interface through EcuM_GoDownHaltPoll Removed EcuM fixed version references 2017-12-08 4.3.1AUTOSAR Release ManagementAdapt API Can_CheckWakeup Removed ConfigPtr parameter Removed Default error Removed unused DIO driver EcuM AUTOSAR service configure on service partition only 2016-11-30 4.3.0AUTOSAR Release ManagementPartial Network Cluster Support Initialization BSW scheduler slipt Added a driver initialization list Removed EcuM_StateType 1 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 2015-07-31 4.2.2AUTOSAR Release ManagementReworked slave core poll sequence Reviewed multicore shutdown synchronization Reclassified error types Editorial changes 2014-10-31 4.2.1AUTOSAR Release ManagementAdded switch configuration Defined initialization order for InitListZeroInitListOne Definition of the name pattern of c-init-data struct corrected Type conflicts solved Editorial changes 2014-03-31 4.1.3AUTOSAR Release ManagementEcuM errors reworked Inconsistencies between APIs and Interfaces resolved Type conflicts solved Editorial changes 2013-10-31 4.1.2AUTOSAR Release ManagementAdded API table for service interfaces Fixed traceability topics General clean-up of requirements (reviewed different interfaces, operations, descriptions and figures). Editorial changes 2 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 2013-03-15 4.1.1AUTOSAR AdministrationSpecified reset mode to use in case of pending wakeup events during shutdown Added callout for Reset Loop Detection Extended specification of parameter time of function EcuM_GetMostRecentShutdown Improved configuration description Added new APIs to enable asynchronous Trcv handling for CANFR Wakeup Adaption of EcuM Flex to support BSW modules distributed over multiple partitions Reclassified which Production Errors are Extended Production Errors Added possible error to operations of ClientServer-Interfaces, where no errors where defined Enhancement of configuration to initialize BSW modules by the EcuM Flex 2011-12-22 4.0.3AUTOSAR AdministrationFixed interoperability problems between EcuM and BswM Terminology of ECU State Manager Flexible more consistently described Modification of sleep sequences to minimize misses of wakeup interrupts 2010-09-30 3.1.5AUTOSAR AdministrationUpdated pseudo code for AUTOSAR Services Update startup procedure for multi core systems 2010-02-02 3.1.4AUTOSAR AdministrationRemoved state machine to accommodate mode-dependent scheduling Added Multi-Core support Added Alarm Clock feature Revised disclaimer 2008-08-13 3.1.1AUTOSAR AdministrationLegal disclaimer revised 3 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 2007-12-21 3.0.1AUTOSAR AdministrationFixed Wakeup mechanisms Included optional triggering of Watchdog Manager during Startup, Shutdown, and Sleep Extended startup sequence to have more flexibility and to directly initialize all other BSW modules Generated APIs from BSW UML model Generated configuration from Meta Model Document meta information extended Small layout adaptations made 2007-01-24 2.1.15AUTOSAR AdministrationCorrected startup flow and wakeup concept. Added specification for AUTOSAR ports. Modified configuration for compliance with variant management. Added new API services. Legal disclaimer revised Release Notes added Advice for users revised Revision Information added 2006-05-16 2.0AUTOSAR Administration Initial Release 4 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 Disclaimer This work (specification andor software implementation) and the material contained in it, as released by AUTOSAR, is for the purpose of information only. AUTOSAR and the companies that have contributed to it shall not be liable for any use of the work. The material contained in this work is protected by copyright and other types of intel- lectual property rights. The commercial exploitation of the material contained in this work requires a license to such intellectual property rights. This work may be utilized or reproduced without any modification, in any form or by any means, for informational purposes only. For any other purpose, no part of the work may be utilized or reproduced, in any form or by any means, without permission in writing from the publisher. The work has been developed for automotive applications only. It has neither been developed, nor tested for non-automotive applications. The word AUTOSAR and the AUTOSAR logo are registered trademarks. 5 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 Table of Contents 1 Introduction and Functional Overview 13 1.1 Backwards Compatibility to Previous ECU Manager Module Versions . 14 2 Definitions and Abbreviations 15 2.1 Definitions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 15 2.2 Abbreviations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 15 3 Related documentation 17 3.1 Input documents related standards and norms . . . . . . . . . . . . 17 3.2 Related specification . . . . . . . . . . . . . . . . . . . . . . . . . . . . 17 4 Constraints and Assumptions 18 4.1 Limitations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 18 4.2 Hardware Requirements . . . . . . . . . . . . . . . . . . . . . . . . . . 18 4.3 Applicability to car domains . . . . . . . . . . . . . . . . . . . . . . . . 18 5 Dependencies to other modules 19 5.1 SPAL Modules . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 19 5.1.1 MCU Driver . . . . . . . . . .",
          "are finished processing, the cores must be synchronized before entering SHUTDOWN. The BswM (which is distributed over all partitions) ascertains that the ECU should be shut down and synchronizes with each BwsM in the ECU. All BswMs induce de- initialization of all the partitions BSWs, SWCs and CDDs and send appropriate signals to the other BswMs to indicate their readiness to shut down. 78 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 For a shutdown of the ECU, the BswM (which lies in the same partition of the master EcuM) ultimately calls GoOff on the master core which distributes that request to all slave cores. The master EcuM de-initializes the BswM, and the SchM. The EcuMs on the slave cores de-initialize their SchM and BswM and then send a signal to indicate that the core is ready for ShutdownOS (again, see section section 7.9.3 Master Core - Slave Core Signalling for details). The master EcuM waits for the signal from each slave core EcuM and then initiates shutdown as usual on the master core (the master EcuM calls ShutdownAllCores , and the ECU is put to bed with the global shutdown hook) 79 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 7.9.6.1 Master Core SHUTDOWN module EcuMmodule SchMmodule BswMmodule McOsIntegration Code opt Pending wakeup events?loop over every BswM running in this core loop FOR all configured cores EcuM_OnGoOffOne() ShutdownAllCores(StatusType)EcuM_GetPendingWakeupEvents(EcuM_WakeupSourceType)BswM_Deinit() WaitEvent(Mask)SchM_Deinit()GetCoreID(CoreIdType) EcuM_SelectShutdownTarget(Std_ReturnType, EcuM_ShutdownTargetType, EcuM_ShutdownModeType) Figure 7.23: Master Core OffPreOS Sequence 80 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 SWS_EcuM_04020 d Integration Code module EcuMmodule McOs alt Shutdown Target Reset OffGetCoreID(CoreIdType) EcuM_AL_SwitchOff()EcuM_AL_Reset(EcuM_ResetType)EcuM_OnGoOffTwo() Figure 7.24: Master Core OffPostOS Sequencec () 81 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 7.9.6.2 Slave Core SHUTDOWN module EcuMmodule McOsmodule :SchMIntegration Code module BswM loop over every BswM running in this core SetEvent(TaskId, Mask)GetCoreID(CoreIdType) SchM_Deinit()BswM_Deinit()EcuM_OnGoOffOne() Figure 7.25: Slave Core OffPreOS Sequence SWS_EcuM_04022 d 82 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 module EcuMmodule McOsIntegration Code EcuM_OnGoOffTwo()GetCoreID(CoreIdType) Figure 7.26: Slave Core OffPostOS Sequencec () 7.9.7 SLEEP Phase When the shutdown target Sleep is requested, all cores are put to sleep simultaneously. The MCU must issue a halt for each core. As task timing and priority are local to a core in the OS, neither the scheduler nor the RTE must be synchronized after a halt. Because the master core could issue the MCU halt before all slave cores are finished processing, the cores must be synchronized before entering GoHalt. The BswMs ascertain that sleep should be initiated and distribute an appropriate ECU mode to each core. The BSWs, SWCs and CDDs on the slave cores must be informed by their partition local BswM, de-initialize appropriately and send appropriate mode requests to the BswM to indicate their readiness. If the ECU is put to sleep, the halts must be synchronized so that all slave cores are halted before the master core computes the checksum. The ECU Manager module on the master core uses the same signal mechanism as for synchronizing cores on Go Off. Similarly, the ECU Manager module on the master core must validate the checksum before releasing the slave cores from the halt state 83 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 7.9.7.1 Master Core SLEEP SWS_EcuM_04023 d module EcuMmodule OsIntegration Code module :BswM GetCoreID(CoreIdType) GetResource(RES_AUTOSAR_ECUM_core)EcuM_EnableWakeupSources(EcuM_WakeupSourceType)BswM_EcuM_CurrentWakeup(sources, ECUM_WKSTATUS_NONE ) Figure 7.27: Master Core GoSleep Sequencec () SWS_EcuM_04024 d 84 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 Integration Code module :BswMPeripheral Wakeup Sourcemodule Mcumodule EcuMmodule Wakeup Sourcemodule Os HALT opt RAM check failed alt Validation Needed Yes Noalt AlarmClock Service Present EcuM_AlarmClock only pending event AND Alarm not e xpired EcuM_GenerateRamHash() EcuM_CheckRamHash(uint8)Return from interrupt()Wait for all SlaveCores to be ready to sleep() EcuM_ErrorHook(uint16)Mcu_SetMode()EcuM_SetWakeupEvent(EcuM_WakeupSourceType)Mcu_SetMode(Mcu_ModeType) Signal all SlaveCores to continue()DisableAllInterrupts()Module_CheckWakeup() BswM_EcuM_CurrentWakeup(Sources, ECUM_WKSTATUS_VALIDATED)Mcu_SetMode(Mcu_ModeType)Interrupt() EcuM_GenerateRamHash()EcuM_CheckWakeup(EcuM_WakeupSourceType) EnableAllInterrupts()DisableAllInterrupts() BswM_EcuM_CurrentWakeup(sources, ECUM_WKSTATUS_PENDING)Activate PLL() Figure 7.28: Master Core Halt Sequence 85 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 c(SRS_ModeMgm_09239) SWS_EcuM_04025 d module EcuMmodule :BswMIntegration Code module Mcumodule Wakeup Sourcemodule Os loop WHILE no pendingvalidated events loop FOR all wakeup sources that need polling opt Wakeup detected alt Yes No ! EnableAllInterrupts() Signal SlaveCores to continue()EcuM_SetWakeupEvent(EcuM_WakeupSourceType) EcuM_GetPendingWakeupEvents(EcuM_WakeupSourceType)EcuM_SleepActivity() Module_CheckWakeup()Mcu_SetMode (Mcu_ModeType) BswMEcuM_CurrentWakeup(sources, ECUM_WKSTATUS_VALIDATED)DisableAllInterrupts() BswM_EcuM_CurrentWakeup(sources, ECUM_WKSTATUS_PENDING)EcuM_CheckWakeup(EcuM_WakeupSourceType) Figure 7.29: Master Core Poll Sequencec () SWS_EcuM_04026 d 86 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 module Mcumodule Osmodule EcuMIntegration Code Mcu_SetMode(Mcu_ModeType) EcuM_GetPendingWakeupEvents(EcuM_WakeupSourceType) ReleaseResource(RES_AUTOSAR_ECUM_core)EcuM_DisableWakeupSources(EcuM_WakeupSourceType)EnableAllInterrupts()DisableAllInterrupts() EcuM_AL_DriverRestart() Figure 7.30: Master Core WakeupRestart Sequencec () 7.9.7.2 Slave Core SLEEP SWS_EcuM_04027 d 87 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 module EcuMmodule Osmodule :BswMIntegration Code GetCoreID(CoreIdType) EcuM_EnableWakeupSources(EcuM_WakeupSourceType) GetResource(RES_AUTOSAR_ECUM_core)BswM_EcuM_CurrentWakeup(sources, ECUM_WKSTATUS_NONE ) Figure 7.31: Slave Core GoSleep Sequencec () SWS_EcuM_04028 d 88 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 Integration Code module Wakeup Sourcemodule EcuMmodule McuPeripheral Wakeup Sourcemodule Osmodule :BswM HALT alt Validation Needed Yes NoMcu_SetMode()EcuM_SetWakeupEvent(EcuM_WakeupSourceType)Interrupt()Signal MasterCore that Slave is ready to sleep() Return from interrupt()EcuM_CheckWakeup(EcuM_WakeupSourceType) BswM_EcuM_CurrentState(ECUM_WKSTATUS_PENDING) Wait for MasterCore to continue()DisableAllInterrupts() BswM_EcuM_CurrentWakeup(Sources, ECUM_WKSTATUS_VALI DATED)Module_CheckWakeup() EnableAllInterrupts()Mcu_SetMode(Mcu_ModeType) Figure 7.32: Slave Core Halt Sequencec () SWS_EcuM_04029 d 89 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 module EcuMmodule Wakeup Sourcemodule McuIntegration Code module Osmodule BswM loop WHILE no pendingvalidated events loop FOR all wakeup sources that need polling opt Wakeup detected alt Yes No ! Mcu_SetMode(Mcu_ModeType) Wait for signal from MasterCore to continue()EcuM_SetWakeupEvent(EcuM_WakeupSourceType)Module_CheckWakeup() BswM_EcuM_CurrentWakeup(sources, ECUM_WKSTATUS_PEND ING)EcuM_GetPendingWakeupEvents(EcuM_WakeupSourceType)EnableAllInterrupts() EcuM_CheckWakeup(EcuM_WakeupSourceType)DisableAllInterrupts() BswM_EcuM_CurrentWakeup(sources, ECUM_WKSTATUS_VALI DATED)EcuM_SleepActivity() Figure 7.33: Slave Core Poll Sequencec () SWS_EcuM_04030 d 90 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 module Mcumodule Osmodule EcuMIntegration Code Mcu_SetMode(Mcu_ModeType)DisableAllInterrupts() ReleaseResource(RES_AUTOSAR_ECUM_core)EcuM_DisableWakeupSources(EcuM_WakeupSourceType)EnableAllInterrupts() Figure 7.34: Slave Core WakeupRestart Sequencec () 7.9.8 Runnables and Entry points 7.9.8.1 Internal behavior SWS_EcuM_03018 dThe definition of the internal behavior of the the ECU Manager module shall be as follows. This detailed description is only needed for the configura- tion",
          "of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 module Osmodule Mcumodule EcuMIntegration Code opt Configuration data inconsistent EcuM_LoopDetection()EcuM_AL_DriverInitOne()Check consistency of configuration data()EcuM_AL_DriverInitZero() EcuM_DeterminePbConfiguration(const EcuM_ConfigType) StartOS(ECUM_DEFAULT_APP_MODE)Mcu_GetResetReason()EcuM_ErrorHook(ECUM_E_CONFIGURATION_DATA_INCONSISTEN T) Mcu_GetResetReason(Mcu_ResetType) EcuM_SelectShutdownTarget(Std_ReturnType, EcuM_ShutdownTargetType, EcuM_ShutdownModeType)Map reset reason to wakeup source() Figure 7.4: StartPreOS Sequence 37 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 The StartPreOS Sequence is intended to prepare the ECU to initialize the OS and should be kept as short as possible. Drivers should be initialised in the UP phase when possible and the callouts should also be kept short. Interrupts should not be used during this sequence. If interrupts have to be used, only category I interrupts are allowed in the StartPreOS Sequence 13. Initialization of drivers and hardware abstraction modules is not strictly defined by the ECU Manager. Two callouts EcuM_AL_DriverInitZero (see SWS_EcuM_02905 ) and EcuM_AL_DriverInitOne (see SWS_EcuM_02907 ) are provided to define the init blocks 0 and I. These blocks contain the initialization activities associated with the StartPreOS sequence. MCU_Init does not provide complete MCU initialization. Additionally, hardware depen- dent steps have to be executed and must be defined at system design time. These steps are supposed to be taken within the EcuM_AL_DriverInitZero (seeEcuM_- AL_DriverInitZero , SWS_EcuM_02905 ) or EcuM_AL_DriverInitOne call- outs (see EcuM_AL_DriverInitOne , SWS_EcuM_02907 ). Details can be found in the Specification of MCU Driver 10. SWS_EcuM_02181 dThe ECU Manager module shall call EcuM_GetValidated- WakeupEvents with the configured default shutdown target ( EcuMDefaultShut- downTarget ).c() See section 7.7 Shutdown Targets. SWS_EcuM_02603 dThe StartPreOS Sequence shall initialize all basic software modules that are needed to start the OS. c() 7.3.3 Activities in the StartPostOS Sequence StartPostOS Sequence Initialization Activity Comment Opt. Start BSW Scheduler no Init BSW Mode Manager no Init BSW SchedulerInitialize the semaphores for critical sections used by BSW modulesno Start Scheduler Timing Start periodical events for BSWSWCsno Table 7.2: StartPostOS Sequence Note to column Opt. : Optional activities can be switched on or off by configuration. See section 10.1 Common Containers and configuration parameters for details. SWS_EcuM_02932 dWhen activated through the EcuM_StartupTwo (see SWS_EcuM_02838 ) function, the ECU Manager module shall perform the actions in StartPostOS Sequence (see table 7.2). c(SRS_ModeMgm_09113) 3Category II interrupts require a running OS while category I interrupts do not. AUTOSAR OS re- quires each interrupt vector to be exclusively put into one category. 38 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 module SchMmodule EcuMmodule BswM SchM_Start(): Std_ReturnType SchM_StartTiming(const SchM_ConfigType)SchM_Init(const SchM_ConfigType)BswM_Init(const BswM_ConfigType ) Figure 7.5: StartPostOS Sequence 7.3.4 Checking Configuration Consistency 7.3.4.1 The Necessity for Checking Configuration Consistency in the ECU Man- ager In an AUTOSAR ECU several configuration parameters are set and put into the ECU at different times. Pre-compile parameters are set, inserted into the generated source code and compiled into object code. When the source code has been compiled, link- time parameters are set, compiled, and linked with the previously configured object code into an image that is put into the ECU. Finally, post-build parameters are set, compiled, linked, and put into the ECU at a different time. All these parameters must match to obtain a stable ECU. 39 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 Figure 7.6: BSW Configuration Steps The configuration tool can check the consistency of configuration time parameters it- self. The compiler may detect parameter errors at compilation time and the linker may find additional errors at link time. Unfortunately, finding configuration errors in post- build parameters is very difficult. This can only be achieved by checking that the pre-compile and link-time parameter settings used when compiling the code are exactly the same as the pre-compile and link-time parameter settings used when configuring and com- piling the post-build parameters. This can only be done at run-time. Explanation for SWS_EcuM_02796: The ECU Manager module checks the consis- tency once before initializing the first BSW module to avoid multiple checks scattered over the different BSW modules. This also implies that: SWS_EcuM_02796 dThe ECU Manager module shall not only check the consistency of its own parameters but of all post-build configurable BSW modules before initializing the first BSW module. c() The ECU Manager Configuration Tool must compute a hash value over all pre-compile and link-time configuration parameters of all BSW modules and store the value in the link-time ECUM_CONFIGCONSISTENCY_HASH (seeEcuMConfigConsistencyHash ) configuration parameter. The hash value is necessary for two reasons. First, the pre- compile and link-time parameters are not accessible at run-time. Second, the check 40 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 must be very efficient at run-time. Comparing hundreds of parameters would cause an unacceptable delay in the ECU startup process. The ECU Manager module Configuration Tool must in turn put the computed ECUM_ CONFIGCONSISTENCY_HASH value into the field in the EcuM_ConfigType structure which contains the root of all post-build configuration parameters. SWS_EcuM_02798 dThe ECU Manager module shall check in EcuM_Init (see SWS_EcuM_02811 ) that the field in the structure is equal to the value of ECUM_ CONFIGCONSISTENCY_HASH .c() By computing hash values at configuration time and comparing them at run-time the EcuM code can be very efficient and is furthermore independent of a particular hash computation algorithm. This allows the use of complex hash computation algorithms, e.g. cryptographically strong hash functions. Note that the same hash algorithm can be used to produce the value for the post-build configuration identifier in the EcuM_ConfigType structure. Then the hash algorithm is applied to the post-build parameters instead of the pre-compile and link-time param- eters. SWS_EcuM_02799 dThe hash computation algorithm used to compute a hash value over all pre-compile and link-time configuration parameters of all BSW modules shall always produce the same hash value for the same set of configuration data regardless of the order of configuration parameters in the XML files. c() 7.3.4.2 Example Hash Computation Algorithm Note: This chapter is not normative. It describes one possible way to compute hash values. A simple",
          "function defined in a common API in the Basis-SWSWS_EcuM_NA_00000 SRS_BSW_00172 The scheduling strategy that is built inside the Basic Software Modules shall be compatible with the strategy used in the systemSWS_EcuM_02836 SRS_BSW_00307 Global variables naming convention SWS_EcuM_NA_00000 SRS_BSW_00308 AUTOSAR Basic Software Modules shall not define global data in their header files, but in the C fileSWS_EcuM_NA_00000 SRS_BSW_00309 All AUTOSAR Basic Software Modules shall indicate all global data with read-only purposes by explicitly assigning the const keywordSWS_EcuM_NA_00000 SRS_BSW_00314 All internal driver modules shall separate the interrupt frame definition from the service routineSWS_EcuM_NA_00000 5 23 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 4 Requirement Description Satisfied by SRS_BSW_00323 All AUTOSAR Basic Software Modules shall check passed API parameters for validitySWS_EcuM_03009 SRS_BSW_00325 The runtime of interrupt service routines and functions that are running in interrupt context shall be kept shortSWS_EcuM_NA_00000 SRS_BSW_00327 Error values naming convention SWS_EcuM_04032 SRS_BSW_00330 It shall be allowed to use macros instead of functions where source code is used and runtime is criticalSWS_EcuM_NA_00000 SRS_BSW_00331 All Basic Software Modules shall strictly separate error and status informationSWS_EcuM_91005 SRS_BSW_00333 For each callback function it shall be specified if it is called from interrupt context or notSWS_EcuM_02171 SWS_EcuM_02345 SRS_BSW_00334 All Basic Software Modules shall provide an XML file that contains the meta dataSWS_EcuM_NA_00000 SRS_BSW_00337 Classification of development errors SWS_EcuM_04032 SRS_BSW_00339 Reporting of production relevant error statusSWS_EcuM_02987 SRS_BSW_00341 Module documentation shall contains all needed informationsSWS_EcuM_NA_00000 SRS_BSW_00347 A Naming seperation of different instances of BSW drivers shall be in placeSWS_EcuM_NA_00000 SRS_BSW_00348 All AUTOSAR standard types and constants shall be placed and organized in a standard type header fileSWS_EcuM_NA_00000 SRS_BSW_00350 All AUTOSAR Basic Software Modules shall allow the enabling disabling of detection and reporting of development errors.SWS_EcuM_04032 SRS_BSW_00353 All integer type definitions of target and compiler specific scope shall be placed and organized in a single type headerSWS_EcuM_NA_00000 SRS_BSW_00358 The return type of init() functions implemented by AUTOSAR Basic Software Modules shall be voidSWS_EcuM_02811 SRS_BSW_00359 All AUTOSAR Basic Software Modules callback functions shall avoid return types other than void if possibleSWS_EcuM_02826 SWS_EcuM_02829 SRS_BSW_00360 AUTOSAR Basic Software Modules callback functions are allowed to have parametersSWS_EcuM_02826 SWS_EcuM_02829 SRS_BSW_00361 All mappings of not standardized keywords of compiler specific scope shall be placed and organized in a compiler specific type and keyword headerSWS_EcuM_NA_00000 5 24 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 4 Requirement Description Satisfied by SRS_BSW_00373 The main processing function of each AUTOSAR Basic Software Module shall be named according the defined conventionSWS_EcuM_02837 SRS_BSW_00385 List possible error notifications SWS_EcuM_04032 SRS_BSW_00406 A static status variable denoting if a BSW module is initialized shall be initialized with value 0 before any APIs of the BSW module is calledSWS_EcuM_NA_00000 SRS_BSW_00407 Each BSW module shall provide a function to read out the version information of a dedicated module implementationSWS_EcuM_02813 SRS_BSW_00410 Compiler switches shall have defined valuesSWS_EcuM_NA_00000 SRS_BSW_00411 All AUTOSAR Basic Software Modules shall apply a naming rule for enablingdisabling the existence of the APISWS_EcuM_02813 SRS_BSW_00413 An index-based accessing of the instances of BSW modules shall be doneSWS_EcuM_NA_00000 SRS_BSW_00414 Init functions shall have a pointer to a configuration structure as single parameterSWS_EcuM_02811 SRS_BSW_00415 Interfaces which are provided exclusively for one module shall be separated into a dedicated header fileSWS_EcuM_NA_00000 SRS_BSW_00416 The sequence of modules to be initialized shall be configurableSWS_EcuM_02559 SRS_BSW_00417 Software which is not part of the SW-C shall report error events only after the DEM is fully operational.SWS_EcuM_NA_00000 SRS_BSW_00422 Pre-de-bouncing of error status information is done within the DEMSWS_EcuM_NA_00000 SRS_BSW_00425 The BSW module description template shall provide means to model the defined trigger conditions of schedulable objectsSWS_EcuM_02837 SRS_BSW_00426 BSW Modules shall ensure data consistency of data which is shared between BSW modulesSWS_EcuM_NA_00000 SRS_BSW_00427 ISR functions shall be defined and documented in the BSW module description templateSWS_EcuM_NA_00000 SRS_BSW_00432 Modules should have separate main processing functions for readreceive and writetransmit data pathSWS_EcuM_NA_00000 SRS_BSW_00437 Memory mapping shall provide the possibility to define RAM segments which are not to be initialized during startupSWS_EcuM_NA_00000 SRS_BSW_00439 Enable BSW modules to handle interruptsSWS_EcuM_NA_00000 5 25 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 4 Requirement Description Satisfied by SRS_BSW_00440 The callback function invocation by the BSW module shall follow the signature provided by RTE to invoke servers via Rte_Call APISWS_EcuM_02826 SWS_EcuM_02829 SRS_BSW_00449 BSW Service APIs used by Autosar Application Software shall return a Std_ReturnTypeSWS_EcuM_NA_00000 SRS_BSW_00450 A Main function of a un-initialized module shall return immediatelySWS_EcuM_NA_00000 SRS_BSW_00453 BSW Modules shall be harmonized SWS_EcuM_NA_00000 SRS_ModeMgm_- 09072ECU shutdown shall be forced SWS_EcuM_03022 SRS_ModeMgm_- 09098Storing the wake-up reasons shall be availableSWS_EcuM_02826 SRS_ModeMgm_- 09100Selection of wake-up sources shall be configurableSWS_EcuM_02389 SRS_ModeMgm_- 09104ECU State Manager shall take over control after OS shutdownSWS_EcuM_02952 SWS_EcuM_02953 SRS_ModeMgm_- 09113Initialization of Basic Software modules shall be doneSWS_EcuM_02932 SRS_ModeMgm_- 09114Startinginvoking the shutdown process shall be providedSWS_EcuM_00624 SWS_EcuM_02185 SWS_EcuM_02585 SWS_EcuM_02812 SWS_EcuM_02822 SRS_ModeMgm_- 09116Requesting and releasing the RUN state shall be providedSWS_EcuM_04115 SWS_EcuM_04116 SWS_EcuM_04117 SWS_EcuM_04118 SWS_EcuM_04119 SWS_EcuM_04120 SWS_EcuM_04121 SWS_EcuM_04123 SWS_EcuM_04125 SWS_EcuM_04126 SWS_EcuM_04127 SWS_EcuM_04128 SWS_EcuM_04129 SWS_EcuM_04130 SWS_EcuM_04132 SRS_ModeMgm_- 09126An API for querying the wake-up reason shall be providedSWS_EcuM_02827 SWS_EcuM_02828 SWS_EcuM_02830 SWS_EcuM_02831 SRS_ModeMgm_- 09127The ECU State Manager shall de-initialize Basic Software modules where appropriate during the shutdown processSWS_EcuM_03021 SRS_ModeMgm_- 09128Several shutdown targets shall be supportedSWS_EcuM_02822 SWS_EcuM_02824 SWS_EcuM_02825 SRS_ModeMgm_- 09136The ECU State Manager shall be the receiver of all wake-up eventsSWS_EcuM_04091 SRS_ModeMgm_- 09186Alarm Clock shall be active while the ECU is poweredSWS_EcuM_04054 SWS_EcuM_04055 SWS_EcuM_04056 SWS_EcuM_04057 SWS_EcuM_04058 SWS_EcuM_04059 SWS_EcuM_04060 SRS_ModeMgm_- 09187In Case of wakeup, all the alarm clock shall be canceledSWS_EcuM_04009 SRS_ModeMgm_- 09188In Case of startup, all the alarm clock shall be canceledSWS_EcuM_04010 SRS_ModeMgm_- 09190The alarm clock service shall allow setting an alarm relative to the current time using a time resolution of secondsSWS_EcuM_04054 5 26 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 4 Requirement Description Satisfied by SRS_ModeMgm_- 09194The alarm clock service shall allow setting the clockSWS_EcuM_04064 SRS_ModeMgm_- 09199The alarm clock service shall allow setting an alarm absolute by using an absolute time with a resolution of secondsSWS_EcuM_04057 SRS_ModeMgm_- 09234The EcuM shall handle the initialization of Basic Software modulesSWS_EcuM_02559",
          "BSW_00348, SRS_BSW_00353, SRS_BSW_00361, SRS_BSW_00439, SRS_- BSW_00449, SRS_BSW_00308, SRS_BSW_00309, SRS_BSW_00330, SRS_- BSW_00010, SRS_BSW_00341, SRS_BSW_00334) 210 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager",
          "Slave Core GoSleep Sequencec () SWS_EcuM_04028 d 88 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 Integration Code module Wakeup Sourcemodule EcuMmodule McuPeripheral Wakeup Sourcemodule Osmodule :BswM HALT alt Validation Needed Yes NoMcu_SetMode()EcuM_SetWakeupEvent(EcuM_WakeupSourceType)Interrupt()Signal MasterCore that Slave is ready to sleep() Return from interrupt()EcuM_CheckWakeup(EcuM_WakeupSourceType) BswM_EcuM_CurrentState(ECUM_WKSTATUS_PENDING) Wait for MasterCore to continue()DisableAllInterrupts() BswM_EcuM_CurrentWakeup(Sources, ECUM_WKSTATUS_VALI DATED)Module_CheckWakeup() EnableAllInterrupts()Mcu_SetMode(Mcu_ModeType) Figure 7.32: Slave Core Halt Sequencec () SWS_EcuM_04029 d 89 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 module EcuMmodule Wakeup Sourcemodule McuIntegration Code module Osmodule BswM loop WHILE no pendingvalidated events loop FOR all wakeup sources that need polling opt Wakeup detected alt Yes No ! Mcu_SetMode(Mcu_ModeType) Wait for signal from MasterCore to continue()EcuM_SetWakeupEvent(EcuM_WakeupSourceType)Module_CheckWakeup() BswM_EcuM_CurrentWakeup(sources, ECUM_WKSTATUS_PEND ING)EcuM_GetPendingWakeupEvents(EcuM_WakeupSourceType)EnableAllInterrupts() EcuM_CheckWakeup(EcuM_WakeupSourceType)DisableAllInterrupts() BswM_EcuM_CurrentWakeup(sources, ECUM_WKSTATUS_VALI DATED)EcuM_SleepActivity() Figure 7.33: Slave Core Poll Sequencec () SWS_EcuM_04030 d 90 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 module Mcumodule Osmodule EcuMIntegration Code Mcu_SetMode(Mcu_ModeType)DisableAllInterrupts() ReleaseResource(RES_AUTOSAR_ECUM_core)EcuM_DisableWakeupSources(EcuM_WakeupSourceType)EnableAllInterrupts() Figure 7.34: Slave Core WakeupRestart Sequencec () 7.9.8 Runnables and Entry points 7.9.8.1 Internal behavior SWS_EcuM_03018 dThe definition of the internal behavior of the the ECU Manager module shall be as follows. This detailed description is only needed for the configura- tion of the local RTE. InternalBehavior EcuStateManager Runnable entities of the EcuStateManager RunnableEntity SelectShutdownTarget symbol EcuM_SelectShutdownTarget canbeInvokedConcurrently TRUE RunnableEntity GetShutdownTarget 91 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 symbol EcuM_GetShutdownTarget canbeInvokedConcurrently TRUE RunnableEntity GetLastShutdownTarget symbol EcuM_GetLastShutdownTarget canbeInvokedConcurrently TRUE RunnableEntity SelectShutdownCause symbol EcuM_SelectShutdownCause canbeInvokedConcurrently TRUE RunnableEntity GetShutdownCause symbol EcuM_GetShutdownCause canbeInvokedConcurrently TRUE RunnableEntity SelectBootTarget symbol EcuM_SelectBootTarget canbeInvokedConcurrently TRUE RunnableEntity GetBootTarget symbol EcuM_GetBootTarget canbeInvokedConcurrently TRUE RunnableEntity SetRelWakeupAlarm symbol EcuM_SetRelWakeupAlarm canbeInvokedConcurrently TRUE RunnableEntity SetAbsWakeupAlarm symbol EcuM_SetAbsWakeupAlarm canbeInvokedConcurrently TRUE RunnableEntity AbortWakeupAlarm symbol EcuM_AbortWakeupAlarm canbeInvokedConcurrently TRUE RunnableEntity GetCurrentTime symbol EcuM_GetCurrentTime canbeInvokedConcurrently TRUE RunnableEntity GetWakeupTime symbol EcuM_GetWakeupTime canbeInvokedConcurrently TRUE RunnableEntity SetClock symbol EcuM_SetClock canbeInvokedConcurrently TRUE RunnableEntity RequestRUN symbol EcuM_RequestRUN canbeInvokedConcurrently TRUE RunnableEntity ReleaseRUN symbol EcuM_ReleaseRUN canbeInvokedConcurrently TRUE RunnableEntity RequestPOSTRUN symbol EcuM_RequestPOST_RUN canbeInvokedConcurrently TRUE RunnableEntity ReleasePOSTRUN symbol EcuM_ReleasePOST_RUN canbeInvokedConcurrently TRUE Port present for each user. There are NU users SR000.RequestRUN - RequestRUN SR000.ReleaseRUN - ReleaseRUN SR000.RequestPOSTRUN - RequestPOSTRUN SR000.ReleasePOSTRUN - RequestPOSTRUN PortArgument portSR000, value.typeEcuM_UserType, value.valueEcuMUser0.User 92 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 (...) SRnnn.RequestRUN - RequestRUN SRnnn.ReleaseRUN - ReleaseRUN SRnnn.RequestPOSTRUN - RequestPOSTRUN SRnnn.ReleasePOSTRUN - RequestPOSTRUN PortArgument portSRnnn, value.typeEcuM_UserType, value.valueEcuMUsernnn.User shutDownTarget.SelectShutdownTarget - SelectShutdownTarget shutDownTarget.GetShutdownTarget - GetShutdownTarget shutDownTarget.GetLastShutdownTarget - GetLastShutdownTarget shutDownTarget.SelectShutdownCause - SelectShutdownCause shutDownTarget.GetShutdownCause - GetShutdownCause bootTarget.SelectBootTarget - SelectBootTarget bootTarget.GetBootTarget - GetBootTarget alarmClock.SetRelWakeupAlarm- SetRelWakeupAlarm alarmClock.SetAbsWakeupAlarm - SetAbsWakeupAlarm alarmClock.AbortWakeupAlarm - AbortWakeupAlarm alarmClock.GetCurrentTime - GetCurrentTime alarmClock.GetWakeupTime - GetWakeupTime alarmClock.SetClock - SetClock ; c() 7.10 EcuM Mode Handling The ECU State Manager provides interfaces for SW-Cs to request and release the modes RUN and POST_RUN optionally. EcuMFlex arbitrates the requests and releases made by SW-Cs and propagates the result to BswM. The cooperation between EcuM and BswM is necessary as only the BswM can decide when a transition to a different mode can be made. Due to the fact that the EcuM does not have an own state machine, the EcuM relies on the state transitions made by BswM. Therefore the EcuM does not request a state. Furthermore it notifies the BswM about the current arbitration of all requests. And the BswM is notified when the RTE has executed all Runnables belonging to a certain mode. ArchitecturalComponentsofECUModeHandling 93 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 Figure 7.35: Architectural Components of ECU Mode Handling Figure 7.35 illustrates the architectural components of ECU Mode Handling. SWS_EcuM_04115 dECU Mode Handling shall be applied when EcuMModeHan- dling is configured to true. c(SRS_ModeMgm_09116) SWS_EcuM_04116 dWhen the BswM sets a state of the EcuM by EcuM_SetState , the EcuM shall indicate the corresponding mode to the RTE. c(SRS_ModeMgm_09116) SWS_EcuM_04117 dWhen the last RUN request has been released, ECU State Manager module shall indicate this to BswM using the API BswM_EcuM_- RequestedState(ECUM_STATE_APP_RUN, ECUM_RUNSTATUS_RELEASED) .c (SRS_ModeMgm_09116) If a SW-C needs post run activity during POST_RUN (e.g. shutdown preparation), then it must request POST_RUN before releasing the RUN request. Otherwise it is not guaranteed that this SW-C will get a chance to run its POST_RUN code. SWS_EcuM_04118 dWhen the ECU State Manager is not in the state which is re- quested by a SWC, it shall inform BswM about requested states using the BswM_- EcuM_RequestedState API.c(SRS_ModeMgm_09116) POST_RUN state provides a post run phase for SW-Cs and allows them to save im- portant data or switch off peripherals. SWS_EcuM_04144 dWhen the first RUN or POST_RUN request has been received, ECU State Manager module shall indicate this to BswM using BswM_EcuM_Request- edState(ECUM_STATE_APP_RUN, ECUM_RUNSTATUS_REQUESTED) .c() SWS_EcuM_04119 dWhen the last POST_RUN request has been released, ECU State Manager module shall indicate this to BswM using the API BswM_EcuM_Re- questedState(ECUM_STATE_APP_POST_RUN, ECUM_RUNSTATUS_RELEASED) .c (SRS_ModeMgm_09116) 94 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 Hint: To prevent, that the mode machine instance of ECU Mode lags behind and the states EcuM and the RTE get out of phase, the EcuM can use acknowledgement feed- back for the mode switch notification. Note that EcuM only requests Modes from and to RUN and POST_RUN, the SLEEP Mode has to be set by BswM, as the EcuM has no information about when this Mode can be entered. State Description STARTUPInitial value. Set by Rte when Rte_Start() has been called. RUNAs soon as all necesseray BSW modules are inistialized, BswM switches to this Mode. POST_RUNEcuM requests POST_RUN, when no RUN requests are available. SLEEPEcuM requests SLEEP Mode when no RUN and POST_RUN requests are available and Shut- down Target is set to SLEEP . SHUTDOWNEcuM requests SHUTDOWN Mode when no RUN and POST_ RUN requests are available and Shutdown Target is set to SHUT - DOWN. Table 7.8: EcuM Modes SWS_EcuM_04143 dEcuM shall notify BswM about the current State by calling the in- terface BswM_EcuM_CurrentState(EcuM_StateType State) . A new state shall be set by EcuM when RTE has given its feedback via the acknowledgement port. c() 7.11 Advanced Topics 7.11.1 Relation to Bootloader The Bootloader is",
          "are finished processing, the cores must be synchronized before entering SHUTDOWN. The BswM (which is distributed over all partitions) ascertains that the ECU should be shut down and synchronizes with each BwsM in the ECU. All BswMs induce de- initialization of all the partitions BSWs, SWCs and CDDs and send appropriate signals to the other BswMs to indicate their readiness to shut down. 78 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 For a shutdown of the ECU, the BswM (which lies in the same partition of the master EcuM) ultimately calls GoOff on the master core which distributes that request to all slave cores. The master EcuM de-initializes the BswM, and the SchM. The EcuMs on the slave cores de-initialize their SchM and BswM and then send a signal to indicate that the core is ready for ShutdownOS (again, see section section 7.9.3 Master Core - Slave Core Signalling for details). The master EcuM waits for the signal from each slave core EcuM and then initiates shutdown as usual on the master core (the master EcuM calls ShutdownAllCores , and the ECU is put to bed with the global shutdown hook) 79 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 7.9.6.1 Master Core SHUTDOWN module EcuMmodule SchMmodule BswMmodule McOsIntegration Code opt Pending wakeup events?loop over every BswM running in this core loop FOR all configured cores EcuM_OnGoOffOne() ShutdownAllCores(StatusType)EcuM_GetPendingWakeupEvents(EcuM_WakeupSourceType)BswM_Deinit() WaitEvent(Mask)SchM_Deinit()GetCoreID(CoreIdType) EcuM_SelectShutdownTarget(Std_ReturnType, EcuM_ShutdownTargetType, EcuM_ShutdownModeType) Figure 7.23: Master Core OffPreOS Sequence 80 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 SWS_EcuM_04020 d Integration Code module EcuMmodule McOs alt Shutdown Target Reset OffGetCoreID(CoreIdType) EcuM_AL_SwitchOff()EcuM_AL_Reset(EcuM_ResetType)EcuM_OnGoOffTwo() Figure 7.24: Master Core OffPostOS Sequencec () 81 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 7.9.6.2 Slave Core SHUTDOWN module EcuMmodule McOsmodule :SchMIntegration Code module BswM loop over every BswM running in this core SetEvent(TaskId, Mask)GetCoreID(CoreIdType) SchM_Deinit()BswM_Deinit()EcuM_OnGoOffOne() Figure 7.25: Slave Core OffPreOS Sequence SWS_EcuM_04022 d 82 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 module EcuMmodule McOsIntegration Code EcuM_OnGoOffTwo()GetCoreID(CoreIdType) Figure 7.26: Slave Core OffPostOS Sequencec () 7.9.7 SLEEP Phase When the shutdown target Sleep is requested, all cores are put to sleep simultaneously. The MCU must issue a halt for each core. As task timing and priority are local to a core in the OS, neither the scheduler nor the RTE must be synchronized after a halt. Because the master core could issue the MCU halt before all slave cores are finished processing, the cores must be synchronized before entering GoHalt. The BswMs ascertain that sleep should be initiated and distribute an appropriate ECU mode to each core. The BSWs, SWCs and CDDs on the slave cores must be informed by their partition local BswM, de-initialize appropriately and send appropriate mode requests to the BswM to indicate their readiness. If the ECU is put to sleep, the halts must be synchronized so that all slave cores are halted before the master core computes the checksum. The ECU Manager module on the master core uses the same signal mechanism as for synchronizing cores on Go Off. Similarly, the ECU Manager module on the master core must validate the checksum before releasing the slave cores from the halt state 83 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 7.9.7.1 Master Core SLEEP SWS_EcuM_04023 d module EcuMmodule OsIntegration Code module :BswM GetCoreID(CoreIdType) GetResource(RES_AUTOSAR_ECUM_core)EcuM_EnableWakeupSources(EcuM_WakeupSourceType)BswM_EcuM_CurrentWakeup(sources, ECUM_WKSTATUS_NONE ) Figure 7.27: Master Core GoSleep Sequencec () SWS_EcuM_04024 d 84 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 Integration Code module :BswMPeripheral Wakeup Sourcemodule Mcumodule EcuMmodule Wakeup Sourcemodule Os HALT opt RAM check failed alt Validation Needed Yes Noalt AlarmClock Service Present EcuM_AlarmClock only pending event AND Alarm not e xpired EcuM_GenerateRamHash() EcuM_CheckRamHash(uint8)Return from interrupt()Wait for all SlaveCores to be ready to sleep() EcuM_ErrorHook(uint16)Mcu_SetMode()EcuM_SetWakeupEvent(EcuM_WakeupSourceType)Mcu_SetMode(Mcu_ModeType) Signal all SlaveCores to continue()DisableAllInterrupts()Module_CheckWakeup() BswM_EcuM_CurrentWakeup(Sources, ECUM_WKSTATUS_VALIDATED)Mcu_SetMode(Mcu_ModeType)Interrupt() EcuM_GenerateRamHash()EcuM_CheckWakeup(EcuM_WakeupSourceType) EnableAllInterrupts()DisableAllInterrupts() BswM_EcuM_CurrentWakeup(sources, ECUM_WKSTATUS_PENDING)Activate PLL() Figure 7.28: Master Core Halt Sequence 85 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 c(SRS_ModeMgm_09239) SWS_EcuM_04025 d module EcuMmodule :BswMIntegration Code module Mcumodule Wakeup Sourcemodule Os loop WHILE no pendingvalidated events loop FOR all wakeup sources that need polling opt Wakeup detected alt Yes No ! EnableAllInterrupts() Signal SlaveCores to continue()EcuM_SetWakeupEvent(EcuM_WakeupSourceType) EcuM_GetPendingWakeupEvents(EcuM_WakeupSourceType)EcuM_SleepActivity() Module_CheckWakeup()Mcu_SetMode (Mcu_ModeType) BswMEcuM_CurrentWakeup(sources, ECUM_WKSTATUS_VALIDATED)DisableAllInterrupts() BswM_EcuM_CurrentWakeup(sources, ECUM_WKSTATUS_PENDING)EcuM_CheckWakeup(EcuM_WakeupSourceType) Figure 7.29: Master Core Poll Sequencec () SWS_EcuM_04026 d 86 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 module Mcumodule Osmodule EcuMIntegration Code Mcu_SetMode(Mcu_ModeType) EcuM_GetPendingWakeupEvents(EcuM_WakeupSourceType) ReleaseResource(RES_AUTOSAR_ECUM_core)EcuM_DisableWakeupSources(EcuM_WakeupSourceType)EnableAllInterrupts()DisableAllInterrupts() EcuM_AL_DriverRestart() Figure 7.30: Master Core WakeupRestart Sequencec () 7.9.7.2 Slave Core SLEEP SWS_EcuM_04027 d 87 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 module EcuMmodule Osmodule :BswMIntegration Code GetCoreID(CoreIdType) EcuM_EnableWakeupSources(EcuM_WakeupSourceType) GetResource(RES_AUTOSAR_ECUM_core)BswM_EcuM_CurrentWakeup(sources, ECUM_WKSTATUS_NONE ) Figure 7.31: Slave Core GoSleep Sequencec () SWS_EcuM_04028 d 88 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 Integration Code module Wakeup Sourcemodule EcuMmodule McuPeripheral Wakeup Sourcemodule Osmodule :BswM HALT alt Validation Needed Yes NoMcu_SetMode()EcuM_SetWakeupEvent(EcuM_WakeupSourceType)Interrupt()Signal MasterCore that Slave is ready to sleep() Return from interrupt()EcuM_CheckWakeup(EcuM_WakeupSourceType) BswM_EcuM_CurrentState(ECUM_WKSTATUS_PENDING) Wait for MasterCore to continue()DisableAllInterrupts() BswM_EcuM_CurrentWakeup(Sources, ECUM_WKSTATUS_VALI DATED)Module_CheckWakeup() EnableAllInterrupts()Mcu_SetMode(Mcu_ModeType) Figure 7.32: Slave Core Halt Sequencec () SWS_EcuM_04029 d 89 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 module EcuMmodule Wakeup Sourcemodule McuIntegration Code module Osmodule BswM loop WHILE no pendingvalidated events loop FOR all wakeup sources that need polling opt Wakeup detected alt Yes No ! Mcu_SetMode(Mcu_ModeType) Wait for signal from MasterCore to continue()EcuM_SetWakeupEvent(EcuM_WakeupSourceType)Module_CheckWakeup() BswM_EcuM_CurrentWakeup(sources, ECUM_WKSTATUS_PEND ING)EcuM_GetPendingWakeupEvents(EcuM_WakeupSourceType)EnableAllInterrupts() EcuM_CheckWakeup(EcuM_WakeupSourceType)DisableAllInterrupts() BswM_EcuM_CurrentWakeup(sources, ECUM_WKSTATUS_VALI DATED)EcuM_SleepActivity() Figure 7.33: Slave Core Poll Sequencec () SWS_EcuM_04030 d 90 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 module Mcumodule Osmodule EcuMIntegration Code Mcu_SetMode(Mcu_ModeType)DisableAllInterrupts() ReleaseResource(RES_AUTOSAR_ECUM_core)EcuM_DisableWakeupSources(EcuM_WakeupSourceType)EnableAllInterrupts() Figure 7.34: Slave Core WakeupRestart Sequencec () 7.9.8 Runnables and Entry points 7.9.8.1 Internal behavior SWS_EcuM_03018 dThe definition of the internal behavior of the the ECU Manager module shall be as follows. This detailed description is only needed for the configura- tion",
          "Operation successful Possible Errors 1 E_NOT_OK Operation failed Operation ReleasePOSTRUN Comment Variation Possible Errors E_OK E_NOT_OK Operation ReleaseRUN Comment Variation Possible Errors E_OK E_NOT_OK Operation RequestPOSTRUN Comment Variation Possible Errors E_OK E_NOT_OK 149 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 Operation RequestRUN Comment Variation Possible Errors E_OK E_NOT_OK c() 8.8.6 Port Interface for EcuM_CurrentMode Interface 8.8.6.1 General Approach SWS_EcuM_04132 dThe mode port of the ECU State Manager module shall declare the following modes: STARTUP RUN POST_RUN SLEEP SHUTDOWN c(SRS_ModeMgm_09116) This definition is a simplified view of ECU Modes that applications do need to know. It does not restrict or limit in any way how application modes could be defined. Applica- tions modes are completely handled by the application itself. SWS_EcuM_04133 dMode changes shall be notified to SW-Cs through the RTE mode ports when the mode change occurs. This specification assumes that the port name is currentMode and that the direct API of RTE will be used. Under these conditions mode changes signaled by invoking Rte_StatusType Rte_Switch_currentMode_currentMode( Rte_ModeType_EcuM_Mode mode) where mode is the new mode to be notified. The value range is specified by the previ- ous requirement. The return value shall be ignored. A SW-C which wants to be notified of mode changes should require the mode switch interface EcuM_CurrentMode. c() 150 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 8.8.6.2 Data Types The mode declaration group EcuM_Mode represents the modes of the ECU State Manager module that will be notified to the SW-Cs. ModeDeclarationGroup EcuM_Mode STARTUP , RUN, POST_RUN, SLEEP , SHUTDOWN initialMode STARTUP ; SWS_EcuM_04107 d Name EcuM_Mode Kind ModeDeclarationGroup Category ALPHABETIC_ORDER Initial mode STARTUP On transition value POST_RUN RUN SHUTDOWN SLEEP Modes STARTUP Description c() 8.8.6.3 Service Interfaces SWS_EcuM_04108 d Name EcuM_CurrentMode Comment Interface to read the current ECU mode IsService true Variation ModeGroup currentMode EcuM_Mode c() 8.8.7 Definition of the ECU Manager Service This section provides guidance on the definition of the ECU Manager module Service. Note that these definitions can only be completed during ECU configuration (since certain ECU Manager module configuration parameters determine the number of ports 151 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 provided by the ECU Manager module service). Also note a SW-Cs implementation does not depend on these definitions. In an AUTOSAR system, there are ports both above and below the RTE. The ECU Manager module service description defines ports provided to the RTE and the de- scriptions of every SW-C that uses this service must contain service ports which required these ECU Manager module ports from the RTE. The EcuM provides the following ports: SWS_EcuM_04111 d Name ShutdownTarget_UserName Kind ProvidedPort Interface EcuM_ShutdownTarget Description Provides an interface to SW-Cs to select a new shutdown target and query the current shutdown target. Variation UserName ecuc(EcuMEcuMConfigurationEcuMFlexConfigurationEcuMFlexUserConfigEcu MFlexUser.SHORT -NAME) c() SWS_EcuM_04110 d Name BootTarget_UserName Kind ProvidedPort Interface EcuM_BootTarget Description Provides an interface to SW-Cs to select a new boot target and query the current boot target. Variation UserName ecuc(EcuMEcuMConfigurationEcuMFlexConfigurationEcuMFlexUserConfigEcu MFlexUser.SHORT -NAME) c() SWS_EcuM_03017 d Name AlarmClock_UserName Kind ProvidedPort Interface EcuM_AlarmClock Description Provides to SW-Cs an alarm clock. The EcuM_AlarmClock port uses port-defined argument values to identify the user that manages its alarm clock. Type EcuM_UserType Port Defined Argument Value(s)Value ecuc(EcuMEcuMConfigurationEcuMFlexConfigurationEcuMFlexUser ConfigEcuMFlexUser.value) Variation ecuc(EcuMEcuMFlexGeneralEcuMAlarmClockPresent) true UserName ecuc(EcuMEcuMConfigurationEcuMFlexConfigurationEcuMAlarm Clock.SHORT -NAME) c() SWS_EcuM_04113 d 152 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 Name time Kind ProvidedPort Interface EcuM_Time Description Provides the EcuMs time service to SWCs Variation c() SWS_EcuM_04135 d Name StateRequest_UserName Kind ProvidedPort Interface EcuM_StateRequest Description Provides an interface to SW-Cs to request state changes of the ECU state. The port uses port-defined argument values to identify the user. Type EcuM_UserType Port Defined Argument Value(s)Value ecuc(EcuMEcuMConfigurationEcuMFlexConfigurationEcuMFlexUser ConfigEcuMFlexUser.value) Variation UserName ecuc(EcuMEcuMConfigurationEcuMFlexConfigurationEcuMFlexUserConfigEcu MFlexUser.SHORT -NAME) c() SWS_EcuM_04112 d Name currentMode Kind ProvidedPort Interface EcuM_CurrentMode Description Variation c() The EcuM provides the following types: SWS_EcuM_91004 d Name EcuM_UserType Kind Type Derived from uint8 Description Unique value for each user. Variation Available via Rte_EcuM_Type.h c() SWS_EcuM_04102 d 153 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 Name EcuM_TimeType Kind Type Derived from uint32 Description This data type represents the time of the ECU Manager module. Variation Available via Rte_EcuM_Type.h c() d Name EcuM_BootTargetType Kind Type Derived from uint8 ECUM_BOOT_TARGET_APP 0 The ECU will boot into the application ECUM_BOOT_TARGET_OEM_ BOOTLOADER1 The ECU will boot into the OEM bootloaderRange ECUM_BOOT_TARGET_SYS_ BOOTLOADER2 The ECU will boot into the system supplier bootloader Description This type represents the boot targets the ECU Manager module can be configured with. The default boot target is ECUM_BOOT_TARGET_OEM_BOOTLOADER. Variation Available via Rte_EcuM_Type.h c() SWS_EcuM_04045 d Name EcuM_ShutdownCauseType Kind Type Derived from uint8 ECUM_CAUSE_UNKNOWN 0 No cause was set. ECUM_CAUSE_ECU_STATE 1 ECU state machine entered a state for shutdown ECUM_CAUSE_WDGM 2 Watchdog Manager detected a failureRange ECUM_CAUSE_DCM 3 Diagnostic Communication Manager requests a shutdown due to a service request Description This type describes the cause for a shutdown by the ECU State Manager. It can be extended by configuration. Variation Available via Rte_EcuM_Type.h c() SWS_EcuM_04101 d 154 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 Name EcuM_ShutdownModeType Kind Type Derived from uint16 ecuc(EcuMEcuMConfiguration EcuMFlexConfigurationEcu MResetMode.SHORT -NAME)256 ecuc(EcuMEcu MConfigurationEcu MFlexConfiguration EcuMResetMode.Ecu MResetModeId)Configured Reset Modes Range ecuc(EcuMEcuMConfiguration EcuMCommonConfigurationEcu MSleepMode.SHORT -NAME)ecuc(EcuM Ecu MConfigurationEcu MCommon ConfigurationEcu MSleepMode.Ecu MSleepModeId)Configured Sleep Modes Description This data type represents the modes of the ECU Manager module. Variation Available via Rte_EcuM_Type.h c() SWS_EcuM_04136 d Name EcuM_ShutdownTargetType Kind Type Derived from uint8 ECUM_SHUTDOWN_TARGET_ SLEEP0x0 ECUM_SHUTDOWN_TARGET_ RESET0x1 Range ECUM_SHUTDOWN_TARGET_ OFF0x2 Description Variation Available via Rte_EcuM_Type.h c() SWS_EcuM_04094 dIn the case of a MultiCore ECU, the EcuM AUTOSAR service (Standardized AUTOSAR Interfaces) may be offered on one or more cores. c() Although the EcuM service interfaces are available on every core (see section 7.9 Multi Core for details), the EcuC allows the provided ports to be bound to the interface on a particular partition, and therefore to a particular core (see the Specification",
          "selects the cause corresponding to the next shutdown target Variation shutdownTarget Type EcuM_ShutdownTargetType Direction IN Comment The selected shutdown cause Variation shutdownMode Type EcuM_ShutdownModeType Direction IN Comment The identfier of a sleep mode (if shutdownTarget is ECUM_SHUTDOWN_ TARGET_SLEEP) or a reset mechanism (if shutdownTarget is ECUM_ SHUTDOWN_TARGET_RESET) as defined by configuration.Parameters Variation Possible Errors E_OK E_NOT_OK c() SWS_EcuM_02979 dThe shutdownMode parameter shall determine the specific sleep or reset mode (see ECUC_EcuM_00132) relevant to SelectShutdownTarget, GetShutdownTarget and GetLastShutdownTarget. The ECU Manager module shall only use the shutdownMode parameter is if the shutdownTarget parameter is equal to ECUM_SHUTDOWN_TARGET_SLEEP or ECUM_SHUTDOWN_TARGET_RESET, otherwise it shall be ignored. c() 144 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 8.8.2 Port Interface for EcuM_BootTarget Interface 8.8.2.1 General Approach A SW-C that wants to select a boot target must require the client-server interface Ecu M_BootTarget. 8.8.2.2 Service Interfaces SWS_EcuM_03012 d Name EcuM_BootTarget Comment A SW-C that wants to select a boot target must use the client-server interface EcuM_Boot Target. IsService true Variation 0 E_OK Operation successful Possible Errors 1 E_NOT_OK Operation failed Operation GetBootTarget Comment Returns the current boot target Variation target Type EcuM_BootTargetType Direction OUT Comment The currently selected boot targetParameters Variation Possible Errors E_OK Operation SelectBootTarget Comment Selects a boot target Variation target Type EcuM_BootTargetType Direction IN Comment The selected boot targetParameters Variation Possible Errors E_OK E_NOT_OK c() 145 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 8.8.3 Port Interface for EcuM_AlarmClock Interface 8.8.3.1 General Approach A SW-C that wants to use an alarm clock must require the client-server interface Ecu M_AlarmClock. The EcuM_AlarmClock interface uses port-defined argument values to identify the user that manages its alarm clock. See SWS_Rte_1350 in the Specifi- cation of RTE 2 for a description of port-defined argument values. 8.8.3.2 Service Interfaces SWS_EcuM_04105 d Name EcuM_AlarmClock Comment A SW-C that wants to use an alarm clock must use the client-server interface EcuM_Alarm Clock. IsService true Variation ecuc(EcuMEcuMFlexGeneralEcuMAlarmClockPresent) True 0 E_OK Operation successful 1 E_NOT_OK Operation failed 3 ECUM_E_EARLIER_ ACTIVEAn earlier alarm is already set 4 ECUM_E_PAST The desired point in time has already passedPossible Errors 5 ECUM_E_NOT_ACTIVE No active alarm found Operation AbortWakeupAlarm Comment Aborts the wakeup alarm previously set by this user Variation Possible Errors E_OK E_NOT_OK ECUM_E_NOT_ACTIVE Operation SetAbsWakeupAlarm Comment Sets the users wakeup alarm to an absolute point in time Variation time Type EcuM_TimeType Direction IN Comment Absolute time in seconds. Note that, absolute alarms use knowledge of the current timeParameters Variation Possible Errors E_OK E_NOT_OK ECUM_E_EARLIER_ACTIVE ECUM_E_PAST 146 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 Operation SetClock Comment Sets the EcuM clock time to the provided value Variation time Type EcuM_TimeType Direction IN Comment Absolute time in seconds since battery connectParameters Variation Possible Errors E_OK E_NOT_OK Operation SetRelWakeupAlarm Comment Sets a users wakeup alarm relative to the current point in time Variation time Type EcuM_TimeType Direction IN Comment Relative time from now in secondsParameters Variation Possible Errors E_OK E_NOT_OK ECUM_E_EARLIER_ACTIVE c() 8.8.4 Port Interface for EcuM_Time Interface 8.8.4.1 General Approach A SW-C that wants to use the time functionality of the EucM must require the client- server interface EcuM_Time. 8.8.4.2 Data Types The EcuM_Time service does not have any specific data types. 8.8.4.3 Service Interfaces SWS_EcuM_04109 d 147 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 Name EcuM_Time Comment IsService true Variation 0 E_OK Operation successful Possible Errors 1 E_NOT_OK Operation failed Operation GetCurrentTime Comment Returns the current value of the EcuM clock (i.e. the time in seconds since battery connect) Variation time Type EcuM_TimeType Direction OUT Comment Absolute time in seconds since battery connectParameters Variation Possible Errors E_OK E_NOT_OK Operation GetWakeupTime Comment Returns the current value of the master alarm clock (the minimum absolute time of all user alarm clocks) Variation time Type EcuM_TimeType Direction OUT Comment Absolute time in seconds for next wakeup. 0xFFFFFFFF means no active alarm.Parameters Variation Possible Errors E_OK E_NOT_OK c() 8.8.5 Port Interface for EcuM_StateRequest Interface SWS_EcuM_04130 dThe ECU State Manager module shall provide System Services for the following functionalities when the container EcuMModeHandling (see 10.2.1) is available: requesting RUN releasing RUN requesting POST_RUN releasing POST_RUN c(SRS_ModeMgm_09116) 148 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 8.8.5.1 General Approach A SW-C which needs to keep the ECU alive or needs to execute any operations before the ECU is shut down shall require the client-server interface EcuM_StateRequest. This interface uses port-defined argument values to identify the user that requests modes. See SWS_Rte_1350 for a description of port-defined argument values. 8.8.5.2 Data Types No data types are needed for this interface. 8.8.5.3 Service Interfaces SWS_EcuM_04131 d Name EcuM_StateRequest Comment Interface to request a specific ECU state IsService true Variation 0 E_OK Operation successful Possible Errors 1 E_NOT_OK Operation failed Operation ReleasePOSTRUN Comment Variation Possible Errors E_OK E_NOT_OK Operation ReleaseRUN Comment Variation Possible Errors E_OK E_NOT_OK Operation RequestPOSTRUN Comment Variation Possible Errors E_OK E_NOT_OK 149 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 Operation RequestRUN Comment Variation Possible Errors E_OK E_NOT_OK c() 8.8.6 Port Interface for EcuM_CurrentMode Interface 8.8.6.1 General Approach SWS_EcuM_04132 dThe mode port of the ECU State Manager module shall declare the following modes: STARTUP RUN POST_RUN SLEEP SHUTDOWN c(SRS_ModeMgm_09116) This definition is a simplified view of ECU Modes that applications do need to know. It does not restrict or limit in any way how application modes could be defined. Applica- tions modes are completely handled by the application itself. SWS_EcuM_04133 dMode changes shall be notified to SW-Cs through the RTE mode ports when the mode change occurs. This specification assumes that the port name is currentMode and that the direct API of RTE will be used. Under these conditions mode changes signaled by invoking Rte_StatusType Rte_Switch_currentMode_currentMode( Rte_ModeType_EcuM_Mode mode) where mode is the new mode to be notified. The value range is specified by the previ- ous requirement. The return value shall be ignored.",
          "BSW_00348, SRS_BSW_00353, SRS_BSW_00361, SRS_BSW_00439, SRS_- BSW_00449, SRS_BSW_00308, SRS_BSW_00309, SRS_BSW_00330, SRS_- BSW_00010, SRS_BSW_00341, SRS_BSW_00334) 210 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager",
          "Specification of ECU State Manager AUTOSAR CP R20-11 Document TitleSpecification of ECU State Manager Document Owner AUTOSAR Document Responsibility AUTOSAR Document Identification No 78 Document Status published Part of AUTOSAR Standard Classic Platform Part of Standard Release R20-11 Document Change History Date Release Changed by Description 2020-11-30 R20-11AUTOSAR Release ManagementCorrected broken chapter structure EcuM_UserType handling improved Minor content changes, clarifications (multi-core, configuration, values) 2019-11-28 R19-11AUTOSAR Release ManagementNo content changes Changed Document Status from Final to published 2018-10-31 4.4.0AUTOSAR Release ManagementReworked BswM interface through EcuM_GoDownHaltPoll Removed EcuM fixed version references 2017-12-08 4.3.1AUTOSAR Release ManagementAdapt API Can_CheckWakeup Removed ConfigPtr parameter Removed Default error Removed unused DIO driver EcuM AUTOSAR service configure on service partition only 2016-11-30 4.3.0AUTOSAR Release ManagementPartial Network Cluster Support Initialization BSW scheduler slipt Added a driver initialization list Removed EcuM_StateType 1 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 2015-07-31 4.2.2AUTOSAR Release ManagementReworked slave core poll sequence Reviewed multicore shutdown synchronization Reclassified error types Editorial changes 2014-10-31 4.2.1AUTOSAR Release ManagementAdded switch configuration Defined initialization order for InitListZeroInitListOne Definition of the name pattern of c-init-data struct corrected Type conflicts solved Editorial changes 2014-03-31 4.1.3AUTOSAR Release ManagementEcuM errors reworked Inconsistencies between APIs and Interfaces resolved Type conflicts solved Editorial changes 2013-10-31 4.1.2AUTOSAR Release ManagementAdded API table for service interfaces Fixed traceability topics General clean-up of requirements (reviewed different interfaces, operations, descriptions and figures). Editorial changes 2 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 2013-03-15 4.1.1AUTOSAR AdministrationSpecified reset mode to use in case of pending wakeup events during shutdown Added callout for Reset Loop Detection Extended specification of parameter time of function EcuM_GetMostRecentShutdown Improved configuration description Added new APIs to enable asynchronous Trcv handling for CANFR Wakeup Adaption of EcuM Flex to support BSW modules distributed over multiple partitions Reclassified which Production Errors are Extended Production Errors Added possible error to operations of ClientServer-Interfaces, where no errors where defined Enhancement of configuration to initialize BSW modules by the EcuM Flex 2011-12-22 4.0.3AUTOSAR AdministrationFixed interoperability problems between EcuM and BswM Terminology of ECU State Manager Flexible more consistently described Modification of sleep sequences to minimize misses of wakeup interrupts 2010-09-30 3.1.5AUTOSAR AdministrationUpdated pseudo code for AUTOSAR Services Update startup procedure for multi core systems 2010-02-02 3.1.4AUTOSAR AdministrationRemoved state machine to accommodate mode-dependent scheduling Added Multi-Core support Added Alarm Clock feature Revised disclaimer 2008-08-13 3.1.1AUTOSAR AdministrationLegal disclaimer revised 3 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 2007-12-21 3.0.1AUTOSAR AdministrationFixed Wakeup mechanisms Included optional triggering of Watchdog Manager during Startup, Shutdown, and Sleep Extended startup sequence to have more flexibility and to directly initialize all other BSW modules Generated APIs from BSW UML model Generated configuration from Meta Model Document meta information extended Small layout adaptations made 2007-01-24 2.1.15AUTOSAR AdministrationCorrected startup flow and wakeup concept. Added specification for AUTOSAR ports. Modified configuration for compliance with variant management. Added new API services. Legal disclaimer revised Release Notes added Advice for users revised Revision Information added 2006-05-16 2.0AUTOSAR Administration Initial Release 4 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 Disclaimer This work (specification andor software implementation) and the material contained in it, as released by AUTOSAR, is for the purpose of information only. AUTOSAR and the companies that have contributed to it shall not be liable for any use of the work. The material contained in this work is protected by copyright and other types of intel- lectual property rights. The commercial exploitation of the material contained in this work requires a license to such intellectual property rights. This work may be utilized or reproduced without any modification, in any form or by any means, for informational purposes only. For any other purpose, no part of the work may be utilized or reproduced, in any form or by any means, without permission in writing from the publisher. The work has been developed for automotive applications only. It has neither been developed, nor tested for non-automotive applications. The word AUTOSAR and the AUTOSAR logo are registered trademarks. 5 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 Table of Contents 1 Introduction and Functional Overview 13 1.1 Backwards Compatibility to Previous ECU Manager Module Versions . 14 2 Definitions and Abbreviations 15 2.1 Definitions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 15 2.2 Abbreviations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 15 3 Related documentation 17 3.1 Input documents related standards and norms . . . . . . . . . . . . 17 3.2 Related specification . . . . . . . . . . . . . . . . . . . . . . . . . . . . 17 4 Constraints and Assumptions 18 4.1 Limitations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 18 4.2 Hardware Requirements . . . . . . . . . . . . . . . . . . . . . . . . . . 18 4.3 Applicability to car domains . . . . . . . . . . . . . . . . . . . . . . . . 18 5 Dependencies to other modules 19 5.1 SPAL Modules . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 19 5.1.1 MCU Driver . . . . . . . . . .",
          "Slave Core GoSleep Sequencec () SWS_EcuM_04028 d 88 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 Integration Code module Wakeup Sourcemodule EcuMmodule McuPeripheral Wakeup Sourcemodule Osmodule :BswM HALT alt Validation Needed Yes NoMcu_SetMode()EcuM_SetWakeupEvent(EcuM_WakeupSourceType)Interrupt()Signal MasterCore that Slave is ready to sleep() Return from interrupt()EcuM_CheckWakeup(EcuM_WakeupSourceType) BswM_EcuM_CurrentState(ECUM_WKSTATUS_PENDING) Wait for MasterCore to continue()DisableAllInterrupts() BswM_EcuM_CurrentWakeup(Sources, ECUM_WKSTATUS_VALI DATED)Module_CheckWakeup() EnableAllInterrupts()Mcu_SetMode(Mcu_ModeType) Figure 7.32: Slave Core Halt Sequencec () SWS_EcuM_04029 d 89 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 module EcuMmodule Wakeup Sourcemodule McuIntegration Code module Osmodule BswM loop WHILE no pendingvalidated events loop FOR all wakeup sources that need polling opt Wakeup detected alt Yes No ! Mcu_SetMode(Mcu_ModeType) Wait for signal from MasterCore to continue()EcuM_SetWakeupEvent(EcuM_WakeupSourceType)Module_CheckWakeup() BswM_EcuM_CurrentWakeup(sources, ECUM_WKSTATUS_PEND ING)EcuM_GetPendingWakeupEvents(EcuM_WakeupSourceType)EnableAllInterrupts() EcuM_CheckWakeup(EcuM_WakeupSourceType)DisableAllInterrupts() BswM_EcuM_CurrentWakeup(sources, ECUM_WKSTATUS_VALI DATED)EcuM_SleepActivity() Figure 7.33: Slave Core Poll Sequencec () SWS_EcuM_04030 d 90 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 module Mcumodule Osmodule EcuMIntegration Code Mcu_SetMode(Mcu_ModeType)DisableAllInterrupts() ReleaseResource(RES_AUTOSAR_ECUM_core)EcuM_DisableWakeupSources(EcuM_WakeupSourceType)EnableAllInterrupts() Figure 7.34: Slave Core WakeupRestart Sequencec () 7.9.8 Runnables and Entry points 7.9.8.1 Internal behavior SWS_EcuM_03018 dThe definition of the internal behavior of the the ECU Manager module shall be as follows. This detailed description is only needed for the configura- tion of the local RTE. InternalBehavior EcuStateManager Runnable entities of the EcuStateManager RunnableEntity SelectShutdownTarget symbol EcuM_SelectShutdownTarget canbeInvokedConcurrently TRUE RunnableEntity GetShutdownTarget 91 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 symbol EcuM_GetShutdownTarget canbeInvokedConcurrently TRUE RunnableEntity GetLastShutdownTarget symbol EcuM_GetLastShutdownTarget canbeInvokedConcurrently TRUE RunnableEntity SelectShutdownCause symbol EcuM_SelectShutdownCause canbeInvokedConcurrently TRUE RunnableEntity GetShutdownCause symbol EcuM_GetShutdownCause canbeInvokedConcurrently TRUE RunnableEntity SelectBootTarget symbol EcuM_SelectBootTarget canbeInvokedConcurrently TRUE RunnableEntity GetBootTarget symbol EcuM_GetBootTarget canbeInvokedConcurrently TRUE RunnableEntity SetRelWakeupAlarm symbol EcuM_SetRelWakeupAlarm canbeInvokedConcurrently TRUE RunnableEntity SetAbsWakeupAlarm symbol EcuM_SetAbsWakeupAlarm canbeInvokedConcurrently TRUE RunnableEntity AbortWakeupAlarm symbol EcuM_AbortWakeupAlarm canbeInvokedConcurrently TRUE RunnableEntity GetCurrentTime symbol EcuM_GetCurrentTime canbeInvokedConcurrently TRUE RunnableEntity GetWakeupTime symbol EcuM_GetWakeupTime canbeInvokedConcurrently TRUE RunnableEntity SetClock symbol EcuM_SetClock canbeInvokedConcurrently TRUE RunnableEntity RequestRUN symbol EcuM_RequestRUN canbeInvokedConcurrently TRUE RunnableEntity ReleaseRUN symbol EcuM_ReleaseRUN canbeInvokedConcurrently TRUE RunnableEntity RequestPOSTRUN symbol EcuM_RequestPOST_RUN canbeInvokedConcurrently TRUE RunnableEntity ReleasePOSTRUN symbol EcuM_ReleasePOST_RUN canbeInvokedConcurrently TRUE Port present for each user. There are NU users SR000.RequestRUN - RequestRUN SR000.ReleaseRUN - ReleaseRUN SR000.RequestPOSTRUN - RequestPOSTRUN SR000.ReleasePOSTRUN - RequestPOSTRUN PortArgument portSR000, value.typeEcuM_UserType, value.valueEcuMUser0.User 92 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 (...) SRnnn.RequestRUN - RequestRUN SRnnn.ReleaseRUN - ReleaseRUN SRnnn.RequestPOSTRUN - RequestPOSTRUN SRnnn.ReleasePOSTRUN - RequestPOSTRUN PortArgument portSRnnn, value.typeEcuM_UserType, value.valueEcuMUsernnn.User shutDownTarget.SelectShutdownTarget - SelectShutdownTarget shutDownTarget.GetShutdownTarget - GetShutdownTarget shutDownTarget.GetLastShutdownTarget - GetLastShutdownTarget shutDownTarget.SelectShutdownCause - SelectShutdownCause shutDownTarget.GetShutdownCause - GetShutdownCause bootTarget.SelectBootTarget - SelectBootTarget bootTarget.GetBootTarget - GetBootTarget alarmClock.SetRelWakeupAlarm- SetRelWakeupAlarm alarmClock.SetAbsWakeupAlarm - SetAbsWakeupAlarm alarmClock.AbortWakeupAlarm - AbortWakeupAlarm alarmClock.GetCurrentTime - GetCurrentTime alarmClock.GetWakeupTime - GetWakeupTime alarmClock.SetClock - SetClock ; c() 7.10 EcuM Mode Handling The ECU State Manager provides interfaces for SW-Cs to request and release the modes RUN and POST_RUN optionally. EcuMFlex arbitrates the requests and releases made by SW-Cs and propagates the result to BswM. The cooperation between EcuM and BswM is necessary as only the BswM can decide when a transition to a different mode can be made. Due to the fact that the EcuM does not have an own state machine, the EcuM relies on the state transitions made by BswM. Therefore the EcuM does not request a state. Furthermore it notifies the BswM about the current arbitration of all requests. And the BswM is notified when the RTE has executed all Runnables belonging to a certain mode. ArchitecturalComponentsofECUModeHandling 93 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 Figure 7.35: Architectural Components of ECU Mode Handling Figure 7.35 illustrates the architectural components of ECU Mode Handling. SWS_EcuM_04115 dECU Mode Handling shall be applied when EcuMModeHan- dling is configured to true. c(SRS_ModeMgm_09116) SWS_EcuM_04116 dWhen the BswM sets a state of the EcuM by EcuM_SetState , the EcuM shall indicate the corresponding mode to the RTE. c(SRS_ModeMgm_09116) SWS_EcuM_04117 dWhen the last RUN request has been released, ECU State Manager module shall indicate this to BswM using the API BswM_EcuM_- RequestedState(ECUM_STATE_APP_RUN, ECUM_RUNSTATUS_RELEASED) .c (SRS_ModeMgm_09116) If a SW-C needs post run activity during POST_RUN (e.g. shutdown preparation), then it must request POST_RUN before releasing the RUN request. Otherwise it is not guaranteed that this SW-C will get a chance to run its POST_RUN code. SWS_EcuM_04118 dWhen the ECU State Manager is not in the state which is re- quested by a SWC, it shall inform BswM about requested states using the BswM_- EcuM_RequestedState API.c(SRS_ModeMgm_09116) POST_RUN state provides a post run phase for SW-Cs and allows them to save im- portant data or switch off peripherals. SWS_EcuM_04144 dWhen the first RUN or POST_RUN request has been received, ECU State Manager module shall indicate this to BswM using BswM_EcuM_Request- edState(ECUM_STATE_APP_RUN, ECUM_RUNSTATUS_REQUESTED) .c() SWS_EcuM_04119 dWhen the last POST_RUN request has been released, ECU State Manager module shall indicate this to BswM using the API BswM_EcuM_Re- questedState(ECUM_STATE_APP_POST_RUN, ECUM_RUNSTATUS_RELEASED) .c (SRS_ModeMgm_09116) 94 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 Hint: To prevent, that the mode machine instance of ECU Mode lags behind and the states EcuM and the RTE get out of phase, the EcuM can use acknowledgement feed- back for the mode switch notification. Note that EcuM only requests Modes from and to RUN and POST_RUN, the SLEEP Mode has to be set by BswM, as the EcuM has no information about when this Mode can be entered. State Description STARTUPInitial value. Set by Rte when Rte_Start() has been called. RUNAs soon as all necesseray BSW modules are inistialized, BswM switches to this Mode. POST_RUNEcuM requests POST_RUN, when no RUN requests are available. SLEEPEcuM requests SLEEP Mode when no RUN and POST_RUN requests are available and Shut- down Target is set to SLEEP . SHUTDOWNEcuM requests SHUTDOWN Mode when no RUN and POST_ RUN requests are available and Shutdown Target is set to SHUT - DOWN. Table 7.8: EcuM Modes SWS_EcuM_04143 dEcuM shall notify BswM about the current State by calling the in- terface BswM_EcuM_CurrentState(EcuM_StateType State) . A new state shall be set by EcuM when RTE has given its feedback via the acknowledgement port. c() 7.11 Advanced Topics 7.11.1 Relation to Bootloader The Bootloader is",
          "execution control and will carry out GO OFF II activities. Available via EcuM.h c(SRS_ModeMgm_09114) 106 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 8.3.3 State Management 8.3.3.1 EcuM_ SetState SWS_EcuM_04122 d Service Name EcuM_SetState Syntaxvoid EcuM_SetState ( EcuM_StateType state ) Service ID hex 0x2b SyncAsync Synchronous Reentrancy Reentrant Parameters (in) state State indicated by BswM. Parameters (inout) None Parameters (out) None Return value None Description Function called by BswM to notify about State Switch. Available via EcuM.h c() SWS_EcuM_04123 dThe EcuM_SetState function shall set the EcuM State to the value of the State parameter. If the State parameter is not a valid value, the EcuM_SetState function shall not change the State and if Development Error Reporting is turned on, the EcuM_SetState function shall additionally send an ECUM_E_STATE_PAR_OUT_OF_RANGE error message to the DET module.c(SRS_ModeMgm_09116) 8.3.3.2 EcuM_RequestRUN SWS_EcuM_04124 d Service Name EcuM_RequestRUN SyntaxStd_ReturnType EcuM_RequestRUN ( EcuM_UserType user ) Service ID hex 0x03 SyncAsync Synchronous Reentrancy Reentrant Parameters (in) user ID of the entity requesting the RUN state. Parameters (inout) None Parameters (out) None 5 107 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 4 Return value Std_ReturnType E_OK: The request was accepted by EcuM. E_NOT_OK: The request was not accepted by EcuM Description Places a request for the RUN state. Requests can be placed by every user made known to the state manager at configuration time. Available via EcuM.h c() SWS_EcuM_04125 dRequests of EcuM_RequestRUN cannot be nested, i.e. one user can only place one request but not more. Additional or duplicate user requests by the same user shall be reported to DET. Of course the DET will only be notified under development conditions. c(SRS_ModeMgm_09116) SWS_EcuM_04126 dAn implementation must track requests for each user known on the ECU. Run requests are specific to the user. c(SRS_ModeMgm_09116) SWS_EcuM_03024 dIf development error detection is enabled and there are multiple requests by the same user detected by EcuM_RequestRUN the function shall report ECUM_E_MULTIPLE_RUN_REQUESTS to Det.c() 8.3.3.3 EcuM_ReleaseRUN SWS_EcuM_04127 d Service Name EcuM_ReleaseRUN SyntaxStd_ReturnType EcuM_ReleaseRUN ( EcuM_UserType user ) Service ID hex 0x04 SyncAsync Synchronous Reentrancy Reentrant Parameters (in) user ID of the entity releasing the RUN state. Parameters (inout) None Parameters (out) None Return value Std_ReturnType E_OK: The release request was accepted by EcuM E_NOT_OK: The release request was not accepted by EcuM Description Releases a RUN request previously done with a call to EcuM_RequestRUN. The service is intended for implementing AUTOSAR ports. Available via EcuM.h c(SRS_ModeMgm_09116) SWS_EcuM_03023 dIf development error detection is enabled and EcuM_Re- leaseRUN did not find a previous matching request for the provided user, then the function shall report ECUM_E_MISMATCHED_RUN_RELEASE to Det.c() Configuration of EcuM_ReleaseRUN: Refer to EcuM_UserType for more information about user IDs and their generation. 108 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 8.3.3.4 EcuM_RequestPOST_RUN SWS_EcuM_04128 d Service Name EcuM_RequestPOST_RUN SyntaxStd_ReturnType EcuM_RequestPOST_RUN ( EcuM_UserType user ) Service ID hex 0x0a SyncAsync Synchronous Reentrancy Reentrant Parameters (in) user ID of the entity requesting the POST RUN state. Parameters (inout) None Parameters (out) None Return value Std_ReturnType E_OK: The request was accepted by EcuM E_NOT_OK: The request was not accepted by EcuM Description Places a request for the POST RUN state. Requests can be placed by every user made known to the state manager at configuration time. Requests for RUN and POST RUN must be tracked independently (in other words: two independent variables). The service is intended for implementing AUTOSAR ports. Available via EcuM.h c(SRS_ModeMgm_09116) SWS_EcuM_03025 dIf development error detection is enabled and there are multiple requests by the same user detected by EcuM_RequestPOST_RUN the function shall report ECUM_E_MULTIPLE_RUN_REQUESTS to Det.c() All requirements of 8.3.3.2 EcuM_RequestRUN apply accordingly to the function Ecu M_RequestPOST_RUN. Configuration of EcuM_RequestPOST_RUN: Refer to EcuM_UserType for more infor- mation about user IDs and their generation. 8.3.3.5 EcuM_ReleasePOST_RUN SWS_EcuM_04129 d Service Name EcuM_ReleasePOST_RUN SyntaxStd_ReturnType EcuM_ReleasePOST_RUN ( EcuM_UserType user ) Service ID hex 0x0b SyncAsync Synchronous Reentrancy Reentrant 5 109 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 4 Parameters (in) user ID of the entity releasing the POST RUN state. Parameters (inout) None Parameters (out) None Return value Std_ReturnType E_OK: The release request was accepted by EcuM E_NOT_OK: The release request was not accepted by EcuM Description Releases a POST RUN request previously done with a call to EcuM_RequestPOST_RUN. The service is intended for implementing AUTOSAR ports. Available via EcuM.h c(SRS_ModeMgm_09116) SWS_EcuM_03026 dIf development error detection is enabled and EcuM_Release- POST_RUN did not find a previous matching request for the provided user, then the function shall report ECUM_E_MISMATCHED_RUN_RELEASE to Det.c() Configuration of EcuM_ReleasePOST_RUN: Refer to EcuM_UserType for more infor- mation about user IDs and their generation. 8.3.4 Shutdown Management 8.3.4.1 EcuM_SelectShutdownTarget SWS_EcuM_02822 d Service Name EcuM_SelectShutdownTarget SyntaxStd_ReturnType EcuM_SelectShutdownTarget ( EcuM_ShutdownTargetType shutdownTarget, EcuM_ShutdownModeType shutdownMode ) Service ID hex 0x06 SyncAsync Synchronous Reentrancy Reentrant shutdownTarget The selected shutdown target. Parameters (in) shutdownMode The identfier of a sleep mode (if target is ECUM_SHUTDOWN_ TARGET_SLEEP) or a reset mechanism (if target is ECUM_ SHUTDOWN_TARGET_RESET) as defined by configuration. Parameters (inout) None Parameters (out) None Return value Std_ReturnType E_OK: The new shutdown target was set E_NOT_OK: The new shutdown target was not set Description EcuM_SelectShutdownTarget selects the shutdown target. EcuM_SelectShutdownTarget is part of the ECU Manager Module port interface. Available via EcuM.h c(SRS_ModeMgm_09114, SRS_ModeMgm_09128, SRS_ModeMgm_09235) 110 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 SWS_EcuM_00624 dThe EcuM_SelectShutdownTarget function shall set the shut- down target to the value of the shutdownTarget parameter. c(SRS_ModeMgm_09114, SRS_ModeMgm_09235) SWS_EcuM_02185 dThe parameter mode of the function EcuM_SelectShutdown Target shall be the identifier of a sleep or reset mode. The mode parameter shall only be used if the target parameter equals ECUM_SHUTDOWN_TARGET_SLEEP or ECUM_SHUTDOWN_TARGET_RESET. In all other cases, it shall be ignored. Only sleep or reset modes that are defined at configuration time and are stored in the Ecu MCommonConfiguration container (see ECUC_EcuM_00181) are allowed as parame- ters.c(SRS_ModeMgm_09114) SWS_EcuM_02585 dEcuM_SelectShutdownTarget shall not initiate any setup activi- ties but only store",
          "with the projects master plan that must occur for the treatment to be properly implemented Environmentinfrastructure: VDA Quality Management Center 103 WP ID WP Name WP Characteristics - describes any environmental or infrastructure requirements or impacts (e.g., safety or secur ity impacts that the treatment may have) Risk treatment plan change procedures and history 08-26 Documentation plan Identifies documents to be produced Defines the documentation activities during the life cycle of the software product or service Identifies any applicable standards and templates Defines requirements for documents Review and authorization practices Distribution of the documents Maintenance and disposal of the documents 08-27 Problem management plan Defines problem resolution activ ities including identification, recording, description and classification Problem resolution approach: evaluation and correction of the problem Defines problem tracking Mechanism to collect and distribute problem resolutions 08-28 Change management plan Defines change management activities including identification, recording, description, analysis and implementation Defines approach to track status of change requests Defines verification and validation activities Change approval and implication review 08-29 Improvement plan Improvement objectives derived from organizational business goals Organizational scope Process scope, the processes to be improved Key roles and responsibilities Appropriate milestones, review points and reporting mechanisms Activities to be performed to keep all those affected by the improvement program informed of progress 08-50 Test specification Test Design Specification Test Case Specification Test Procedure Specification Identification of test cases for regression testing Additi onally , for system integration: - identification of required system elements (hardware elements, wiring elements, settings for parameter s (such as application parameters or global variables ) , data bases, etc.) - necessary sequence or ordering identified for integrating the system elements 08-51 Technology monitoring plan No requirements additional to Plan (Generic) 08-52 Test plan Test Plan according to ISO29119 -3 Context : - projectTest sub -process - test item(s) - test scope - assumptions and constraints - stakeholder - testing communication Test strategy - identifies what needs there are to be satisfied VDA Quality Management Center 104 WP ID WP Name WP Characteristics - establishes the options and approach for satisfying the needs (black -box andor white -box-testing, boundary class test determination, regression testing strategy , etc.) - establishes the evaluation criteria against which the strategic options are evaluated - identifies any constraintsrisks and how these will be addressed - test design techniques - test completion criteria - test ending criteria - test start, abort and re -start criteria - metrics to be collected - test data requirements - retesting and regression testing - suspension and resumption criteria - deviations from the Organizational Test Strategy Test data requirements Test environment requirements Test sub -processes Test de liverables Testing activities and estimates 09-00 Policy Authorized Available to all personnel impacted by the policy Establishes practicesrules to be adhered to 09-03 Reuse policy Identification of reuse requirements Establishes the rules of reuse Documents the reuse adoption strategy including goals and objectives Identification of the reuse program Identification of the name of the reuse sponsor Identification of the reuse program participants Identification of the reuse steering function Identification of reuse program support functions 10-00 Process description A detailed description of the processprocedure which includes: - tailoring of the standard process (if applicable) - purpose of the process - outcomes of the process - task and activitie s to be performed and ordering of tasks - critical dependencies between task activities - expected time required to execute task - inputoutput work products - links between input and outputs work products Identifies process entry and exit criteria Identifies internal and external interfaces to the process Identifies process measures Identifies quality expectations Identifies functional roles and responsibilities Approved by authorized personnel 11-00 Product Is a resultdeliverable of the execution of a proce ss, includes services, systems (software and hardware) and processed materials Has elements that satisfy one or more aspects of a process purpose May be represented on various media (tangible and intangible) 11-03 Product release information Coverage for key elements (as appropriate to the application): Description of what is new or changed (including features removed) System information and requirements VDA Quality Management Center 105 WP ID WP Name WP Characteristics Identification of conversion programs and instructions Release numbering implementation may include: - the major release number - the feature release number - the defect repair number - the alpha or beta release; and the iteration within the alpha or beta release Identification of the component list (version identification included): - hardware software product elements, libraries, etc. - associated documentation list Newchanged parameter information ( e.g. for application parameters or global variables ) andor commands Backup and recovery information List of open known problems, faults, warning information, etc. Identification of verification and diagnostic procedures Technical support information Copyright and license information The release note may include an introduction, the environmental requirements, installation procedures, product invocation, new feature identification and a list of defect resolutions, known defects and workarounds 11-04 Product release package Includes the hardwaresoftwareproduct Includes and associated release elements such as: - system hardwaresoftwareproduct elements - associated customer documentation - application parameter definitions defined - command language defined - installation instructions - release letter 11-05 Software unit Follows established coding standards (as appropriate to the language and application): - commented - structured or optimized - meaningful naming conventions - parameter information identified - error codes defined - error messages descriptive and meaningful - formatting - indented, levels Follows data definition standards (as appropriate to the language and applica tion): - variables defined - data types defined - classes and inheritance structures defined - objects defined Entity relationships defined Database layouts are defined File structures and blocking are defined Data structures are defined Algorithms are defined Functional interfaces defined 11-06 System All elements of the product release are included Any required hardware Integrated product VDA Quality Management Center 106 WP ID WP Name WP Characteristics Customer documentation Fully configured set of the system elements: - application parameters defined - commands defined - data loaded or converted 11-07 Temporary solution Problem identification Release",
          "BSW_00348, SRS_BSW_00353, SRS_BSW_00361, SRS_BSW_00439, SRS_- BSW_00449, SRS_BSW_00308, SRS_BSW_00309, SRS_BSW_00330, SRS_- BSW_00010, SRS_BSW_00341, SRS_BSW_00334) 210 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager",
          "Slave Core GoSleep Sequencec () SWS_EcuM_04028 d 88 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 Integration Code module Wakeup Sourcemodule EcuMmodule McuPeripheral Wakeup Sourcemodule Osmodule :BswM HALT alt Validation Needed Yes NoMcu_SetMode()EcuM_SetWakeupEvent(EcuM_WakeupSourceType)Interrupt()Signal MasterCore that Slave is ready to sleep() Return from interrupt()EcuM_CheckWakeup(EcuM_WakeupSourceType) BswM_EcuM_CurrentState(ECUM_WKSTATUS_PENDING) Wait for MasterCore to continue()DisableAllInterrupts() BswM_EcuM_CurrentWakeup(Sources, ECUM_WKSTATUS_VALI DATED)Module_CheckWakeup() EnableAllInterrupts()Mcu_SetMode(Mcu_ModeType) Figure 7.32: Slave Core Halt Sequencec () SWS_EcuM_04029 d 89 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 module EcuMmodule Wakeup Sourcemodule McuIntegration Code module Osmodule BswM loop WHILE no pendingvalidated events loop FOR all wakeup sources that need polling opt Wakeup detected alt Yes No ! Mcu_SetMode(Mcu_ModeType) Wait for signal from MasterCore to continue()EcuM_SetWakeupEvent(EcuM_WakeupSourceType)Module_CheckWakeup() BswM_EcuM_CurrentWakeup(sources, ECUM_WKSTATUS_PEND ING)EcuM_GetPendingWakeupEvents(EcuM_WakeupSourceType)EnableAllInterrupts() EcuM_CheckWakeup(EcuM_WakeupSourceType)DisableAllInterrupts() BswM_EcuM_CurrentWakeup(sources, ECUM_WKSTATUS_VALI DATED)EcuM_SleepActivity() Figure 7.33: Slave Core Poll Sequencec () SWS_EcuM_04030 d 90 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 module Mcumodule Osmodule EcuMIntegration Code Mcu_SetMode(Mcu_ModeType)DisableAllInterrupts() ReleaseResource(RES_AUTOSAR_ECUM_core)EcuM_DisableWakeupSources(EcuM_WakeupSourceType)EnableAllInterrupts() Figure 7.34: Slave Core WakeupRestart Sequencec () 7.9.8 Runnables and Entry points 7.9.8.1 Internal behavior SWS_EcuM_03018 dThe definition of the internal behavior of the the ECU Manager module shall be as follows. This detailed description is only needed for the configura- tion of the local RTE. InternalBehavior EcuStateManager Runnable entities of the EcuStateManager RunnableEntity SelectShutdownTarget symbol EcuM_SelectShutdownTarget canbeInvokedConcurrently TRUE RunnableEntity GetShutdownTarget 91 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 symbol EcuM_GetShutdownTarget canbeInvokedConcurrently TRUE RunnableEntity GetLastShutdownTarget symbol EcuM_GetLastShutdownTarget canbeInvokedConcurrently TRUE RunnableEntity SelectShutdownCause symbol EcuM_SelectShutdownCause canbeInvokedConcurrently TRUE RunnableEntity GetShutdownCause symbol EcuM_GetShutdownCause canbeInvokedConcurrently TRUE RunnableEntity SelectBootTarget symbol EcuM_SelectBootTarget canbeInvokedConcurrently TRUE RunnableEntity GetBootTarget symbol EcuM_GetBootTarget canbeInvokedConcurrently TRUE RunnableEntity SetRelWakeupAlarm symbol EcuM_SetRelWakeupAlarm canbeInvokedConcurrently TRUE RunnableEntity SetAbsWakeupAlarm symbol EcuM_SetAbsWakeupAlarm canbeInvokedConcurrently TRUE RunnableEntity AbortWakeupAlarm symbol EcuM_AbortWakeupAlarm canbeInvokedConcurrently TRUE RunnableEntity GetCurrentTime symbol EcuM_GetCurrentTime canbeInvokedConcurrently TRUE RunnableEntity GetWakeupTime symbol EcuM_GetWakeupTime canbeInvokedConcurrently TRUE RunnableEntity SetClock symbol EcuM_SetClock canbeInvokedConcurrently TRUE RunnableEntity RequestRUN symbol EcuM_RequestRUN canbeInvokedConcurrently TRUE RunnableEntity ReleaseRUN symbol EcuM_ReleaseRUN canbeInvokedConcurrently TRUE RunnableEntity RequestPOSTRUN symbol EcuM_RequestPOST_RUN canbeInvokedConcurrently TRUE RunnableEntity ReleasePOSTRUN symbol EcuM_ReleasePOST_RUN canbeInvokedConcurrently TRUE Port present for each user. There are NU users SR000.RequestRUN - RequestRUN SR000.ReleaseRUN - ReleaseRUN SR000.RequestPOSTRUN - RequestPOSTRUN SR000.ReleasePOSTRUN - RequestPOSTRUN PortArgument portSR000, value.typeEcuM_UserType, value.valueEcuMUser0.User 92 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 (...) SRnnn.RequestRUN - RequestRUN SRnnn.ReleaseRUN - ReleaseRUN SRnnn.RequestPOSTRUN - RequestPOSTRUN SRnnn.ReleasePOSTRUN - RequestPOSTRUN PortArgument portSRnnn, value.typeEcuM_UserType, value.valueEcuMUsernnn.User shutDownTarget.SelectShutdownTarget - SelectShutdownTarget shutDownTarget.GetShutdownTarget - GetShutdownTarget shutDownTarget.GetLastShutdownTarget - GetLastShutdownTarget shutDownTarget.SelectShutdownCause - SelectShutdownCause shutDownTarget.GetShutdownCause - GetShutdownCause bootTarget.SelectBootTarget - SelectBootTarget bootTarget.GetBootTarget - GetBootTarget alarmClock.SetRelWakeupAlarm- SetRelWakeupAlarm alarmClock.SetAbsWakeupAlarm - SetAbsWakeupAlarm alarmClock.AbortWakeupAlarm - AbortWakeupAlarm alarmClock.GetCurrentTime - GetCurrentTime alarmClock.GetWakeupTime - GetWakeupTime alarmClock.SetClock - SetClock ; c() 7.10 EcuM Mode Handling The ECU State Manager provides interfaces for SW-Cs to request and release the modes RUN and POST_RUN optionally. EcuMFlex arbitrates the requests and releases made by SW-Cs and propagates the result to BswM. The cooperation between EcuM and BswM is necessary as only the BswM can decide when a transition to a different mode can be made. Due to the fact that the EcuM does not have an own state machine, the EcuM relies on the state transitions made by BswM. Therefore the EcuM does not request a state. Furthermore it notifies the BswM about the current arbitration of all requests. And the BswM is notified when the RTE has executed all Runnables belonging to a certain mode. ArchitecturalComponentsofECUModeHandling 93 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 Figure 7.35: Architectural Components of ECU Mode Handling Figure 7.35 illustrates the architectural components of ECU Mode Handling. SWS_EcuM_04115 dECU Mode Handling shall be applied when EcuMModeHan- dling is configured to true. c(SRS_ModeMgm_09116) SWS_EcuM_04116 dWhen the BswM sets a state of the EcuM by EcuM_SetState , the EcuM shall indicate the corresponding mode to the RTE. c(SRS_ModeMgm_09116) SWS_EcuM_04117 dWhen the last RUN request has been released, ECU State Manager module shall indicate this to BswM using the API BswM_EcuM_- RequestedState(ECUM_STATE_APP_RUN, ECUM_RUNSTATUS_RELEASED) .c (SRS_ModeMgm_09116) If a SW-C needs post run activity during POST_RUN (e.g. shutdown preparation), then it must request POST_RUN before releasing the RUN request. Otherwise it is not guaranteed that this SW-C will get a chance to run its POST_RUN code. SWS_EcuM_04118 dWhen the ECU State Manager is not in the state which is re- quested by a SWC, it shall inform BswM about requested states using the BswM_- EcuM_RequestedState API.c(SRS_ModeMgm_09116) POST_RUN state provides a post run phase for SW-Cs and allows them to save im- portant data or switch off peripherals. SWS_EcuM_04144 dWhen the first RUN or POST_RUN request has been received, ECU State Manager module shall indicate this to BswM using BswM_EcuM_Request- edState(ECUM_STATE_APP_RUN, ECUM_RUNSTATUS_REQUESTED) .c() SWS_EcuM_04119 dWhen the last POST_RUN request has been released, ECU State Manager module shall indicate this to BswM using the API BswM_EcuM_Re- questedState(ECUM_STATE_APP_POST_RUN, ECUM_RUNSTATUS_RELEASED) .c (SRS_ModeMgm_09116) 94 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 Hint: To prevent, that the mode machine instance of ECU Mode lags behind and the states EcuM and the RTE get out of phase, the EcuM can use acknowledgement feed- back for the mode switch notification. Note that EcuM only requests Modes from and to RUN and POST_RUN, the SLEEP Mode has to be set by BswM, as the EcuM has no information about when this Mode can be entered. State Description STARTUPInitial value. Set by Rte when Rte_Start() has been called. RUNAs soon as all necesseray BSW modules are inistialized, BswM switches to this Mode. POST_RUNEcuM requests POST_RUN, when no RUN requests are available. SLEEPEcuM requests SLEEP Mode when no RUN and POST_RUN requests are available and Shut- down Target is set to SLEEP . SHUTDOWNEcuM requests SHUTDOWN Mode when no RUN and POST_ RUN requests are available and Shutdown Target is set to SHUT - DOWN. Table 7.8: EcuM Modes SWS_EcuM_04143 dEcuM shall notify BswM about the current State by calling the in- terface BswM_EcuM_CurrentState(EcuM_StateType State) . A new state shall be set by EcuM when RTE has given its feedback via the acknowledgement port. c() 7.11 Advanced Topics 7.11.1 Relation to Bootloader The Bootloader is",
          "Specification of ECU State Manager AUTOSAR CP R20-11 Document TitleSpecification of ECU State Manager Document Owner AUTOSAR Document Responsibility AUTOSAR Document Identification No 78 Document Status published Part of AUTOSAR Standard Classic Platform Part of Standard Release R20-11 Document Change History Date Release Changed by Description 2020-11-30 R20-11AUTOSAR Release ManagementCorrected broken chapter structure EcuM_UserType handling improved Minor content changes, clarifications (multi-core, configuration, values) 2019-11-28 R19-11AUTOSAR Release ManagementNo content changes Changed Document Status from Final to published 2018-10-31 4.4.0AUTOSAR Release ManagementReworked BswM interface through EcuM_GoDownHaltPoll Removed EcuM fixed version references 2017-12-08 4.3.1AUTOSAR Release ManagementAdapt API Can_CheckWakeup Removed ConfigPtr parameter Removed Default error Removed unused DIO driver EcuM AUTOSAR service configure on service partition only 2016-11-30 4.3.0AUTOSAR Release ManagementPartial Network Cluster Support Initialization BSW scheduler slipt Added a driver initialization list Removed EcuM_StateType 1 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 2015-07-31 4.2.2AUTOSAR Release ManagementReworked slave core poll sequence Reviewed multicore shutdown synchronization Reclassified error types Editorial changes 2014-10-31 4.2.1AUTOSAR Release ManagementAdded switch configuration Defined initialization order for InitListZeroInitListOne Definition of the name pattern of c-init-data struct corrected Type conflicts solved Editorial changes 2014-03-31 4.1.3AUTOSAR Release ManagementEcuM errors reworked Inconsistencies between APIs and Interfaces resolved Type conflicts solved Editorial changes 2013-10-31 4.1.2AUTOSAR Release ManagementAdded API table for service interfaces Fixed traceability topics General clean-up of requirements (reviewed different interfaces, operations, descriptions and figures). Editorial changes 2 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 2013-03-15 4.1.1AUTOSAR AdministrationSpecified reset mode to use in case of pending wakeup events during shutdown Added callout for Reset Loop Detection Extended specification of parameter time of function EcuM_GetMostRecentShutdown Improved configuration description Added new APIs to enable asynchronous Trcv handling for CANFR Wakeup Adaption of EcuM Flex to support BSW modules distributed over multiple partitions Reclassified which Production Errors are Extended Production Errors Added possible error to operations of ClientServer-Interfaces, where no errors where defined Enhancement of configuration to initialize BSW modules by the EcuM Flex 2011-12-22 4.0.3AUTOSAR AdministrationFixed interoperability problems between EcuM and BswM Terminology of ECU State Manager Flexible more consistently described Modification of sleep sequences to minimize misses of wakeup interrupts 2010-09-30 3.1.5AUTOSAR AdministrationUpdated pseudo code for AUTOSAR Services Update startup procedure for multi core systems 2010-02-02 3.1.4AUTOSAR AdministrationRemoved state machine to accommodate mode-dependent scheduling Added Multi-Core support Added Alarm Clock feature Revised disclaimer 2008-08-13 3.1.1AUTOSAR AdministrationLegal disclaimer revised 3 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 2007-12-21 3.0.1AUTOSAR AdministrationFixed Wakeup mechanisms Included optional triggering of Watchdog Manager during Startup, Shutdown, and Sleep Extended startup sequence to have more flexibility and to directly initialize all other BSW modules Generated APIs from BSW UML model Generated configuration from Meta Model Document meta information extended Small layout adaptations made 2007-01-24 2.1.15AUTOSAR AdministrationCorrected startup flow and wakeup concept. Added specification for AUTOSAR ports. Modified configuration for compliance with variant management. Added new API services. Legal disclaimer revised Release Notes added Advice for users revised Revision Information added 2006-05-16 2.0AUTOSAR Administration Initial Release 4 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 Disclaimer This work (specification andor software implementation) and the material contained in it, as released by AUTOSAR, is for the purpose of information only. AUTOSAR and the companies that have contributed to it shall not be liable for any use of the work. The material contained in this work is protected by copyright and other types of intel- lectual property rights. The commercial exploitation of the material contained in this work requires a license to such intellectual property rights. This work may be utilized or reproduced without any modification, in any form or by any means, for informational purposes only. For any other purpose, no part of the work may be utilized or reproduced, in any form or by any means, without permission in writing from the publisher. The work has been developed for automotive applications only. It has neither been developed, nor tested for non-automotive applications. The word AUTOSAR and the AUTOSAR logo are registered trademarks. 5 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 Table of Contents 1 Introduction and Functional Overview 13 1.1 Backwards Compatibility to Previous ECU Manager Module Versions . 14 2 Definitions and Abbreviations 15 2.1 Definitions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 15 2.2 Abbreviations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 15 3 Related documentation 17 3.1 Input documents related standards and norms . . . . . . . . . . . . 17 3.2 Related specification . . . . . . . . . . . . . . . . . . . . . . . . . . . . 17 4 Constraints and Assumptions 18 4.1 Limitations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 18 4.2 Hardware Requirements . . . . . . . . . . . . . . . . . . . . . . . . . . 18 4.3 Applicability to car domains . . . . . . . . . . . . . . . . . . . . . . . . 18 5 Dependencies to other modules 19 5.1 SPAL Modules . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 19 5.1.1 MCU Driver . . . . . . . . . .",
          "Operation successful Possible Errors 1 E_NOT_OK Operation failed Operation ReleasePOSTRUN Comment Variation Possible Errors E_OK E_NOT_OK Operation ReleaseRUN Comment Variation Possible Errors E_OK E_NOT_OK Operation RequestPOSTRUN Comment Variation Possible Errors E_OK E_NOT_OK 149 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 Operation RequestRUN Comment Variation Possible Errors E_OK E_NOT_OK c() 8.8.6 Port Interface for EcuM_CurrentMode Interface 8.8.6.1 General Approach SWS_EcuM_04132 dThe mode port of the ECU State Manager module shall declare the following modes: STARTUP RUN POST_RUN SLEEP SHUTDOWN c(SRS_ModeMgm_09116) This definition is a simplified view of ECU Modes that applications do need to know. It does not restrict or limit in any way how application modes could be defined. Applica- tions modes are completely handled by the application itself. SWS_EcuM_04133 dMode changes shall be notified to SW-Cs through the RTE mode ports when the mode change occurs. This specification assumes that the port name is currentMode and that the direct API of RTE will be used. Under these conditions mode changes signaled by invoking Rte_StatusType Rte_Switch_currentMode_currentMode( Rte_ModeType_EcuM_Mode mode) where mode is the new mode to be notified. The value range is specified by the previ- ous requirement. The return value shall be ignored. A SW-C which wants to be notified of mode changes should require the mode switch interface EcuM_CurrentMode. c() 150 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 8.8.6.2 Data Types The mode declaration group EcuM_Mode represents the modes of the ECU State Manager module that will be notified to the SW-Cs. ModeDeclarationGroup EcuM_Mode STARTUP , RUN, POST_RUN, SLEEP , SHUTDOWN initialMode STARTUP ; SWS_EcuM_04107 d Name EcuM_Mode Kind ModeDeclarationGroup Category ALPHABETIC_ORDER Initial mode STARTUP On transition value POST_RUN RUN SHUTDOWN SLEEP Modes STARTUP Description c() 8.8.6.3 Service Interfaces SWS_EcuM_04108 d Name EcuM_CurrentMode Comment Interface to read the current ECU mode IsService true Variation ModeGroup currentMode EcuM_Mode c() 8.8.7 Definition of the ECU Manager Service This section provides guidance on the definition of the ECU Manager module Service. Note that these definitions can only be completed during ECU configuration (since certain ECU Manager module configuration parameters determine the number of ports 151 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 provided by the ECU Manager module service). Also note a SW-Cs implementation does not depend on these definitions. In an AUTOSAR system, there are ports both above and below the RTE. The ECU Manager module service description defines ports provided to the RTE and the de- scriptions of every SW-C that uses this service must contain service ports which required these ECU Manager module ports from the RTE. The EcuM provides the following ports: SWS_EcuM_04111 d Name ShutdownTarget_UserName Kind ProvidedPort Interface EcuM_ShutdownTarget Description Provides an interface to SW-Cs to select a new shutdown target and query the current shutdown target. Variation UserName ecuc(EcuMEcuMConfigurationEcuMFlexConfigurationEcuMFlexUserConfigEcu MFlexUser.SHORT -NAME) c() SWS_EcuM_04110 d Name BootTarget_UserName Kind ProvidedPort Interface EcuM_BootTarget Description Provides an interface to SW-Cs to select a new boot target and query the current boot target. Variation UserName ecuc(EcuMEcuMConfigurationEcuMFlexConfigurationEcuMFlexUserConfigEcu MFlexUser.SHORT -NAME) c() SWS_EcuM_03017 d Name AlarmClock_UserName Kind ProvidedPort Interface EcuM_AlarmClock Description Provides to SW-Cs an alarm clock. The EcuM_AlarmClock port uses port-defined argument values to identify the user that manages its alarm clock. Type EcuM_UserType Port Defined Argument Value(s)Value ecuc(EcuMEcuMConfigurationEcuMFlexConfigurationEcuMFlexUser ConfigEcuMFlexUser.value) Variation ecuc(EcuMEcuMFlexGeneralEcuMAlarmClockPresent) true UserName ecuc(EcuMEcuMConfigurationEcuMFlexConfigurationEcuMAlarm Clock.SHORT -NAME) c() SWS_EcuM_04113 d 152 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 Name time Kind ProvidedPort Interface EcuM_Time Description Provides the EcuMs time service to SWCs Variation c() SWS_EcuM_04135 d Name StateRequest_UserName Kind ProvidedPort Interface EcuM_StateRequest Description Provides an interface to SW-Cs to request state changes of the ECU state. The port uses port-defined argument values to identify the user. Type EcuM_UserType Port Defined Argument Value(s)Value ecuc(EcuMEcuMConfigurationEcuMFlexConfigurationEcuMFlexUser ConfigEcuMFlexUser.value) Variation UserName ecuc(EcuMEcuMConfigurationEcuMFlexConfigurationEcuMFlexUserConfigEcu MFlexUser.SHORT -NAME) c() SWS_EcuM_04112 d Name currentMode Kind ProvidedPort Interface EcuM_CurrentMode Description Variation c() The EcuM provides the following types: SWS_EcuM_91004 d Name EcuM_UserType Kind Type Derived from uint8 Description Unique value for each user. Variation Available via Rte_EcuM_Type.h c() SWS_EcuM_04102 d 153 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 Name EcuM_TimeType Kind Type Derived from uint32 Description This data type represents the time of the ECU Manager module. Variation Available via Rte_EcuM_Type.h c() d Name EcuM_BootTargetType Kind Type Derived from uint8 ECUM_BOOT_TARGET_APP 0 The ECU will boot into the application ECUM_BOOT_TARGET_OEM_ BOOTLOADER1 The ECU will boot into the OEM bootloaderRange ECUM_BOOT_TARGET_SYS_ BOOTLOADER2 The ECU will boot into the system supplier bootloader Description This type represents the boot targets the ECU Manager module can be configured with. The default boot target is ECUM_BOOT_TARGET_OEM_BOOTLOADER. Variation Available via Rte_EcuM_Type.h c() SWS_EcuM_04045 d Name EcuM_ShutdownCauseType Kind Type Derived from uint8 ECUM_CAUSE_UNKNOWN 0 No cause was set. ECUM_CAUSE_ECU_STATE 1 ECU state machine entered a state for shutdown ECUM_CAUSE_WDGM 2 Watchdog Manager detected a failureRange ECUM_CAUSE_DCM 3 Diagnostic Communication Manager requests a shutdown due to a service request Description This type describes the cause for a shutdown by the ECU State Manager. It can be extended by configuration. Variation Available via Rte_EcuM_Type.h c() SWS_EcuM_04101 d 154 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 Name EcuM_ShutdownModeType Kind Type Derived from uint16 ecuc(EcuMEcuMConfiguration EcuMFlexConfigurationEcu MResetMode.SHORT -NAME)256 ecuc(EcuMEcu MConfigurationEcu MFlexConfiguration EcuMResetMode.Ecu MResetModeId)Configured Reset Modes Range ecuc(EcuMEcuMConfiguration EcuMCommonConfigurationEcu MSleepMode.SHORT -NAME)ecuc(EcuM Ecu MConfigurationEcu MCommon ConfigurationEcu MSleepMode.Ecu MSleepModeId)Configured Sleep Modes Description This data type represents the modes of the ECU Manager module. Variation Available via Rte_EcuM_Type.h c() SWS_EcuM_04136 d Name EcuM_ShutdownTargetType Kind Type Derived from uint8 ECUM_SHUTDOWN_TARGET_ SLEEP0x0 ECUM_SHUTDOWN_TARGET_ RESET0x1 Range ECUM_SHUTDOWN_TARGET_ OFF0x2 Description Variation Available via Rte_EcuM_Type.h c() SWS_EcuM_04094 dIn the case of a MultiCore ECU, the EcuM AUTOSAR service (Standardized AUTOSAR Interfaces) may be offered on one or more cores. c() Although the EcuM service interfaces are available on every core (see section 7.9 Multi Core for details), the EcuC allows the provided ports to be bound to the interface on a particular partition, and therefore to a particular core (see the Specification",
          "execution control and will carry out GO OFF II activities. Available via EcuM.h c(SRS_ModeMgm_09114) 106 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 8.3.3 State Management 8.3.3.1 EcuM_ SetState SWS_EcuM_04122 d Service Name EcuM_SetState Syntaxvoid EcuM_SetState ( EcuM_StateType state ) Service ID hex 0x2b SyncAsync Synchronous Reentrancy Reentrant Parameters (in) state State indicated by BswM. Parameters (inout) None Parameters (out) None Return value None Description Function called by BswM to notify about State Switch. Available via EcuM.h c() SWS_EcuM_04123 dThe EcuM_SetState function shall set the EcuM State to the value of the State parameter. If the State parameter is not a valid value, the EcuM_SetState function shall not change the State and if Development Error Reporting is turned on, the EcuM_SetState function shall additionally send an ECUM_E_STATE_PAR_OUT_OF_RANGE error message to the DET module.c(SRS_ModeMgm_09116) 8.3.3.2 EcuM_RequestRUN SWS_EcuM_04124 d Service Name EcuM_RequestRUN SyntaxStd_ReturnType EcuM_RequestRUN ( EcuM_UserType user ) Service ID hex 0x03 SyncAsync Synchronous Reentrancy Reentrant Parameters (in) user ID of the entity requesting the RUN state. Parameters (inout) None Parameters (out) None 5 107 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 4 Return value Std_ReturnType E_OK: The request was accepted by EcuM. E_NOT_OK: The request was not accepted by EcuM Description Places a request for the RUN state. Requests can be placed by every user made known to the state manager at configuration time. Available via EcuM.h c() SWS_EcuM_04125 dRequests of EcuM_RequestRUN cannot be nested, i.e. one user can only place one request but not more. Additional or duplicate user requests by the same user shall be reported to DET. Of course the DET will only be notified under development conditions. c(SRS_ModeMgm_09116) SWS_EcuM_04126 dAn implementation must track requests for each user known on the ECU. Run requests are specific to the user. c(SRS_ModeMgm_09116) SWS_EcuM_03024 dIf development error detection is enabled and there are multiple requests by the same user detected by EcuM_RequestRUN the function shall report ECUM_E_MULTIPLE_RUN_REQUESTS to Det.c() 8.3.3.3 EcuM_ReleaseRUN SWS_EcuM_04127 d Service Name EcuM_ReleaseRUN SyntaxStd_ReturnType EcuM_ReleaseRUN ( EcuM_UserType user ) Service ID hex 0x04 SyncAsync Synchronous Reentrancy Reentrant Parameters (in) user ID of the entity releasing the RUN state. Parameters (inout) None Parameters (out) None Return value Std_ReturnType E_OK: The release request was accepted by EcuM E_NOT_OK: The release request was not accepted by EcuM Description Releases a RUN request previously done with a call to EcuM_RequestRUN. The service is intended for implementing AUTOSAR ports. Available via EcuM.h c(SRS_ModeMgm_09116) SWS_EcuM_03023 dIf development error detection is enabled and EcuM_Re- leaseRUN did not find a previous matching request for the provided user, then the function shall report ECUM_E_MISMATCHED_RUN_RELEASE to Det.c() Configuration of EcuM_ReleaseRUN: Refer to EcuM_UserType for more information about user IDs and their generation. 108 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 8.3.3.4 EcuM_RequestPOST_RUN SWS_EcuM_04128 d Service Name EcuM_RequestPOST_RUN SyntaxStd_ReturnType EcuM_RequestPOST_RUN ( EcuM_UserType user ) Service ID hex 0x0a SyncAsync Synchronous Reentrancy Reentrant Parameters (in) user ID of the entity requesting the POST RUN state. Parameters (inout) None Parameters (out) None Return value Std_ReturnType E_OK: The request was accepted by EcuM E_NOT_OK: The request was not accepted by EcuM Description Places a request for the POST RUN state. Requests can be placed by every user made known to the state manager at configuration time. Requests for RUN and POST RUN must be tracked independently (in other words: two independent variables). The service is intended for implementing AUTOSAR ports. Available via EcuM.h c(SRS_ModeMgm_09116) SWS_EcuM_03025 dIf development error detection is enabled and there are multiple requests by the same user detected by EcuM_RequestPOST_RUN the function shall report ECUM_E_MULTIPLE_RUN_REQUESTS to Det.c() All requirements of 8.3.3.2 EcuM_RequestRUN apply accordingly to the function Ecu M_RequestPOST_RUN. Configuration of EcuM_RequestPOST_RUN: Refer to EcuM_UserType for more infor- mation about user IDs and their generation. 8.3.3.5 EcuM_ReleasePOST_RUN SWS_EcuM_04129 d Service Name EcuM_ReleasePOST_RUN SyntaxStd_ReturnType EcuM_ReleasePOST_RUN ( EcuM_UserType user ) Service ID hex 0x0b SyncAsync Synchronous Reentrancy Reentrant 5 109 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 4 Parameters (in) user ID of the entity releasing the POST RUN state. Parameters (inout) None Parameters (out) None Return value Std_ReturnType E_OK: The release request was accepted by EcuM E_NOT_OK: The release request was not accepted by EcuM Description Releases a POST RUN request previously done with a call to EcuM_RequestPOST_RUN. The service is intended for implementing AUTOSAR ports. Available via EcuM.h c(SRS_ModeMgm_09116) SWS_EcuM_03026 dIf development error detection is enabled and EcuM_Release- POST_RUN did not find a previous matching request for the provided user, then the function shall report ECUM_E_MISMATCHED_RUN_RELEASE to Det.c() Configuration of EcuM_ReleasePOST_RUN: Refer to EcuM_UserType for more infor- mation about user IDs and their generation. 8.3.4 Shutdown Management 8.3.4.1 EcuM_SelectShutdownTarget SWS_EcuM_02822 d Service Name EcuM_SelectShutdownTarget SyntaxStd_ReturnType EcuM_SelectShutdownTarget ( EcuM_ShutdownTargetType shutdownTarget, EcuM_ShutdownModeType shutdownMode ) Service ID hex 0x06 SyncAsync Synchronous Reentrancy Reentrant shutdownTarget The selected shutdown target. Parameters (in) shutdownMode The identfier of a sleep mode (if target is ECUM_SHUTDOWN_ TARGET_SLEEP) or a reset mechanism (if target is ECUM_ SHUTDOWN_TARGET_RESET) as defined by configuration. Parameters (inout) None Parameters (out) None Return value Std_ReturnType E_OK: The new shutdown target was set E_NOT_OK: The new shutdown target was not set Description EcuM_SelectShutdownTarget selects the shutdown target. EcuM_SelectShutdownTarget is part of the ECU Manager Module port interface. Available via EcuM.h c(SRS_ModeMgm_09114, SRS_ModeMgm_09128, SRS_ModeMgm_09235) 110 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 SWS_EcuM_00624 dThe EcuM_SelectShutdownTarget function shall set the shut- down target to the value of the shutdownTarget parameter. c(SRS_ModeMgm_09114, SRS_ModeMgm_09235) SWS_EcuM_02185 dThe parameter mode of the function EcuM_SelectShutdown Target shall be the identifier of a sleep or reset mode. The mode parameter shall only be used if the target parameter equals ECUM_SHUTDOWN_TARGET_SLEEP or ECUM_SHUTDOWN_TARGET_RESET. In all other cases, it shall be ignored. Only sleep or reset modes that are defined at configuration time and are stored in the Ecu MCommonConfiguration container (see ECUC_EcuM_00181) are allowed as parame- ters.c(SRS_ModeMgm_09114) SWS_EcuM_02585 dEcuM_SelectShutdownTarget shall not initiate any setup activi- ties but only store",
          "BSW_00348, SRS_BSW_00353, SRS_BSW_00361, SRS_BSW_00439, SRS_- BSW_00449, SRS_BSW_00308, SRS_BSW_00309, SRS_BSW_00330, SRS_- BSW_00010, SRS_BSW_00341, SRS_BSW_00334) 210 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager",
          "Specification of ECU State Manager AUTOSAR CP R20-11 Document TitleSpecification of ECU State Manager Document Owner AUTOSAR Document Responsibility AUTOSAR Document Identification No 78 Document Status published Part of AUTOSAR Standard Classic Platform Part of Standard Release R20-11 Document Change History Date Release Changed by Description 2020-11-30 R20-11AUTOSAR Release ManagementCorrected broken chapter structure EcuM_UserType handling improved Minor content changes, clarifications (multi-core, configuration, values) 2019-11-28 R19-11AUTOSAR Release ManagementNo content changes Changed Document Status from Final to published 2018-10-31 4.4.0AUTOSAR Release ManagementReworked BswM interface through EcuM_GoDownHaltPoll Removed EcuM fixed version references 2017-12-08 4.3.1AUTOSAR Release ManagementAdapt API Can_CheckWakeup Removed ConfigPtr parameter Removed Default error Removed unused DIO driver EcuM AUTOSAR service configure on service partition only 2016-11-30 4.3.0AUTOSAR Release ManagementPartial Network Cluster Support Initialization BSW scheduler slipt Added a driver initialization list Removed EcuM_StateType 1 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 2015-07-31 4.2.2AUTOSAR Release ManagementReworked slave core poll sequence Reviewed multicore shutdown synchronization Reclassified error types Editorial changes 2014-10-31 4.2.1AUTOSAR Release ManagementAdded switch configuration Defined initialization order for InitListZeroInitListOne Definition of the name pattern of c-init-data struct corrected Type conflicts solved Editorial changes 2014-03-31 4.1.3AUTOSAR Release ManagementEcuM errors reworked Inconsistencies between APIs and Interfaces resolved Type conflicts solved Editorial changes 2013-10-31 4.1.2AUTOSAR Release ManagementAdded API table for service interfaces Fixed traceability topics General clean-up of requirements (reviewed different interfaces, operations, descriptions and figures). Editorial changes 2 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 2013-03-15 4.1.1AUTOSAR AdministrationSpecified reset mode to use in case of pending wakeup events during shutdown Added callout for Reset Loop Detection Extended specification of parameter time of function EcuM_GetMostRecentShutdown Improved configuration description Added new APIs to enable asynchronous Trcv handling for CANFR Wakeup Adaption of EcuM Flex to support BSW modules distributed over multiple partitions Reclassified which Production Errors are Extended Production Errors Added possible error to operations of ClientServer-Interfaces, where no errors where defined Enhancement of configuration to initialize BSW modules by the EcuM Flex 2011-12-22 4.0.3AUTOSAR AdministrationFixed interoperability problems between EcuM and BswM Terminology of ECU State Manager Flexible more consistently described Modification of sleep sequences to minimize misses of wakeup interrupts 2010-09-30 3.1.5AUTOSAR AdministrationUpdated pseudo code for AUTOSAR Services Update startup procedure for multi core systems 2010-02-02 3.1.4AUTOSAR AdministrationRemoved state machine to accommodate mode-dependent scheduling Added Multi-Core support Added Alarm Clock feature Revised disclaimer 2008-08-13 3.1.1AUTOSAR AdministrationLegal disclaimer revised 3 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 2007-12-21 3.0.1AUTOSAR AdministrationFixed Wakeup mechanisms Included optional triggering of Watchdog Manager during Startup, Shutdown, and Sleep Extended startup sequence to have more flexibility and to directly initialize all other BSW modules Generated APIs from BSW UML model Generated configuration from Meta Model Document meta information extended Small layout adaptations made 2007-01-24 2.1.15AUTOSAR AdministrationCorrected startup flow and wakeup concept. Added specification for AUTOSAR ports. Modified configuration for compliance with variant management. Added new API services. Legal disclaimer revised Release Notes added Advice for users revised Revision Information added 2006-05-16 2.0AUTOSAR Administration Initial Release 4 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 Disclaimer This work (specification andor software implementation) and the material contained in it, as released by AUTOSAR, is for the purpose of information only. AUTOSAR and the companies that have contributed to it shall not be liable for any use of the work. The material contained in this work is protected by copyright and other types of intel- lectual property rights. The commercial exploitation of the material contained in this work requires a license to such intellectual property rights. This work may be utilized or reproduced without any modification, in any form or by any means, for informational purposes only. For any other purpose, no part of the work may be utilized or reproduced, in any form or by any means, without permission in writing from the publisher. The work has been developed for automotive applications only. It has neither been developed, nor tested for non-automotive applications. The word AUTOSAR and the AUTOSAR logo are registered trademarks. 5 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 Table of Contents 1 Introduction and Functional Overview 13 1.1 Backwards Compatibility to Previous ECU Manager Module Versions . 14 2 Definitions and Abbreviations 15 2.1 Definitions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 15 2.2 Abbreviations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 15 3 Related documentation 17 3.1 Input documents related standards and norms . . . . . . . . . . . . 17 3.2 Related specification . . . . . . . . . . . . . . . . . . . . . . . . . . . . 17 4 Constraints and Assumptions 18 4.1 Limitations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 18 4.2 Hardware Requirements . . . . . . . . . . . . . . . . . . . . . . . . . . 18 4.3 Applicability to car domains . . . . . . . . . . . . . . . . . . . . . . . . 18 5 Dependencies to other modules 19 5.1 SPAL Modules . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 19 5.1.1 MCU Driver . . . . . . . . . .",
          "are finished processing, the cores must be synchronized before entering SHUTDOWN. The BswM (which is distributed over all partitions) ascertains that the ECU should be shut down and synchronizes with each BwsM in the ECU. All BswMs induce de- initialization of all the partitions BSWs, SWCs and CDDs and send appropriate signals to the other BswMs to indicate their readiness to shut down. 78 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 For a shutdown of the ECU, the BswM (which lies in the same partition of the master EcuM) ultimately calls GoOff on the master core which distributes that request to all slave cores. The master EcuM de-initializes the BswM, and the SchM. The EcuMs on the slave cores de-initialize their SchM and BswM and then send a signal to indicate that the core is ready for ShutdownOS (again, see section section 7.9.3 Master Core - Slave Core Signalling for details). The master EcuM waits for the signal from each slave core EcuM and then initiates shutdown as usual on the master core (the master EcuM calls ShutdownAllCores , and the ECU is put to bed with the global shutdown hook) 79 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 7.9.6.1 Master Core SHUTDOWN module EcuMmodule SchMmodule BswMmodule McOsIntegration Code opt Pending wakeup events?loop over every BswM running in this core loop FOR all configured cores EcuM_OnGoOffOne() ShutdownAllCores(StatusType)EcuM_GetPendingWakeupEvents(EcuM_WakeupSourceType)BswM_Deinit() WaitEvent(Mask)SchM_Deinit()GetCoreID(CoreIdType) EcuM_SelectShutdownTarget(Std_ReturnType, EcuM_ShutdownTargetType, EcuM_ShutdownModeType) Figure 7.23: Master Core OffPreOS Sequence 80 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 SWS_EcuM_04020 d Integration Code module EcuMmodule McOs alt Shutdown Target Reset OffGetCoreID(CoreIdType) EcuM_AL_SwitchOff()EcuM_AL_Reset(EcuM_ResetType)EcuM_OnGoOffTwo() Figure 7.24: Master Core OffPostOS Sequencec () 81 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 7.9.6.2 Slave Core SHUTDOWN module EcuMmodule McOsmodule :SchMIntegration Code module BswM loop over every BswM running in this core SetEvent(TaskId, Mask)GetCoreID(CoreIdType) SchM_Deinit()BswM_Deinit()EcuM_OnGoOffOne() Figure 7.25: Slave Core OffPreOS Sequence SWS_EcuM_04022 d 82 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 module EcuMmodule McOsIntegration Code EcuM_OnGoOffTwo()GetCoreID(CoreIdType) Figure 7.26: Slave Core OffPostOS Sequencec () 7.9.7 SLEEP Phase When the shutdown target Sleep is requested, all cores are put to sleep simultaneously. The MCU must issue a halt for each core. As task timing and priority are local to a core in the OS, neither the scheduler nor the RTE must be synchronized after a halt. Because the master core could issue the MCU halt before all slave cores are finished processing, the cores must be synchronized before entering GoHalt. The BswMs ascertain that sleep should be initiated and distribute an appropriate ECU mode to each core. The BSWs, SWCs and CDDs on the slave cores must be informed by their partition local BswM, de-initialize appropriately and send appropriate mode requests to the BswM to indicate their readiness. If the ECU is put to sleep, the halts must be synchronized so that all slave cores are halted before the master core computes the checksum. The ECU Manager module on the master core uses the same signal mechanism as for synchronizing cores on Go Off. Similarly, the ECU Manager module on the master core must validate the checksum before releasing the slave cores from the halt state 83 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 7.9.7.1 Master Core SLEEP SWS_EcuM_04023 d module EcuMmodule OsIntegration Code module :BswM GetCoreID(CoreIdType) GetResource(RES_AUTOSAR_ECUM_core)EcuM_EnableWakeupSources(EcuM_WakeupSourceType)BswM_EcuM_CurrentWakeup(sources, ECUM_WKSTATUS_NONE ) Figure 7.27: Master Core GoSleep Sequencec () SWS_EcuM_04024 d 84 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 Integration Code module :BswMPeripheral Wakeup Sourcemodule Mcumodule EcuMmodule Wakeup Sourcemodule Os HALT opt RAM check failed alt Validation Needed Yes Noalt AlarmClock Service Present EcuM_AlarmClock only pending event AND Alarm not e xpired EcuM_GenerateRamHash() EcuM_CheckRamHash(uint8)Return from interrupt()Wait for all SlaveCores to be ready to sleep() EcuM_ErrorHook(uint16)Mcu_SetMode()EcuM_SetWakeupEvent(EcuM_WakeupSourceType)Mcu_SetMode(Mcu_ModeType) Signal all SlaveCores to continue()DisableAllInterrupts()Module_CheckWakeup() BswM_EcuM_CurrentWakeup(Sources, ECUM_WKSTATUS_VALIDATED)Mcu_SetMode(Mcu_ModeType)Interrupt() EcuM_GenerateRamHash()EcuM_CheckWakeup(EcuM_WakeupSourceType) EnableAllInterrupts()DisableAllInterrupts() BswM_EcuM_CurrentWakeup(sources, ECUM_WKSTATUS_PENDING)Activate PLL() Figure 7.28: Master Core Halt Sequence 85 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 c(SRS_ModeMgm_09239) SWS_EcuM_04025 d module EcuMmodule :BswMIntegration Code module Mcumodule Wakeup Sourcemodule Os loop WHILE no pendingvalidated events loop FOR all wakeup sources that need polling opt Wakeup detected alt Yes No ! EnableAllInterrupts() Signal SlaveCores to continue()EcuM_SetWakeupEvent(EcuM_WakeupSourceType) EcuM_GetPendingWakeupEvents(EcuM_WakeupSourceType)EcuM_SleepActivity() Module_CheckWakeup()Mcu_SetMode (Mcu_ModeType) BswMEcuM_CurrentWakeup(sources, ECUM_WKSTATUS_VALIDATED)DisableAllInterrupts() BswM_EcuM_CurrentWakeup(sources, ECUM_WKSTATUS_PENDING)EcuM_CheckWakeup(EcuM_WakeupSourceType) Figure 7.29: Master Core Poll Sequencec () SWS_EcuM_04026 d 86 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 module Mcumodule Osmodule EcuMIntegration Code Mcu_SetMode(Mcu_ModeType) EcuM_GetPendingWakeupEvents(EcuM_WakeupSourceType) ReleaseResource(RES_AUTOSAR_ECUM_core)EcuM_DisableWakeupSources(EcuM_WakeupSourceType)EnableAllInterrupts()DisableAllInterrupts() EcuM_AL_DriverRestart() Figure 7.30: Master Core WakeupRestart Sequencec () 7.9.7.2 Slave Core SLEEP SWS_EcuM_04027 d 87 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 module EcuMmodule Osmodule :BswMIntegration Code GetCoreID(CoreIdType) EcuM_EnableWakeupSources(EcuM_WakeupSourceType) GetResource(RES_AUTOSAR_ECUM_core)BswM_EcuM_CurrentWakeup(sources, ECUM_WKSTATUS_NONE ) Figure 7.31: Slave Core GoSleep Sequencec () SWS_EcuM_04028 d 88 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 Integration Code module Wakeup Sourcemodule EcuMmodule McuPeripheral Wakeup Sourcemodule Osmodule :BswM HALT alt Validation Needed Yes NoMcu_SetMode()EcuM_SetWakeupEvent(EcuM_WakeupSourceType)Interrupt()Signal MasterCore that Slave is ready to sleep() Return from interrupt()EcuM_CheckWakeup(EcuM_WakeupSourceType) BswM_EcuM_CurrentState(ECUM_WKSTATUS_PENDING) Wait for MasterCore to continue()DisableAllInterrupts() BswM_EcuM_CurrentWakeup(Sources, ECUM_WKSTATUS_VALI DATED)Module_CheckWakeup() EnableAllInterrupts()Mcu_SetMode(Mcu_ModeType) Figure 7.32: Slave Core Halt Sequencec () SWS_EcuM_04029 d 89 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 module EcuMmodule Wakeup Sourcemodule McuIntegration Code module Osmodule BswM loop WHILE no pendingvalidated events loop FOR all wakeup sources that need polling opt Wakeup detected alt Yes No ! Mcu_SetMode(Mcu_ModeType) Wait for signal from MasterCore to continue()EcuM_SetWakeupEvent(EcuM_WakeupSourceType)Module_CheckWakeup() BswM_EcuM_CurrentWakeup(sources, ECUM_WKSTATUS_PEND ING)EcuM_GetPendingWakeupEvents(EcuM_WakeupSourceType)EnableAllInterrupts() EcuM_CheckWakeup(EcuM_WakeupSourceType)DisableAllInterrupts() BswM_EcuM_CurrentWakeup(sources, ECUM_WKSTATUS_VALI DATED)EcuM_SleepActivity() Figure 7.33: Slave Core Poll Sequencec () SWS_EcuM_04030 d 90 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 module Mcumodule Osmodule EcuMIntegration Code Mcu_SetMode(Mcu_ModeType)DisableAllInterrupts() ReleaseResource(RES_AUTOSAR_ECUM_core)EcuM_DisableWakeupSources(EcuM_WakeupSourceType)EnableAllInterrupts() Figure 7.34: Slave Core WakeupRestart Sequencec () 7.9.8 Runnables and Entry points 7.9.8.1 Internal behavior SWS_EcuM_03018 dThe definition of the internal behavior of the the ECU Manager module shall be as follows. This detailed description is only needed for the configura- tion",
          "of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 module Osmodule Mcumodule EcuMIntegration Code opt Configuration data inconsistent EcuM_LoopDetection()EcuM_AL_DriverInitOne()Check consistency of configuration data()EcuM_AL_DriverInitZero() EcuM_DeterminePbConfiguration(const EcuM_ConfigType) StartOS(ECUM_DEFAULT_APP_MODE)Mcu_GetResetReason()EcuM_ErrorHook(ECUM_E_CONFIGURATION_DATA_INCONSISTEN T) Mcu_GetResetReason(Mcu_ResetType) EcuM_SelectShutdownTarget(Std_ReturnType, EcuM_ShutdownTargetType, EcuM_ShutdownModeType)Map reset reason to wakeup source() Figure 7.4: StartPreOS Sequence 37 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 The StartPreOS Sequence is intended to prepare the ECU to initialize the OS and should be kept as short as possible. Drivers should be initialised in the UP phase when possible and the callouts should also be kept short. Interrupts should not be used during this sequence. If interrupts have to be used, only category I interrupts are allowed in the StartPreOS Sequence 13. Initialization of drivers and hardware abstraction modules is not strictly defined by the ECU Manager. Two callouts EcuM_AL_DriverInitZero (see SWS_EcuM_02905 ) and EcuM_AL_DriverInitOne (see SWS_EcuM_02907 ) are provided to define the init blocks 0 and I. These blocks contain the initialization activities associated with the StartPreOS sequence. MCU_Init does not provide complete MCU initialization. Additionally, hardware depen- dent steps have to be executed and must be defined at system design time. These steps are supposed to be taken within the EcuM_AL_DriverInitZero (seeEcuM_- AL_DriverInitZero , SWS_EcuM_02905 ) or EcuM_AL_DriverInitOne call- outs (see EcuM_AL_DriverInitOne , SWS_EcuM_02907 ). Details can be found in the Specification of MCU Driver 10. SWS_EcuM_02181 dThe ECU Manager module shall call EcuM_GetValidated- WakeupEvents with the configured default shutdown target ( EcuMDefaultShut- downTarget ).c() See section 7.7 Shutdown Targets. SWS_EcuM_02603 dThe StartPreOS Sequence shall initialize all basic software modules that are needed to start the OS. c() 7.3.3 Activities in the StartPostOS Sequence StartPostOS Sequence Initialization Activity Comment Opt. Start BSW Scheduler no Init BSW Mode Manager no Init BSW SchedulerInitialize the semaphores for critical sections used by BSW modulesno Start Scheduler Timing Start periodical events for BSWSWCsno Table 7.2: StartPostOS Sequence Note to column Opt. : Optional activities can be switched on or off by configuration. See section 10.1 Common Containers and configuration parameters for details. SWS_EcuM_02932 dWhen activated through the EcuM_StartupTwo (see SWS_EcuM_02838 ) function, the ECU Manager module shall perform the actions in StartPostOS Sequence (see table 7.2). c(SRS_ModeMgm_09113) 3Category II interrupts require a running OS while category I interrupts do not. AUTOSAR OS re- quires each interrupt vector to be exclusively put into one category. 38 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 module SchMmodule EcuMmodule BswM SchM_Start(): Std_ReturnType SchM_StartTiming(const SchM_ConfigType)SchM_Init(const SchM_ConfigType)BswM_Init(const BswM_ConfigType ) Figure 7.5: StartPostOS Sequence 7.3.4 Checking Configuration Consistency 7.3.4.1 The Necessity for Checking Configuration Consistency in the ECU Man- ager In an AUTOSAR ECU several configuration parameters are set and put into the ECU at different times. Pre-compile parameters are set, inserted into the generated source code and compiled into object code. When the source code has been compiled, link- time parameters are set, compiled, and linked with the previously configured object code into an image that is put into the ECU. Finally, post-build parameters are set, compiled, linked, and put into the ECU at a different time. All these parameters must match to obtain a stable ECU. 39 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 Figure 7.6: BSW Configuration Steps The configuration tool can check the consistency of configuration time parameters it- self. The compiler may detect parameter errors at compilation time and the linker may find additional errors at link time. Unfortunately, finding configuration errors in post- build parameters is very difficult. This can only be achieved by checking that the pre-compile and link-time parameter settings used when compiling the code are exactly the same as the pre-compile and link-time parameter settings used when configuring and com- piling the post-build parameters. This can only be done at run-time. Explanation for SWS_EcuM_02796: The ECU Manager module checks the consis- tency once before initializing the first BSW module to avoid multiple checks scattered over the different BSW modules. This also implies that: SWS_EcuM_02796 dThe ECU Manager module shall not only check the consistency of its own parameters but of all post-build configurable BSW modules before initializing the first BSW module. c() The ECU Manager Configuration Tool must compute a hash value over all pre-compile and link-time configuration parameters of all BSW modules and store the value in the link-time ECUM_CONFIGCONSISTENCY_HASH (seeEcuMConfigConsistencyHash ) configuration parameter. The hash value is necessary for two reasons. First, the pre- compile and link-time parameters are not accessible at run-time. Second, the check 40 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 must be very efficient at run-time. Comparing hundreds of parameters would cause an unacceptable delay in the ECU startup process. The ECU Manager module Configuration Tool must in turn put the computed ECUM_ CONFIGCONSISTENCY_HASH value into the field in the EcuM_ConfigType structure which contains the root of all post-build configuration parameters. SWS_EcuM_02798 dThe ECU Manager module shall check in EcuM_Init (see SWS_EcuM_02811 ) that the field in the structure is equal to the value of ECUM_ CONFIGCONSISTENCY_HASH .c() By computing hash values at configuration time and comparing them at run-time the EcuM code can be very efficient and is furthermore independent of a particular hash computation algorithm. This allows the use of complex hash computation algorithms, e.g. cryptographically strong hash functions. Note that the same hash algorithm can be used to produce the value for the post-build configuration identifier in the EcuM_ConfigType structure. Then the hash algorithm is applied to the post-build parameters instead of the pre-compile and link-time param- eters. SWS_EcuM_02799 dThe hash computation algorithm used to compute a hash value over all pre-compile and link-time configuration parameters of all BSW modules shall always produce the same hash value for the same set of configuration data regardless of the order of configuration parameters in the XML files. c() 7.3.4.2 Example Hash Computation Algorithm Note: This chapter is not normative. It describes one possible way to compute hash values. A simple",
          "function defined in a common API in the Basis-SWSWS_EcuM_NA_00000 SRS_BSW_00172 The scheduling strategy that is built inside the Basic Software Modules shall be compatible with the strategy used in the systemSWS_EcuM_02836 SRS_BSW_00307 Global variables naming convention SWS_EcuM_NA_00000 SRS_BSW_00308 AUTOSAR Basic Software Modules shall not define global data in their header files, but in the C fileSWS_EcuM_NA_00000 SRS_BSW_00309 All AUTOSAR Basic Software Modules shall indicate all global data with read-only purposes by explicitly assigning the const keywordSWS_EcuM_NA_00000 SRS_BSW_00314 All internal driver modules shall separate the interrupt frame definition from the service routineSWS_EcuM_NA_00000 5 23 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 4 Requirement Description Satisfied by SRS_BSW_00323 All AUTOSAR Basic Software Modules shall check passed API parameters for validitySWS_EcuM_03009 SRS_BSW_00325 The runtime of interrupt service routines and functions that are running in interrupt context shall be kept shortSWS_EcuM_NA_00000 SRS_BSW_00327 Error values naming convention SWS_EcuM_04032 SRS_BSW_00330 It shall be allowed to use macros instead of functions where source code is used and runtime is criticalSWS_EcuM_NA_00000 SRS_BSW_00331 All Basic Software Modules shall strictly separate error and status informationSWS_EcuM_91005 SRS_BSW_00333 For each callback function it shall be specified if it is called from interrupt context or notSWS_EcuM_02171 SWS_EcuM_02345 SRS_BSW_00334 All Basic Software Modules shall provide an XML file that contains the meta dataSWS_EcuM_NA_00000 SRS_BSW_00337 Classification of development errors SWS_EcuM_04032 SRS_BSW_00339 Reporting of production relevant error statusSWS_EcuM_02987 SRS_BSW_00341 Module documentation shall contains all needed informationsSWS_EcuM_NA_00000 SRS_BSW_00347 A Naming seperation of different instances of BSW drivers shall be in placeSWS_EcuM_NA_00000 SRS_BSW_00348 All AUTOSAR standard types and constants shall be placed and organized in a standard type header fileSWS_EcuM_NA_00000 SRS_BSW_00350 All AUTOSAR Basic Software Modules shall allow the enabling disabling of detection and reporting of development errors.SWS_EcuM_04032 SRS_BSW_00353 All integer type definitions of target and compiler specific scope shall be placed and organized in a single type headerSWS_EcuM_NA_00000 SRS_BSW_00358 The return type of init() functions implemented by AUTOSAR Basic Software Modules shall be voidSWS_EcuM_02811 SRS_BSW_00359 All AUTOSAR Basic Software Modules callback functions shall avoid return types other than void if possibleSWS_EcuM_02826 SWS_EcuM_02829 SRS_BSW_00360 AUTOSAR Basic Software Modules callback functions are allowed to have parametersSWS_EcuM_02826 SWS_EcuM_02829 SRS_BSW_00361 All mappings of not standardized keywords of compiler specific scope shall be placed and organized in a compiler specific type and keyword headerSWS_EcuM_NA_00000 5 24 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 4 Requirement Description Satisfied by SRS_BSW_00373 The main processing function of each AUTOSAR Basic Software Module shall be named according the defined conventionSWS_EcuM_02837 SRS_BSW_00385 List possible error notifications SWS_EcuM_04032 SRS_BSW_00406 A static status variable denoting if a BSW module is initialized shall be initialized with value 0 before any APIs of the BSW module is calledSWS_EcuM_NA_00000 SRS_BSW_00407 Each BSW module shall provide a function to read out the version information of a dedicated module implementationSWS_EcuM_02813 SRS_BSW_00410 Compiler switches shall have defined valuesSWS_EcuM_NA_00000 SRS_BSW_00411 All AUTOSAR Basic Software Modules shall apply a naming rule for enablingdisabling the existence of the APISWS_EcuM_02813 SRS_BSW_00413 An index-based accessing of the instances of BSW modules shall be doneSWS_EcuM_NA_00000 SRS_BSW_00414 Init functions shall have a pointer to a configuration structure as single parameterSWS_EcuM_02811 SRS_BSW_00415 Interfaces which are provided exclusively for one module shall be separated into a dedicated header fileSWS_EcuM_NA_00000 SRS_BSW_00416 The sequence of modules to be initialized shall be configurableSWS_EcuM_02559 SRS_BSW_00417 Software which is not part of the SW-C shall report error events only after the DEM is fully operational.SWS_EcuM_NA_00000 SRS_BSW_00422 Pre-de-bouncing of error status information is done within the DEMSWS_EcuM_NA_00000 SRS_BSW_00425 The BSW module description template shall provide means to model the defined trigger conditions of schedulable objectsSWS_EcuM_02837 SRS_BSW_00426 BSW Modules shall ensure data consistency of data which is shared between BSW modulesSWS_EcuM_NA_00000 SRS_BSW_00427 ISR functions shall be defined and documented in the BSW module description templateSWS_EcuM_NA_00000 SRS_BSW_00432 Modules should have separate main processing functions for readreceive and writetransmit data pathSWS_EcuM_NA_00000 SRS_BSW_00437 Memory mapping shall provide the possibility to define RAM segments which are not to be initialized during startupSWS_EcuM_NA_00000 SRS_BSW_00439 Enable BSW modules to handle interruptsSWS_EcuM_NA_00000 5 25 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 4 Requirement Description Satisfied by SRS_BSW_00440 The callback function invocation by the BSW module shall follow the signature provided by RTE to invoke servers via Rte_Call APISWS_EcuM_02826 SWS_EcuM_02829 SRS_BSW_00449 BSW Service APIs used by Autosar Application Software shall return a Std_ReturnTypeSWS_EcuM_NA_00000 SRS_BSW_00450 A Main function of a un-initialized module shall return immediatelySWS_EcuM_NA_00000 SRS_BSW_00453 BSW Modules shall be harmonized SWS_EcuM_NA_00000 SRS_ModeMgm_- 09072ECU shutdown shall be forced SWS_EcuM_03022 SRS_ModeMgm_- 09098Storing the wake-up reasons shall be availableSWS_EcuM_02826 SRS_ModeMgm_- 09100Selection of wake-up sources shall be configurableSWS_EcuM_02389 SRS_ModeMgm_- 09104ECU State Manager shall take over control after OS shutdownSWS_EcuM_02952 SWS_EcuM_02953 SRS_ModeMgm_- 09113Initialization of Basic Software modules shall be doneSWS_EcuM_02932 SRS_ModeMgm_- 09114Startinginvoking the shutdown process shall be providedSWS_EcuM_00624 SWS_EcuM_02185 SWS_EcuM_02585 SWS_EcuM_02812 SWS_EcuM_02822 SRS_ModeMgm_- 09116Requesting and releasing the RUN state shall be providedSWS_EcuM_04115 SWS_EcuM_04116 SWS_EcuM_04117 SWS_EcuM_04118 SWS_EcuM_04119 SWS_EcuM_04120 SWS_EcuM_04121 SWS_EcuM_04123 SWS_EcuM_04125 SWS_EcuM_04126 SWS_EcuM_04127 SWS_EcuM_04128 SWS_EcuM_04129 SWS_EcuM_04130 SWS_EcuM_04132 SRS_ModeMgm_- 09126An API for querying the wake-up reason shall be providedSWS_EcuM_02827 SWS_EcuM_02828 SWS_EcuM_02830 SWS_EcuM_02831 SRS_ModeMgm_- 09127The ECU State Manager shall de-initialize Basic Software modules where appropriate during the shutdown processSWS_EcuM_03021 SRS_ModeMgm_- 09128Several shutdown targets shall be supportedSWS_EcuM_02822 SWS_EcuM_02824 SWS_EcuM_02825 SRS_ModeMgm_- 09136The ECU State Manager shall be the receiver of all wake-up eventsSWS_EcuM_04091 SRS_ModeMgm_- 09186Alarm Clock shall be active while the ECU is poweredSWS_EcuM_04054 SWS_EcuM_04055 SWS_EcuM_04056 SWS_EcuM_04057 SWS_EcuM_04058 SWS_EcuM_04059 SWS_EcuM_04060 SRS_ModeMgm_- 09187In Case of wakeup, all the alarm clock shall be canceledSWS_EcuM_04009 SRS_ModeMgm_- 09188In Case of startup, all the alarm clock shall be canceledSWS_EcuM_04010 SRS_ModeMgm_- 09190The alarm clock service shall allow setting an alarm relative to the current time using a time resolution of secondsSWS_EcuM_04054 5 26 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 4 Requirement Description Satisfied by SRS_ModeMgm_- 09194The alarm clock service shall allow setting the clockSWS_EcuM_04064 SRS_ModeMgm_- 09199The alarm clock service shall allow setting an alarm absolute by using an absolute time with a resolution of secondsSWS_EcuM_04057 SRS_ModeMgm_- 09234The EcuM shall handle the initialization of Basic Software modulesSWS_EcuM_02559",
          "BSW_00348, SRS_BSW_00353, SRS_BSW_00361, SRS_BSW_00439, SRS_- BSW_00449, SRS_BSW_00308, SRS_BSW_00309, SRS_BSW_00330, SRS_- BSW_00010, SRS_BSW_00341, SRS_BSW_00334) 210 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager",
          "Slave Core GoSleep Sequencec () SWS_EcuM_04028 d 88 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 Integration Code module Wakeup Sourcemodule EcuMmodule McuPeripheral Wakeup Sourcemodule Osmodule :BswM HALT alt Validation Needed Yes NoMcu_SetMode()EcuM_SetWakeupEvent(EcuM_WakeupSourceType)Interrupt()Signal MasterCore that Slave is ready to sleep() Return from interrupt()EcuM_CheckWakeup(EcuM_WakeupSourceType) BswM_EcuM_CurrentState(ECUM_WKSTATUS_PENDING) Wait for MasterCore to continue()DisableAllInterrupts() BswM_EcuM_CurrentWakeup(Sources, ECUM_WKSTATUS_VALI DATED)Module_CheckWakeup() EnableAllInterrupts()Mcu_SetMode(Mcu_ModeType) Figure 7.32: Slave Core Halt Sequencec () SWS_EcuM_04029 d 89 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 module EcuMmodule Wakeup Sourcemodule McuIntegration Code module Osmodule BswM loop WHILE no pendingvalidated events loop FOR all wakeup sources that need polling opt Wakeup detected alt Yes No ! Mcu_SetMode(Mcu_ModeType) Wait for signal from MasterCore to continue()EcuM_SetWakeupEvent(EcuM_WakeupSourceType)Module_CheckWakeup() BswM_EcuM_CurrentWakeup(sources, ECUM_WKSTATUS_PEND ING)EcuM_GetPendingWakeupEvents(EcuM_WakeupSourceType)EnableAllInterrupts() EcuM_CheckWakeup(EcuM_WakeupSourceType)DisableAllInterrupts() BswM_EcuM_CurrentWakeup(sources, ECUM_WKSTATUS_VALI DATED)EcuM_SleepActivity() Figure 7.33: Slave Core Poll Sequencec () SWS_EcuM_04030 d 90 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 module Mcumodule Osmodule EcuMIntegration Code Mcu_SetMode(Mcu_ModeType)DisableAllInterrupts() ReleaseResource(RES_AUTOSAR_ECUM_core)EcuM_DisableWakeupSources(EcuM_WakeupSourceType)EnableAllInterrupts() Figure 7.34: Slave Core WakeupRestart Sequencec () 7.9.8 Runnables and Entry points 7.9.8.1 Internal behavior SWS_EcuM_03018 dThe definition of the internal behavior of the the ECU Manager module shall be as follows. This detailed description is only needed for the configura- tion of the local RTE. InternalBehavior EcuStateManager Runnable entities of the EcuStateManager RunnableEntity SelectShutdownTarget symbol EcuM_SelectShutdownTarget canbeInvokedConcurrently TRUE RunnableEntity GetShutdownTarget 91 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 symbol EcuM_GetShutdownTarget canbeInvokedConcurrently TRUE RunnableEntity GetLastShutdownTarget symbol EcuM_GetLastShutdownTarget canbeInvokedConcurrently TRUE RunnableEntity SelectShutdownCause symbol EcuM_SelectShutdownCause canbeInvokedConcurrently TRUE RunnableEntity GetShutdownCause symbol EcuM_GetShutdownCause canbeInvokedConcurrently TRUE RunnableEntity SelectBootTarget symbol EcuM_SelectBootTarget canbeInvokedConcurrently TRUE RunnableEntity GetBootTarget symbol EcuM_GetBootTarget canbeInvokedConcurrently TRUE RunnableEntity SetRelWakeupAlarm symbol EcuM_SetRelWakeupAlarm canbeInvokedConcurrently TRUE RunnableEntity SetAbsWakeupAlarm symbol EcuM_SetAbsWakeupAlarm canbeInvokedConcurrently TRUE RunnableEntity AbortWakeupAlarm symbol EcuM_AbortWakeupAlarm canbeInvokedConcurrently TRUE RunnableEntity GetCurrentTime symbol EcuM_GetCurrentTime canbeInvokedConcurrently TRUE RunnableEntity GetWakeupTime symbol EcuM_GetWakeupTime canbeInvokedConcurrently TRUE RunnableEntity SetClock symbol EcuM_SetClock canbeInvokedConcurrently TRUE RunnableEntity RequestRUN symbol EcuM_RequestRUN canbeInvokedConcurrently TRUE RunnableEntity ReleaseRUN symbol EcuM_ReleaseRUN canbeInvokedConcurrently TRUE RunnableEntity RequestPOSTRUN symbol EcuM_RequestPOST_RUN canbeInvokedConcurrently TRUE RunnableEntity ReleasePOSTRUN symbol EcuM_ReleasePOST_RUN canbeInvokedConcurrently TRUE Port present for each user. There are NU users SR000.RequestRUN - RequestRUN SR000.ReleaseRUN - ReleaseRUN SR000.RequestPOSTRUN - RequestPOSTRUN SR000.ReleasePOSTRUN - RequestPOSTRUN PortArgument portSR000, value.typeEcuM_UserType, value.valueEcuMUser0.User 92 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 (...) SRnnn.RequestRUN - RequestRUN SRnnn.ReleaseRUN - ReleaseRUN SRnnn.RequestPOSTRUN - RequestPOSTRUN SRnnn.ReleasePOSTRUN - RequestPOSTRUN PortArgument portSRnnn, value.typeEcuM_UserType, value.valueEcuMUsernnn.User shutDownTarget.SelectShutdownTarget - SelectShutdownTarget shutDownTarget.GetShutdownTarget - GetShutdownTarget shutDownTarget.GetLastShutdownTarget - GetLastShutdownTarget shutDownTarget.SelectShutdownCause - SelectShutdownCause shutDownTarget.GetShutdownCause - GetShutdownCause bootTarget.SelectBootTarget - SelectBootTarget bootTarget.GetBootTarget - GetBootTarget alarmClock.SetRelWakeupAlarm- SetRelWakeupAlarm alarmClock.SetAbsWakeupAlarm - SetAbsWakeupAlarm alarmClock.AbortWakeupAlarm - AbortWakeupAlarm alarmClock.GetCurrentTime - GetCurrentTime alarmClock.GetWakeupTime - GetWakeupTime alarmClock.SetClock - SetClock ; c() 7.10 EcuM Mode Handling The ECU State Manager provides interfaces for SW-Cs to request and release the modes RUN and POST_RUN optionally. EcuMFlex arbitrates the requests and releases made by SW-Cs and propagates the result to BswM. The cooperation between EcuM and BswM is necessary as only the BswM can decide when a transition to a different mode can be made. Due to the fact that the EcuM does not have an own state machine, the EcuM relies on the state transitions made by BswM. Therefore the EcuM does not request a state. Furthermore it notifies the BswM about the current arbitration of all requests. And the BswM is notified when the RTE has executed all Runnables belonging to a certain mode. ArchitecturalComponentsofECUModeHandling 93 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 Figure 7.35: Architectural Components of ECU Mode Handling Figure 7.35 illustrates the architectural components of ECU Mode Handling. SWS_EcuM_04115 dECU Mode Handling shall be applied when EcuMModeHan- dling is configured to true. c(SRS_ModeMgm_09116) SWS_EcuM_04116 dWhen the BswM sets a state of the EcuM by EcuM_SetState , the EcuM shall indicate the corresponding mode to the RTE. c(SRS_ModeMgm_09116) SWS_EcuM_04117 dWhen the last RUN request has been released, ECU State Manager module shall indicate this to BswM using the API BswM_EcuM_- RequestedState(ECUM_STATE_APP_RUN, ECUM_RUNSTATUS_RELEASED) .c (SRS_ModeMgm_09116) If a SW-C needs post run activity during POST_RUN (e.g. shutdown preparation), then it must request POST_RUN before releasing the RUN request. Otherwise it is not guaranteed that this SW-C will get a chance to run its POST_RUN code. SWS_EcuM_04118 dWhen the ECU State Manager is not in the state which is re- quested by a SWC, it shall inform BswM about requested states using the BswM_- EcuM_RequestedState API.c(SRS_ModeMgm_09116) POST_RUN state provides a post run phase for SW-Cs and allows them to save im- portant data or switch off peripherals. SWS_EcuM_04144 dWhen the first RUN or POST_RUN request has been received, ECU State Manager module shall indicate this to BswM using BswM_EcuM_Request- edState(ECUM_STATE_APP_RUN, ECUM_RUNSTATUS_REQUESTED) .c() SWS_EcuM_04119 dWhen the last POST_RUN request has been released, ECU State Manager module shall indicate this to BswM using the API BswM_EcuM_Re- questedState(ECUM_STATE_APP_POST_RUN, ECUM_RUNSTATUS_RELEASED) .c (SRS_ModeMgm_09116) 94 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 Hint: To prevent, that the mode machine instance of ECU Mode lags behind and the states EcuM and the RTE get out of phase, the EcuM can use acknowledgement feed- back for the mode switch notification. Note that EcuM only requests Modes from and to RUN and POST_RUN, the SLEEP Mode has to be set by BswM, as the EcuM has no information about when this Mode can be entered. State Description STARTUPInitial value. Set by Rte when Rte_Start() has been called. RUNAs soon as all necesseray BSW modules are inistialized, BswM switches to this Mode. POST_RUNEcuM requests POST_RUN, when no RUN requests are available. SLEEPEcuM requests SLEEP Mode when no RUN and POST_RUN requests are available and Shut- down Target is set to SLEEP . SHUTDOWNEcuM requests SHUTDOWN Mode when no RUN and POST_ RUN requests are available and Shutdown Target is set to SHUT - DOWN. Table 7.8: EcuM Modes SWS_EcuM_04143 dEcuM shall notify BswM about the current State by calling the in- terface BswM_EcuM_CurrentState(EcuM_StateType State) . A new state shall be set by EcuM when RTE has given its feedback via the acknowledgement port. c() 7.11 Advanced Topics 7.11.1 Relation to Bootloader The Bootloader is",
          "are finished processing, the cores must be synchronized before entering SHUTDOWN. The BswM (which is distributed over all partitions) ascertains that the ECU should be shut down and synchronizes with each BwsM in the ECU. All BswMs induce de- initialization of all the partitions BSWs, SWCs and CDDs and send appropriate signals to the other BswMs to indicate their readiness to shut down. 78 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 For a shutdown of the ECU, the BswM (which lies in the same partition of the master EcuM) ultimately calls GoOff on the master core which distributes that request to all slave cores. The master EcuM de-initializes the BswM, and the SchM. The EcuMs on the slave cores de-initialize their SchM and BswM and then send a signal to indicate that the core is ready for ShutdownOS (again, see section section 7.9.3 Master Core - Slave Core Signalling for details). The master EcuM waits for the signal from each slave core EcuM and then initiates shutdown as usual on the master core (the master EcuM calls ShutdownAllCores , and the ECU is put to bed with the global shutdown hook) 79 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 7.9.6.1 Master Core SHUTDOWN module EcuMmodule SchMmodule BswMmodule McOsIntegration Code opt Pending wakeup events?loop over every BswM running in this core loop FOR all configured cores EcuM_OnGoOffOne() ShutdownAllCores(StatusType)EcuM_GetPendingWakeupEvents(EcuM_WakeupSourceType)BswM_Deinit() WaitEvent(Mask)SchM_Deinit()GetCoreID(CoreIdType) EcuM_SelectShutdownTarget(Std_ReturnType, EcuM_ShutdownTargetType, EcuM_ShutdownModeType) Figure 7.23: Master Core OffPreOS Sequence 80 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 SWS_EcuM_04020 d Integration Code module EcuMmodule McOs alt Shutdown Target Reset OffGetCoreID(CoreIdType) EcuM_AL_SwitchOff()EcuM_AL_Reset(EcuM_ResetType)EcuM_OnGoOffTwo() Figure 7.24: Master Core OffPostOS Sequencec () 81 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 7.9.6.2 Slave Core SHUTDOWN module EcuMmodule McOsmodule :SchMIntegration Code module BswM loop over every BswM running in this core SetEvent(TaskId, Mask)GetCoreID(CoreIdType) SchM_Deinit()BswM_Deinit()EcuM_OnGoOffOne() Figure 7.25: Slave Core OffPreOS Sequence SWS_EcuM_04022 d 82 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 module EcuMmodule McOsIntegration Code EcuM_OnGoOffTwo()GetCoreID(CoreIdType) Figure 7.26: Slave Core OffPostOS Sequencec () 7.9.7 SLEEP Phase When the shutdown target Sleep is requested, all cores are put to sleep simultaneously. The MCU must issue a halt for each core. As task timing and priority are local to a core in the OS, neither the scheduler nor the RTE must be synchronized after a halt. Because the master core could issue the MCU halt before all slave cores are finished processing, the cores must be synchronized before entering GoHalt. The BswMs ascertain that sleep should be initiated and distribute an appropriate ECU mode to each core. The BSWs, SWCs and CDDs on the slave cores must be informed by their partition local BswM, de-initialize appropriately and send appropriate mode requests to the BswM to indicate their readiness. If the ECU is put to sleep, the halts must be synchronized so that all slave cores are halted before the master core computes the checksum. The ECU Manager module on the master core uses the same signal mechanism as for synchronizing cores on Go Off. Similarly, the ECU Manager module on the master core must validate the checksum before releasing the slave cores from the halt state 83 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 7.9.7.1 Master Core SLEEP SWS_EcuM_04023 d module EcuMmodule OsIntegration Code module :BswM GetCoreID(CoreIdType) GetResource(RES_AUTOSAR_ECUM_core)EcuM_EnableWakeupSources(EcuM_WakeupSourceType)BswM_EcuM_CurrentWakeup(sources, ECUM_WKSTATUS_NONE ) Figure 7.27: Master Core GoSleep Sequencec () SWS_EcuM_04024 d 84 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 Integration Code module :BswMPeripheral Wakeup Sourcemodule Mcumodule EcuMmodule Wakeup Sourcemodule Os HALT opt RAM check failed alt Validation Needed Yes Noalt AlarmClock Service Present EcuM_AlarmClock only pending event AND Alarm not e xpired EcuM_GenerateRamHash() EcuM_CheckRamHash(uint8)Return from interrupt()Wait for all SlaveCores to be ready to sleep() EcuM_ErrorHook(uint16)Mcu_SetMode()EcuM_SetWakeupEvent(EcuM_WakeupSourceType)Mcu_SetMode(Mcu_ModeType) Signal all SlaveCores to continue()DisableAllInterrupts()Module_CheckWakeup() BswM_EcuM_CurrentWakeup(Sources, ECUM_WKSTATUS_VALIDATED)Mcu_SetMode(Mcu_ModeType)Interrupt() EcuM_GenerateRamHash()EcuM_CheckWakeup(EcuM_WakeupSourceType) EnableAllInterrupts()DisableAllInterrupts() BswM_EcuM_CurrentWakeup(sources, ECUM_WKSTATUS_PENDING)Activate PLL() Figure 7.28: Master Core Halt Sequence 85 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 c(SRS_ModeMgm_09239) SWS_EcuM_04025 d module EcuMmodule :BswMIntegration Code module Mcumodule Wakeup Sourcemodule Os loop WHILE no pendingvalidated events loop FOR all wakeup sources that need polling opt Wakeup detected alt Yes No ! EnableAllInterrupts() Signal SlaveCores to continue()EcuM_SetWakeupEvent(EcuM_WakeupSourceType) EcuM_GetPendingWakeupEvents(EcuM_WakeupSourceType)EcuM_SleepActivity() Module_CheckWakeup()Mcu_SetMode (Mcu_ModeType) BswMEcuM_CurrentWakeup(sources, ECUM_WKSTATUS_VALIDATED)DisableAllInterrupts() BswM_EcuM_CurrentWakeup(sources, ECUM_WKSTATUS_PENDING)EcuM_CheckWakeup(EcuM_WakeupSourceType) Figure 7.29: Master Core Poll Sequencec () SWS_EcuM_04026 d 86 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 module Mcumodule Osmodule EcuMIntegration Code Mcu_SetMode(Mcu_ModeType) EcuM_GetPendingWakeupEvents(EcuM_WakeupSourceType) ReleaseResource(RES_AUTOSAR_ECUM_core)EcuM_DisableWakeupSources(EcuM_WakeupSourceType)EnableAllInterrupts()DisableAllInterrupts() EcuM_AL_DriverRestart() Figure 7.30: Master Core WakeupRestart Sequencec () 7.9.7.2 Slave Core SLEEP SWS_EcuM_04027 d 87 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 module EcuMmodule Osmodule :BswMIntegration Code GetCoreID(CoreIdType) EcuM_EnableWakeupSources(EcuM_WakeupSourceType) GetResource(RES_AUTOSAR_ECUM_core)BswM_EcuM_CurrentWakeup(sources, ECUM_WKSTATUS_NONE ) Figure 7.31: Slave Core GoSleep Sequencec () SWS_EcuM_04028 d 88 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 Integration Code module Wakeup Sourcemodule EcuMmodule McuPeripheral Wakeup Sourcemodule Osmodule :BswM HALT alt Validation Needed Yes NoMcu_SetMode()EcuM_SetWakeupEvent(EcuM_WakeupSourceType)Interrupt()Signal MasterCore that Slave is ready to sleep() Return from interrupt()EcuM_CheckWakeup(EcuM_WakeupSourceType) BswM_EcuM_CurrentState(ECUM_WKSTATUS_PENDING) Wait for MasterCore to continue()DisableAllInterrupts() BswM_EcuM_CurrentWakeup(Sources, ECUM_WKSTATUS_VALI DATED)Module_CheckWakeup() EnableAllInterrupts()Mcu_SetMode(Mcu_ModeType) Figure 7.32: Slave Core Halt Sequencec () SWS_EcuM_04029 d 89 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 module EcuMmodule Wakeup Sourcemodule McuIntegration Code module Osmodule BswM loop WHILE no pendingvalidated events loop FOR all wakeup sources that need polling opt Wakeup detected alt Yes No ! Mcu_SetMode(Mcu_ModeType) Wait for signal from MasterCore to continue()EcuM_SetWakeupEvent(EcuM_WakeupSourceType)Module_CheckWakeup() BswM_EcuM_CurrentWakeup(sources, ECUM_WKSTATUS_PEND ING)EcuM_GetPendingWakeupEvents(EcuM_WakeupSourceType)EnableAllInterrupts() EcuM_CheckWakeup(EcuM_WakeupSourceType)DisableAllInterrupts() BswM_EcuM_CurrentWakeup(sources, ECUM_WKSTATUS_VALI DATED)EcuM_SleepActivity() Figure 7.33: Slave Core Poll Sequencec () SWS_EcuM_04030 d 90 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 module Mcumodule Osmodule EcuMIntegration Code Mcu_SetMode(Mcu_ModeType)DisableAllInterrupts() ReleaseResource(RES_AUTOSAR_ECUM_core)EcuM_DisableWakeupSources(EcuM_WakeupSourceType)EnableAllInterrupts() Figure 7.34: Slave Core WakeupRestart Sequencec () 7.9.8 Runnables and Entry points 7.9.8.1 Internal behavior SWS_EcuM_03018 dThe definition of the internal behavior of the the ECU Manager module shall be as follows. This detailed description is only needed for the configura- tion",
          "Operation successful Possible Errors 1 E_NOT_OK Operation failed Operation ReleasePOSTRUN Comment Variation Possible Errors E_OK E_NOT_OK Operation ReleaseRUN Comment Variation Possible Errors E_OK E_NOT_OK Operation RequestPOSTRUN Comment Variation Possible Errors E_OK E_NOT_OK 149 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 Operation RequestRUN Comment Variation Possible Errors E_OK E_NOT_OK c() 8.8.6 Port Interface for EcuM_CurrentMode Interface 8.8.6.1 General Approach SWS_EcuM_04132 dThe mode port of the ECU State Manager module shall declare the following modes: STARTUP RUN POST_RUN SLEEP SHUTDOWN c(SRS_ModeMgm_09116) This definition is a simplified view of ECU Modes that applications do need to know. It does not restrict or limit in any way how application modes could be defined. Applica- tions modes are completely handled by the application itself. SWS_EcuM_04133 dMode changes shall be notified to SW-Cs through the RTE mode ports when the mode change occurs. This specification assumes that the port name is currentMode and that the direct API of RTE will be used. Under these conditions mode changes signaled by invoking Rte_StatusType Rte_Switch_currentMode_currentMode( Rte_ModeType_EcuM_Mode mode) where mode is the new mode to be notified. The value range is specified by the previ- ous requirement. The return value shall be ignored. A SW-C which wants to be notified of mode changes should require the mode switch interface EcuM_CurrentMode. c() 150 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 8.8.6.2 Data Types The mode declaration group EcuM_Mode represents the modes of the ECU State Manager module that will be notified to the SW-Cs. ModeDeclarationGroup EcuM_Mode STARTUP , RUN, POST_RUN, SLEEP , SHUTDOWN initialMode STARTUP ; SWS_EcuM_04107 d Name EcuM_Mode Kind ModeDeclarationGroup Category ALPHABETIC_ORDER Initial mode STARTUP On transition value POST_RUN RUN SHUTDOWN SLEEP Modes STARTUP Description c() 8.8.6.3 Service Interfaces SWS_EcuM_04108 d Name EcuM_CurrentMode Comment Interface to read the current ECU mode IsService true Variation ModeGroup currentMode EcuM_Mode c() 8.8.7 Definition of the ECU Manager Service This section provides guidance on the definition of the ECU Manager module Service. Note that these definitions can only be completed during ECU configuration (since certain ECU Manager module configuration parameters determine the number of ports 151 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 provided by the ECU Manager module service). Also note a SW-Cs implementation does not depend on these definitions. In an AUTOSAR system, there are ports both above and below the RTE. The ECU Manager module service description defines ports provided to the RTE and the de- scriptions of every SW-C that uses this service must contain service ports which required these ECU Manager module ports from the RTE. The EcuM provides the following ports: SWS_EcuM_04111 d Name ShutdownTarget_UserName Kind ProvidedPort Interface EcuM_ShutdownTarget Description Provides an interface to SW-Cs to select a new shutdown target and query the current shutdown target. Variation UserName ecuc(EcuMEcuMConfigurationEcuMFlexConfigurationEcuMFlexUserConfigEcu MFlexUser.SHORT -NAME) c() SWS_EcuM_04110 d Name BootTarget_UserName Kind ProvidedPort Interface EcuM_BootTarget Description Provides an interface to SW-Cs to select a new boot target and query the current boot target. Variation UserName ecuc(EcuMEcuMConfigurationEcuMFlexConfigurationEcuMFlexUserConfigEcu MFlexUser.SHORT -NAME) c() SWS_EcuM_03017 d Name AlarmClock_UserName Kind ProvidedPort Interface EcuM_AlarmClock Description Provides to SW-Cs an alarm clock. The EcuM_AlarmClock port uses port-defined argument values to identify the user that manages its alarm clock. Type EcuM_UserType Port Defined Argument Value(s)Value ecuc(EcuMEcuMConfigurationEcuMFlexConfigurationEcuMFlexUser ConfigEcuMFlexUser.value) Variation ecuc(EcuMEcuMFlexGeneralEcuMAlarmClockPresent) true UserName ecuc(EcuMEcuMConfigurationEcuMFlexConfigurationEcuMAlarm Clock.SHORT -NAME) c() SWS_EcuM_04113 d 152 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 Name time Kind ProvidedPort Interface EcuM_Time Description Provides the EcuMs time service to SWCs Variation c() SWS_EcuM_04135 d Name StateRequest_UserName Kind ProvidedPort Interface EcuM_StateRequest Description Provides an interface to SW-Cs to request state changes of the ECU state. The port uses port-defined argument values to identify the user. Type EcuM_UserType Port Defined Argument Value(s)Value ecuc(EcuMEcuMConfigurationEcuMFlexConfigurationEcuMFlexUser ConfigEcuMFlexUser.value) Variation UserName ecuc(EcuMEcuMConfigurationEcuMFlexConfigurationEcuMFlexUserConfigEcu MFlexUser.SHORT -NAME) c() SWS_EcuM_04112 d Name currentMode Kind ProvidedPort Interface EcuM_CurrentMode Description Variation c() The EcuM provides the following types: SWS_EcuM_91004 d Name EcuM_UserType Kind Type Derived from uint8 Description Unique value for each user. Variation Available via Rte_EcuM_Type.h c() SWS_EcuM_04102 d 153 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 Name EcuM_TimeType Kind Type Derived from uint32 Description This data type represents the time of the ECU Manager module. Variation Available via Rte_EcuM_Type.h c() d Name EcuM_BootTargetType Kind Type Derived from uint8 ECUM_BOOT_TARGET_APP 0 The ECU will boot into the application ECUM_BOOT_TARGET_OEM_ BOOTLOADER1 The ECU will boot into the OEM bootloaderRange ECUM_BOOT_TARGET_SYS_ BOOTLOADER2 The ECU will boot into the system supplier bootloader Description This type represents the boot targets the ECU Manager module can be configured with. The default boot target is ECUM_BOOT_TARGET_OEM_BOOTLOADER. Variation Available via Rte_EcuM_Type.h c() SWS_EcuM_04045 d Name EcuM_ShutdownCauseType Kind Type Derived from uint8 ECUM_CAUSE_UNKNOWN 0 No cause was set. ECUM_CAUSE_ECU_STATE 1 ECU state machine entered a state for shutdown ECUM_CAUSE_WDGM 2 Watchdog Manager detected a failureRange ECUM_CAUSE_DCM 3 Diagnostic Communication Manager requests a shutdown due to a service request Description This type describes the cause for a shutdown by the ECU State Manager. It can be extended by configuration. Variation Available via Rte_EcuM_Type.h c() SWS_EcuM_04101 d 154 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 Name EcuM_ShutdownModeType Kind Type Derived from uint16 ecuc(EcuMEcuMConfiguration EcuMFlexConfigurationEcu MResetMode.SHORT -NAME)256 ecuc(EcuMEcu MConfigurationEcu MFlexConfiguration EcuMResetMode.Ecu MResetModeId)Configured Reset Modes Range ecuc(EcuMEcuMConfiguration EcuMCommonConfigurationEcu MSleepMode.SHORT -NAME)ecuc(EcuM Ecu MConfigurationEcu MCommon ConfigurationEcu MSleepMode.Ecu MSleepModeId)Configured Sleep Modes Description This data type represents the modes of the ECU Manager module. Variation Available via Rte_EcuM_Type.h c() SWS_EcuM_04136 d Name EcuM_ShutdownTargetType Kind Type Derived from uint8 ECUM_SHUTDOWN_TARGET_ SLEEP0x0 ECUM_SHUTDOWN_TARGET_ RESET0x1 Range ECUM_SHUTDOWN_TARGET_ OFF0x2 Description Variation Available via Rte_EcuM_Type.h c() SWS_EcuM_04094 dIn the case of a MultiCore ECU, the EcuM AUTOSAR service (Standardized AUTOSAR Interfaces) may be offered on one or more cores. c() Although the EcuM service interfaces are available on every core (see section 7.9 Multi Core for details), the EcuC allows the provided ports to be bound to the interface on a particular partition, and therefore to a particular core (see the Specification",
          "selects the cause corresponding to the next shutdown target Variation shutdownTarget Type EcuM_ShutdownTargetType Direction IN Comment The selected shutdown cause Variation shutdownMode Type EcuM_ShutdownModeType Direction IN Comment The identfier of a sleep mode (if shutdownTarget is ECUM_SHUTDOWN_ TARGET_SLEEP) or a reset mechanism (if shutdownTarget is ECUM_ SHUTDOWN_TARGET_RESET) as defined by configuration.Parameters Variation Possible Errors E_OK E_NOT_OK c() SWS_EcuM_02979 dThe shutdownMode parameter shall determine the specific sleep or reset mode (see ECUC_EcuM_00132) relevant to SelectShutdownTarget, GetShutdownTarget and GetLastShutdownTarget. The ECU Manager module shall only use the shutdownMode parameter is if the shutdownTarget parameter is equal to ECUM_SHUTDOWN_TARGET_SLEEP or ECUM_SHUTDOWN_TARGET_RESET, otherwise it shall be ignored. c() 144 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 8.8.2 Port Interface for EcuM_BootTarget Interface 8.8.2.1 General Approach A SW-C that wants to select a boot target must require the client-server interface Ecu M_BootTarget. 8.8.2.2 Service Interfaces SWS_EcuM_03012 d Name EcuM_BootTarget Comment A SW-C that wants to select a boot target must use the client-server interface EcuM_Boot Target. IsService true Variation 0 E_OK Operation successful Possible Errors 1 E_NOT_OK Operation failed Operation GetBootTarget Comment Returns the current boot target Variation target Type EcuM_BootTargetType Direction OUT Comment The currently selected boot targetParameters Variation Possible Errors E_OK Operation SelectBootTarget Comment Selects a boot target Variation target Type EcuM_BootTargetType Direction IN Comment The selected boot targetParameters Variation Possible Errors E_OK E_NOT_OK c() 145 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 8.8.3 Port Interface for EcuM_AlarmClock Interface 8.8.3.1 General Approach A SW-C that wants to use an alarm clock must require the client-server interface Ecu M_AlarmClock. The EcuM_AlarmClock interface uses port-defined argument values to identify the user that manages its alarm clock. See SWS_Rte_1350 in the Specifi- cation of RTE 2 for a description of port-defined argument values. 8.8.3.2 Service Interfaces SWS_EcuM_04105 d Name EcuM_AlarmClock Comment A SW-C that wants to use an alarm clock must use the client-server interface EcuM_Alarm Clock. IsService true Variation ecuc(EcuMEcuMFlexGeneralEcuMAlarmClockPresent) True 0 E_OK Operation successful 1 E_NOT_OK Operation failed 3 ECUM_E_EARLIER_ ACTIVEAn earlier alarm is already set 4 ECUM_E_PAST The desired point in time has already passedPossible Errors 5 ECUM_E_NOT_ACTIVE No active alarm found Operation AbortWakeupAlarm Comment Aborts the wakeup alarm previously set by this user Variation Possible Errors E_OK E_NOT_OK ECUM_E_NOT_ACTIVE Operation SetAbsWakeupAlarm Comment Sets the users wakeup alarm to an absolute point in time Variation time Type EcuM_TimeType Direction IN Comment Absolute time in seconds. Note that, absolute alarms use knowledge of the current timeParameters Variation Possible Errors E_OK E_NOT_OK ECUM_E_EARLIER_ACTIVE ECUM_E_PAST 146 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 Operation SetClock Comment Sets the EcuM clock time to the provided value Variation time Type EcuM_TimeType Direction IN Comment Absolute time in seconds since battery connectParameters Variation Possible Errors E_OK E_NOT_OK Operation SetRelWakeupAlarm Comment Sets a users wakeup alarm relative to the current point in time Variation time Type EcuM_TimeType Direction IN Comment Relative time from now in secondsParameters Variation Possible Errors E_OK E_NOT_OK ECUM_E_EARLIER_ACTIVE c() 8.8.4 Port Interface for EcuM_Time Interface 8.8.4.1 General Approach A SW-C that wants to use the time functionality of the EucM must require the client- server interface EcuM_Time. 8.8.4.2 Data Types The EcuM_Time service does not have any specific data types. 8.8.4.3 Service Interfaces SWS_EcuM_04109 d 147 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 Name EcuM_Time Comment IsService true Variation 0 E_OK Operation successful Possible Errors 1 E_NOT_OK Operation failed Operation GetCurrentTime Comment Returns the current value of the EcuM clock (i.e. the time in seconds since battery connect) Variation time Type EcuM_TimeType Direction OUT Comment Absolute time in seconds since battery connectParameters Variation Possible Errors E_OK E_NOT_OK Operation GetWakeupTime Comment Returns the current value of the master alarm clock (the minimum absolute time of all user alarm clocks) Variation time Type EcuM_TimeType Direction OUT Comment Absolute time in seconds for next wakeup. 0xFFFFFFFF means no active alarm.Parameters Variation Possible Errors E_OK E_NOT_OK c() 8.8.5 Port Interface for EcuM_StateRequest Interface SWS_EcuM_04130 dThe ECU State Manager module shall provide System Services for the following functionalities when the container EcuMModeHandling (see 10.2.1) is available: requesting RUN releasing RUN requesting POST_RUN releasing POST_RUN c(SRS_ModeMgm_09116) 148 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 8.8.5.1 General Approach A SW-C which needs to keep the ECU alive or needs to execute any operations before the ECU is shut down shall require the client-server interface EcuM_StateRequest. This interface uses port-defined argument values to identify the user that requests modes. See SWS_Rte_1350 for a description of port-defined argument values. 8.8.5.2 Data Types No data types are needed for this interface. 8.8.5.3 Service Interfaces SWS_EcuM_04131 d Name EcuM_StateRequest Comment Interface to request a specific ECU state IsService true Variation 0 E_OK Operation successful Possible Errors 1 E_NOT_OK Operation failed Operation ReleasePOSTRUN Comment Variation Possible Errors E_OK E_NOT_OK Operation ReleaseRUN Comment Variation Possible Errors E_OK E_NOT_OK Operation RequestPOSTRUN Comment Variation Possible Errors E_OK E_NOT_OK 149 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 Operation RequestRUN Comment Variation Possible Errors E_OK E_NOT_OK c() 8.8.6 Port Interface for EcuM_CurrentMode Interface 8.8.6.1 General Approach SWS_EcuM_04132 dThe mode port of the ECU State Manager module shall declare the following modes: STARTUP RUN POST_RUN SLEEP SHUTDOWN c(SRS_ModeMgm_09116) This definition is a simplified view of ECU Modes that applications do need to know. It does not restrict or limit in any way how application modes could be defined. Applica- tions modes are completely handled by the application itself. SWS_EcuM_04133 dMode changes shall be notified to SW-Cs through the RTE mode ports when the mode change occurs. This specification assumes that the port name is currentMode and that the direct API of RTE will be used. Under these conditions mode changes signaled by invoking Rte_StatusType Rte_Switch_currentMode_currentMode( Rte_ModeType_EcuM_Mode mode) where mode is the new mode to be notified. The value range is specified by the previ- ous requirement. The return value shall be ignored.",
          "BSW_00348, SRS_BSW_00353, SRS_BSW_00361, SRS_BSW_00439, SRS_- BSW_00449, SRS_BSW_00308, SRS_BSW_00309, SRS_BSW_00330, SRS_- BSW_00010, SRS_BSW_00341, SRS_BSW_00334) 210 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager",
          "Specification of ECU State Manager AUTOSAR CP R20-11 Document TitleSpecification of ECU State Manager Document Owner AUTOSAR Document Responsibility AUTOSAR Document Identification No 78 Document Status published Part of AUTOSAR Standard Classic Platform Part of Standard Release R20-11 Document Change History Date Release Changed by Description 2020-11-30 R20-11AUTOSAR Release ManagementCorrected broken chapter structure EcuM_UserType handling improved Minor content changes, clarifications (multi-core, configuration, values) 2019-11-28 R19-11AUTOSAR Release ManagementNo content changes Changed Document Status from Final to published 2018-10-31 4.4.0AUTOSAR Release ManagementReworked BswM interface through EcuM_GoDownHaltPoll Removed EcuM fixed version references 2017-12-08 4.3.1AUTOSAR Release ManagementAdapt API Can_CheckWakeup Removed ConfigPtr parameter Removed Default error Removed unused DIO driver EcuM AUTOSAR service configure on service partition only 2016-11-30 4.3.0AUTOSAR Release ManagementPartial Network Cluster Support Initialization BSW scheduler slipt Added a driver initialization list Removed EcuM_StateType 1 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 2015-07-31 4.2.2AUTOSAR Release ManagementReworked slave core poll sequence Reviewed multicore shutdown synchronization Reclassified error types Editorial changes 2014-10-31 4.2.1AUTOSAR Release ManagementAdded switch configuration Defined initialization order for InitListZeroInitListOne Definition of the name pattern of c-init-data struct corrected Type conflicts solved Editorial changes 2014-03-31 4.1.3AUTOSAR Release ManagementEcuM errors reworked Inconsistencies between APIs and Interfaces resolved Type conflicts solved Editorial changes 2013-10-31 4.1.2AUTOSAR Release ManagementAdded API table for service interfaces Fixed traceability topics General clean-up of requirements (reviewed different interfaces, operations, descriptions and figures). Editorial changes 2 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 2013-03-15 4.1.1AUTOSAR AdministrationSpecified reset mode to use in case of pending wakeup events during shutdown Added callout for Reset Loop Detection Extended specification of parameter time of function EcuM_GetMostRecentShutdown Improved configuration description Added new APIs to enable asynchronous Trcv handling for CANFR Wakeup Adaption of EcuM Flex to support BSW modules distributed over multiple partitions Reclassified which Production Errors are Extended Production Errors Added possible error to operations of ClientServer-Interfaces, where no errors where defined Enhancement of configuration to initialize BSW modules by the EcuM Flex 2011-12-22 4.0.3AUTOSAR AdministrationFixed interoperability problems between EcuM and BswM Terminology of ECU State Manager Flexible more consistently described Modification of sleep sequences to minimize misses of wakeup interrupts 2010-09-30 3.1.5AUTOSAR AdministrationUpdated pseudo code for AUTOSAR Services Update startup procedure for multi core systems 2010-02-02 3.1.4AUTOSAR AdministrationRemoved state machine to accommodate mode-dependent scheduling Added Multi-Core support Added Alarm Clock feature Revised disclaimer 2008-08-13 3.1.1AUTOSAR AdministrationLegal disclaimer revised 3 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 2007-12-21 3.0.1AUTOSAR AdministrationFixed Wakeup mechanisms Included optional triggering of Watchdog Manager during Startup, Shutdown, and Sleep Extended startup sequence to have more flexibility and to directly initialize all other BSW modules Generated APIs from BSW UML model Generated configuration from Meta Model Document meta information extended Small layout adaptations made 2007-01-24 2.1.15AUTOSAR AdministrationCorrected startup flow and wakeup concept. Added specification for AUTOSAR ports. Modified configuration for compliance with variant management. Added new API services. Legal disclaimer revised Release Notes added Advice for users revised Revision Information added 2006-05-16 2.0AUTOSAR Administration Initial Release 4 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 Disclaimer This work (specification andor software implementation) and the material contained in it, as released by AUTOSAR, is for the purpose of information only. AUTOSAR and the companies that have contributed to it shall not be liable for any use of the work. The material contained in this work is protected by copyright and other types of intel- lectual property rights. The commercial exploitation of the material contained in this work requires a license to such intellectual property rights. This work may be utilized or reproduced without any modification, in any form or by any means, for informational purposes only. For any other purpose, no part of the work may be utilized or reproduced, in any form or by any means, without permission in writing from the publisher. The work has been developed for automotive applications only. It has neither been developed, nor tested for non-automotive applications. The word AUTOSAR and the AUTOSAR logo are registered trademarks. 5 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 Table of Contents 1 Introduction and Functional Overview 13 1.1 Backwards Compatibility to Previous ECU Manager Module Versions . 14 2 Definitions and Abbreviations 15 2.1 Definitions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 15 2.2 Abbreviations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 15 3 Related documentation 17 3.1 Input documents related standards and norms . . . . . . . . . . . . 17 3.2 Related specification . . . . . . . . . . . . . . . . . . . . . . . . . . . . 17 4 Constraints and Assumptions 18 4.1 Limitations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 18 4.2 Hardware Requirements . . . . . . . . . . . . . . . . . . . . . . . . . . 18 4.3 Applicability to car domains . . . . . . . . . . . . . . . . . . . . . . . . 18 5 Dependencies to other modules 19 5.1 SPAL Modules . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 19 5.1.1 MCU Driver . . . . . . . . . .",
          "Slave Core GoSleep Sequencec () SWS_EcuM_04028 d 88 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 Integration Code module Wakeup Sourcemodule EcuMmodule McuPeripheral Wakeup Sourcemodule Osmodule :BswM HALT alt Validation Needed Yes NoMcu_SetMode()EcuM_SetWakeupEvent(EcuM_WakeupSourceType)Interrupt()Signal MasterCore that Slave is ready to sleep() Return from interrupt()EcuM_CheckWakeup(EcuM_WakeupSourceType) BswM_EcuM_CurrentState(ECUM_WKSTATUS_PENDING) Wait for MasterCore to continue()DisableAllInterrupts() BswM_EcuM_CurrentWakeup(Sources, ECUM_WKSTATUS_VALI DATED)Module_CheckWakeup() EnableAllInterrupts()Mcu_SetMode(Mcu_ModeType) Figure 7.32: Slave Core Halt Sequencec () SWS_EcuM_04029 d 89 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 module EcuMmodule Wakeup Sourcemodule McuIntegration Code module Osmodule BswM loop WHILE no pendingvalidated events loop FOR all wakeup sources that need polling opt Wakeup detected alt Yes No ! Mcu_SetMode(Mcu_ModeType) Wait for signal from MasterCore to continue()EcuM_SetWakeupEvent(EcuM_WakeupSourceType)Module_CheckWakeup() BswM_EcuM_CurrentWakeup(sources, ECUM_WKSTATUS_PEND ING)EcuM_GetPendingWakeupEvents(EcuM_WakeupSourceType)EnableAllInterrupts() EcuM_CheckWakeup(EcuM_WakeupSourceType)DisableAllInterrupts() BswM_EcuM_CurrentWakeup(sources, ECUM_WKSTATUS_VALI DATED)EcuM_SleepActivity() Figure 7.33: Slave Core Poll Sequencec () SWS_EcuM_04030 d 90 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 module Mcumodule Osmodule EcuMIntegration Code Mcu_SetMode(Mcu_ModeType)DisableAllInterrupts() ReleaseResource(RES_AUTOSAR_ECUM_core)EcuM_DisableWakeupSources(EcuM_WakeupSourceType)EnableAllInterrupts() Figure 7.34: Slave Core WakeupRestart Sequencec () 7.9.8 Runnables and Entry points 7.9.8.1 Internal behavior SWS_EcuM_03018 dThe definition of the internal behavior of the the ECU Manager module shall be as follows. This detailed description is only needed for the configura- tion of the local RTE. InternalBehavior EcuStateManager Runnable entities of the EcuStateManager RunnableEntity SelectShutdownTarget symbol EcuM_SelectShutdownTarget canbeInvokedConcurrently TRUE RunnableEntity GetShutdownTarget 91 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 symbol EcuM_GetShutdownTarget canbeInvokedConcurrently TRUE RunnableEntity GetLastShutdownTarget symbol EcuM_GetLastShutdownTarget canbeInvokedConcurrently TRUE RunnableEntity SelectShutdownCause symbol EcuM_SelectShutdownCause canbeInvokedConcurrently TRUE RunnableEntity GetShutdownCause symbol EcuM_GetShutdownCause canbeInvokedConcurrently TRUE RunnableEntity SelectBootTarget symbol EcuM_SelectBootTarget canbeInvokedConcurrently TRUE RunnableEntity GetBootTarget symbol EcuM_GetBootTarget canbeInvokedConcurrently TRUE RunnableEntity SetRelWakeupAlarm symbol EcuM_SetRelWakeupAlarm canbeInvokedConcurrently TRUE RunnableEntity SetAbsWakeupAlarm symbol EcuM_SetAbsWakeupAlarm canbeInvokedConcurrently TRUE RunnableEntity AbortWakeupAlarm symbol EcuM_AbortWakeupAlarm canbeInvokedConcurrently TRUE RunnableEntity GetCurrentTime symbol EcuM_GetCurrentTime canbeInvokedConcurrently TRUE RunnableEntity GetWakeupTime symbol EcuM_GetWakeupTime canbeInvokedConcurrently TRUE RunnableEntity SetClock symbol EcuM_SetClock canbeInvokedConcurrently TRUE RunnableEntity RequestRUN symbol EcuM_RequestRUN canbeInvokedConcurrently TRUE RunnableEntity ReleaseRUN symbol EcuM_ReleaseRUN canbeInvokedConcurrently TRUE RunnableEntity RequestPOSTRUN symbol EcuM_RequestPOST_RUN canbeInvokedConcurrently TRUE RunnableEntity ReleasePOSTRUN symbol EcuM_ReleasePOST_RUN canbeInvokedConcurrently TRUE Port present for each user. There are NU users SR000.RequestRUN - RequestRUN SR000.ReleaseRUN - ReleaseRUN SR000.RequestPOSTRUN - RequestPOSTRUN SR000.ReleasePOSTRUN - RequestPOSTRUN PortArgument portSR000, value.typeEcuM_UserType, value.valueEcuMUser0.User 92 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 (...) SRnnn.RequestRUN - RequestRUN SRnnn.ReleaseRUN - ReleaseRUN SRnnn.RequestPOSTRUN - RequestPOSTRUN SRnnn.ReleasePOSTRUN - RequestPOSTRUN PortArgument portSRnnn, value.typeEcuM_UserType, value.valueEcuMUsernnn.User shutDownTarget.SelectShutdownTarget - SelectShutdownTarget shutDownTarget.GetShutdownTarget - GetShutdownTarget shutDownTarget.GetLastShutdownTarget - GetLastShutdownTarget shutDownTarget.SelectShutdownCause - SelectShutdownCause shutDownTarget.GetShutdownCause - GetShutdownCause bootTarget.SelectBootTarget - SelectBootTarget bootTarget.GetBootTarget - GetBootTarget alarmClock.SetRelWakeupAlarm- SetRelWakeupAlarm alarmClock.SetAbsWakeupAlarm - SetAbsWakeupAlarm alarmClock.AbortWakeupAlarm - AbortWakeupAlarm alarmClock.GetCurrentTime - GetCurrentTime alarmClock.GetWakeupTime - GetWakeupTime alarmClock.SetClock - SetClock ; c() 7.10 EcuM Mode Handling The ECU State Manager provides interfaces for SW-Cs to request and release the modes RUN and POST_RUN optionally. EcuMFlex arbitrates the requests and releases made by SW-Cs and propagates the result to BswM. The cooperation between EcuM and BswM is necessary as only the BswM can decide when a transition to a different mode can be made. Due to the fact that the EcuM does not have an own state machine, the EcuM relies on the state transitions made by BswM. Therefore the EcuM does not request a state. Furthermore it notifies the BswM about the current arbitration of all requests. And the BswM is notified when the RTE has executed all Runnables belonging to a certain mode. ArchitecturalComponentsofECUModeHandling 93 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 Figure 7.35: Architectural Components of ECU Mode Handling Figure 7.35 illustrates the architectural components of ECU Mode Handling. SWS_EcuM_04115 dECU Mode Handling shall be applied when EcuMModeHan- dling is configured to true. c(SRS_ModeMgm_09116) SWS_EcuM_04116 dWhen the BswM sets a state of the EcuM by EcuM_SetState , the EcuM shall indicate the corresponding mode to the RTE. c(SRS_ModeMgm_09116) SWS_EcuM_04117 dWhen the last RUN request has been released, ECU State Manager module shall indicate this to BswM using the API BswM_EcuM_- RequestedState(ECUM_STATE_APP_RUN, ECUM_RUNSTATUS_RELEASED) .c (SRS_ModeMgm_09116) If a SW-C needs post run activity during POST_RUN (e.g. shutdown preparation), then it must request POST_RUN before releasing the RUN request. Otherwise it is not guaranteed that this SW-C will get a chance to run its POST_RUN code. SWS_EcuM_04118 dWhen the ECU State Manager is not in the state which is re- quested by a SWC, it shall inform BswM about requested states using the BswM_- EcuM_RequestedState API.c(SRS_ModeMgm_09116) POST_RUN state provides a post run phase for SW-Cs and allows them to save im- portant data or switch off peripherals. SWS_EcuM_04144 dWhen the first RUN or POST_RUN request has been received, ECU State Manager module shall indicate this to BswM using BswM_EcuM_Request- edState(ECUM_STATE_APP_RUN, ECUM_RUNSTATUS_REQUESTED) .c() SWS_EcuM_04119 dWhen the last POST_RUN request has been released, ECU State Manager module shall indicate this to BswM using the API BswM_EcuM_Re- questedState(ECUM_STATE_APP_POST_RUN, ECUM_RUNSTATUS_RELEASED) .c (SRS_ModeMgm_09116) 94 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 Hint: To prevent, that the mode machine instance of ECU Mode lags behind and the states EcuM and the RTE get out of phase, the EcuM can use acknowledgement feed- back for the mode switch notification. Note that EcuM only requests Modes from and to RUN and POST_RUN, the SLEEP Mode has to be set by BswM, as the EcuM has no information about when this Mode can be entered. State Description STARTUPInitial value. Set by Rte when Rte_Start() has been called. RUNAs soon as all necesseray BSW modules are inistialized, BswM switches to this Mode. POST_RUNEcuM requests POST_RUN, when no RUN requests are available. SLEEPEcuM requests SLEEP Mode when no RUN and POST_RUN requests are available and Shut- down Target is set to SLEEP . SHUTDOWNEcuM requests SHUTDOWN Mode when no RUN and POST_ RUN requests are available and Shutdown Target is set to SHUT - DOWN. Table 7.8: EcuM Modes SWS_EcuM_04143 dEcuM shall notify BswM about the current State by calling the in- terface BswM_EcuM_CurrentState(EcuM_StateType State) . A new state shall be set by EcuM when RTE has given its feedback via the acknowledgement port. c() 7.11 Advanced Topics 7.11.1 Relation to Bootloader The Bootloader is",
          "execution control and will carry out GO OFF II activities. Available via EcuM.h c(SRS_ModeMgm_09114) 106 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 8.3.3 State Management 8.3.3.1 EcuM_ SetState SWS_EcuM_04122 d Service Name EcuM_SetState Syntaxvoid EcuM_SetState ( EcuM_StateType state ) Service ID hex 0x2b SyncAsync Synchronous Reentrancy Reentrant Parameters (in) state State indicated by BswM. Parameters (inout) None Parameters (out) None Return value None Description Function called by BswM to notify about State Switch. Available via EcuM.h c() SWS_EcuM_04123 dThe EcuM_SetState function shall set the EcuM State to the value of the State parameter. If the State parameter is not a valid value, the EcuM_SetState function shall not change the State and if Development Error Reporting is turned on, the EcuM_SetState function shall additionally send an ECUM_E_STATE_PAR_OUT_OF_RANGE error message to the DET module.c(SRS_ModeMgm_09116) 8.3.3.2 EcuM_RequestRUN SWS_EcuM_04124 d Service Name EcuM_RequestRUN SyntaxStd_ReturnType EcuM_RequestRUN ( EcuM_UserType user ) Service ID hex 0x03 SyncAsync Synchronous Reentrancy Reentrant Parameters (in) user ID of the entity requesting the RUN state. Parameters (inout) None Parameters (out) None 5 107 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 4 Return value Std_ReturnType E_OK: The request was accepted by EcuM. E_NOT_OK: The request was not accepted by EcuM Description Places a request for the RUN state. Requests can be placed by every user made known to the state manager at configuration time. Available via EcuM.h c() SWS_EcuM_04125 dRequests of EcuM_RequestRUN cannot be nested, i.e. one user can only place one request but not more. Additional or duplicate user requests by the same user shall be reported to DET. Of course the DET will only be notified under development conditions. c(SRS_ModeMgm_09116) SWS_EcuM_04126 dAn implementation must track requests for each user known on the ECU. Run requests are specific to the user. c(SRS_ModeMgm_09116) SWS_EcuM_03024 dIf development error detection is enabled and there are multiple requests by the same user detected by EcuM_RequestRUN the function shall report ECUM_E_MULTIPLE_RUN_REQUESTS to Det.c() 8.3.3.3 EcuM_ReleaseRUN SWS_EcuM_04127 d Service Name EcuM_ReleaseRUN SyntaxStd_ReturnType EcuM_ReleaseRUN ( EcuM_UserType user ) Service ID hex 0x04 SyncAsync Synchronous Reentrancy Reentrant Parameters (in) user ID of the entity releasing the RUN state. Parameters (inout) None Parameters (out) None Return value Std_ReturnType E_OK: The release request was accepted by EcuM E_NOT_OK: The release request was not accepted by EcuM Description Releases a RUN request previously done with a call to EcuM_RequestRUN. The service is intended for implementing AUTOSAR ports. Available via EcuM.h c(SRS_ModeMgm_09116) SWS_EcuM_03023 dIf development error detection is enabled and EcuM_Re- leaseRUN did not find a previous matching request for the provided user, then the function shall report ECUM_E_MISMATCHED_RUN_RELEASE to Det.c() Configuration of EcuM_ReleaseRUN: Refer to EcuM_UserType for more information about user IDs and their generation. 108 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 8.3.3.4 EcuM_RequestPOST_RUN SWS_EcuM_04128 d Service Name EcuM_RequestPOST_RUN SyntaxStd_ReturnType EcuM_RequestPOST_RUN ( EcuM_UserType user ) Service ID hex 0x0a SyncAsync Synchronous Reentrancy Reentrant Parameters (in) user ID of the entity requesting the POST RUN state. Parameters (inout) None Parameters (out) None Return value Std_ReturnType E_OK: The request was accepted by EcuM E_NOT_OK: The request was not accepted by EcuM Description Places a request for the POST RUN state. Requests can be placed by every user made known to the state manager at configuration time. Requests for RUN and POST RUN must be tracked independently (in other words: two independent variables). The service is intended for implementing AUTOSAR ports. Available via EcuM.h c(SRS_ModeMgm_09116) SWS_EcuM_03025 dIf development error detection is enabled and there are multiple requests by the same user detected by EcuM_RequestPOST_RUN the function shall report ECUM_E_MULTIPLE_RUN_REQUESTS to Det.c() All requirements of 8.3.3.2 EcuM_RequestRUN apply accordingly to the function Ecu M_RequestPOST_RUN. Configuration of EcuM_RequestPOST_RUN: Refer to EcuM_UserType for more infor- mation about user IDs and their generation. 8.3.3.5 EcuM_ReleasePOST_RUN SWS_EcuM_04129 d Service Name EcuM_ReleasePOST_RUN SyntaxStd_ReturnType EcuM_ReleasePOST_RUN ( EcuM_UserType user ) Service ID hex 0x0b SyncAsync Synchronous Reentrancy Reentrant 5 109 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 4 Parameters (in) user ID of the entity releasing the POST RUN state. Parameters (inout) None Parameters (out) None Return value Std_ReturnType E_OK: The release request was accepted by EcuM E_NOT_OK: The release request was not accepted by EcuM Description Releases a POST RUN request previously done with a call to EcuM_RequestPOST_RUN. The service is intended for implementing AUTOSAR ports. Available via EcuM.h c(SRS_ModeMgm_09116) SWS_EcuM_03026 dIf development error detection is enabled and EcuM_Release- POST_RUN did not find a previous matching request for the provided user, then the function shall report ECUM_E_MISMATCHED_RUN_RELEASE to Det.c() Configuration of EcuM_ReleasePOST_RUN: Refer to EcuM_UserType for more infor- mation about user IDs and their generation. 8.3.4 Shutdown Management 8.3.4.1 EcuM_SelectShutdownTarget SWS_EcuM_02822 d Service Name EcuM_SelectShutdownTarget SyntaxStd_ReturnType EcuM_SelectShutdownTarget ( EcuM_ShutdownTargetType shutdownTarget, EcuM_ShutdownModeType shutdownMode ) Service ID hex 0x06 SyncAsync Synchronous Reentrancy Reentrant shutdownTarget The selected shutdown target. Parameters (in) shutdownMode The identfier of a sleep mode (if target is ECUM_SHUTDOWN_ TARGET_SLEEP) or a reset mechanism (if target is ECUM_ SHUTDOWN_TARGET_RESET) as defined by configuration. Parameters (inout) None Parameters (out) None Return value Std_ReturnType E_OK: The new shutdown target was set E_NOT_OK: The new shutdown target was not set Description EcuM_SelectShutdownTarget selects the shutdown target. EcuM_SelectShutdownTarget is part of the ECU Manager Module port interface. Available via EcuM.h c(SRS_ModeMgm_09114, SRS_ModeMgm_09128, SRS_ModeMgm_09235) 110 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 SWS_EcuM_00624 dThe EcuM_SelectShutdownTarget function shall set the shut- down target to the value of the shutdownTarget parameter. c(SRS_ModeMgm_09114, SRS_ModeMgm_09235) SWS_EcuM_02185 dThe parameter mode of the function EcuM_SelectShutdown Target shall be the identifier of a sleep or reset mode. The mode parameter shall only be used if the target parameter equals ECUM_SHUTDOWN_TARGET_SLEEP or ECUM_SHUTDOWN_TARGET_RESET. In all other cases, it shall be ignored. Only sleep or reset modes that are defined at configuration time and are stored in the Ecu MCommonConfiguration container (see ECUC_EcuM_00181) are allowed as parame- ters.c(SRS_ModeMgm_09114) SWS_EcuM_02585 dEcuM_SelectShutdownTarget shall not initiate any setup activi- ties but only store",
          "with the projects master plan that must occur for the treatment to be properly implemented Environmentinfrastructure: VDA Quality Management Center 103 WP ID WP Name WP Characteristics - describes any environmental or infrastructure requirements or impacts (e.g., safety or secur ity impacts that the treatment may have) Risk treatment plan change procedures and history 08-26 Documentation plan Identifies documents to be produced Defines the documentation activities during the life cycle of the software product or service Identifies any applicable standards and templates Defines requirements for documents Review and authorization practices Distribution of the documents Maintenance and disposal of the documents 08-27 Problem management plan Defines problem resolution activ ities including identification, recording, description and classification Problem resolution approach: evaluation and correction of the problem Defines problem tracking Mechanism to collect and distribute problem resolutions 08-28 Change management plan Defines change management activities including identification, recording, description, analysis and implementation Defines approach to track status of change requests Defines verification and validation activities Change approval and implication review 08-29 Improvement plan Improvement objectives derived from organizational business goals Organizational scope Process scope, the processes to be improved Key roles and responsibilities Appropriate milestones, review points and reporting mechanisms Activities to be performed to keep all those affected by the improvement program informed of progress 08-50 Test specification Test Design Specification Test Case Specification Test Procedure Specification Identification of test cases for regression testing Additi onally , for system integration: - identification of required system elements (hardware elements, wiring elements, settings for parameter s (such as application parameters or global variables ) , data bases, etc.) - necessary sequence or ordering identified for integrating the system elements 08-51 Technology monitoring plan No requirements additional to Plan (Generic) 08-52 Test plan Test Plan according to ISO29119 -3 Context : - projectTest sub -process - test item(s) - test scope - assumptions and constraints - stakeholder - testing communication Test strategy - identifies what needs there are to be satisfied VDA Quality Management Center 104 WP ID WP Name WP Characteristics - establishes the options and approach for satisfying the needs (black -box andor white -box-testing, boundary class test determination, regression testing strategy , etc.) - establishes the evaluation criteria against which the strategic options are evaluated - identifies any constraintsrisks and how these will be addressed - test design techniques - test completion criteria - test ending criteria - test start, abort and re -start criteria - metrics to be collected - test data requirements - retesting and regression testing - suspension and resumption criteria - deviations from the Organizational Test Strategy Test data requirements Test environment requirements Test sub -processes Test de liverables Testing activities and estimates 09-00 Policy Authorized Available to all personnel impacted by the policy Establishes practicesrules to be adhered to 09-03 Reuse policy Identification of reuse requirements Establishes the rules of reuse Documents the reuse adoption strategy including goals and objectives Identification of the reuse program Identification of the name of the reuse sponsor Identification of the reuse program participants Identification of the reuse steering function Identification of reuse program support functions 10-00 Process description A detailed description of the processprocedure which includes: - tailoring of the standard process (if applicable) - purpose of the process - outcomes of the process - task and activitie s to be performed and ordering of tasks - critical dependencies between task activities - expected time required to execute task - inputoutput work products - links between input and outputs work products Identifies process entry and exit criteria Identifies internal and external interfaces to the process Identifies process measures Identifies quality expectations Identifies functional roles and responsibilities Approved by authorized personnel 11-00 Product Is a resultdeliverable of the execution of a proce ss, includes services, systems (software and hardware) and processed materials Has elements that satisfy one or more aspects of a process purpose May be represented on various media (tangible and intangible) 11-03 Product release information Coverage for key elements (as appropriate to the application): Description of what is new or changed (including features removed) System information and requirements VDA Quality Management Center 105 WP ID WP Name WP Characteristics Identification of conversion programs and instructions Release numbering implementation may include: - the major release number - the feature release number - the defect repair number - the alpha or beta release; and the iteration within the alpha or beta release Identification of the component list (version identification included): - hardware software product elements, libraries, etc. - associated documentation list Newchanged parameter information ( e.g. for application parameters or global variables ) andor commands Backup and recovery information List of open known problems, faults, warning information, etc. Identification of verification and diagnostic procedures Technical support information Copyright and license information The release note may include an introduction, the environmental requirements, installation procedures, product invocation, new feature identification and a list of defect resolutions, known defects and workarounds 11-04 Product release package Includes the hardwaresoftwareproduct Includes and associated release elements such as: - system hardwaresoftwareproduct elements - associated customer documentation - application parameter definitions defined - command language defined - installation instructions - release letter 11-05 Software unit Follows established coding standards (as appropriate to the language and application): - commented - structured or optimized - meaningful naming conventions - parameter information identified - error codes defined - error messages descriptive and meaningful - formatting - indented, levels Follows data definition standards (as appropriate to the language and applica tion): - variables defined - data types defined - classes and inheritance structures defined - objects defined Entity relationships defined Database layouts are defined File structures and blocking are defined Data structures are defined Algorithms are defined Functional interfaces defined 11-06 System All elements of the product release are included Any required hardware Integrated product VDA Quality Management Center 106 WP ID WP Name WP Characteristics Customer documentation Fully configured set of the system elements: - application parameters defined - commands defined - data loaded or converted 11-07 Temporary solution Problem identification Release",
          "BSW_00348, SRS_BSW_00353, SRS_BSW_00361, SRS_BSW_00439, SRS_- BSW_00449, SRS_BSW_00308, SRS_BSW_00309, SRS_BSW_00330, SRS_- BSW_00010, SRS_BSW_00341, SRS_BSW_00334) 210 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager",
          "Slave Core GoSleep Sequencec () SWS_EcuM_04028 d 88 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 Integration Code module Wakeup Sourcemodule EcuMmodule McuPeripheral Wakeup Sourcemodule Osmodule :BswM HALT alt Validation Needed Yes NoMcu_SetMode()EcuM_SetWakeupEvent(EcuM_WakeupSourceType)Interrupt()Signal MasterCore that Slave is ready to sleep() Return from interrupt()EcuM_CheckWakeup(EcuM_WakeupSourceType) BswM_EcuM_CurrentState(ECUM_WKSTATUS_PENDING) Wait for MasterCore to continue()DisableAllInterrupts() BswM_EcuM_CurrentWakeup(Sources, ECUM_WKSTATUS_VALI DATED)Module_CheckWakeup() EnableAllInterrupts()Mcu_SetMode(Mcu_ModeType) Figure 7.32: Slave Core Halt Sequencec () SWS_EcuM_04029 d 89 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 module EcuMmodule Wakeup Sourcemodule McuIntegration Code module Osmodule BswM loop WHILE no pendingvalidated events loop FOR all wakeup sources that need polling opt Wakeup detected alt Yes No ! Mcu_SetMode(Mcu_ModeType) Wait for signal from MasterCore to continue()EcuM_SetWakeupEvent(EcuM_WakeupSourceType)Module_CheckWakeup() BswM_EcuM_CurrentWakeup(sources, ECUM_WKSTATUS_PEND ING)EcuM_GetPendingWakeupEvents(EcuM_WakeupSourceType)EnableAllInterrupts() EcuM_CheckWakeup(EcuM_WakeupSourceType)DisableAllInterrupts() BswM_EcuM_CurrentWakeup(sources, ECUM_WKSTATUS_VALI DATED)EcuM_SleepActivity() Figure 7.33: Slave Core Poll Sequencec () SWS_EcuM_04030 d 90 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 module Mcumodule Osmodule EcuMIntegration Code Mcu_SetMode(Mcu_ModeType)DisableAllInterrupts() ReleaseResource(RES_AUTOSAR_ECUM_core)EcuM_DisableWakeupSources(EcuM_WakeupSourceType)EnableAllInterrupts() Figure 7.34: Slave Core WakeupRestart Sequencec () 7.9.8 Runnables and Entry points 7.9.8.1 Internal behavior SWS_EcuM_03018 dThe definition of the internal behavior of the the ECU Manager module shall be as follows. This detailed description is only needed for the configura- tion of the local RTE. InternalBehavior EcuStateManager Runnable entities of the EcuStateManager RunnableEntity SelectShutdownTarget symbol EcuM_SelectShutdownTarget canbeInvokedConcurrently TRUE RunnableEntity GetShutdownTarget 91 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 symbol EcuM_GetShutdownTarget canbeInvokedConcurrently TRUE RunnableEntity GetLastShutdownTarget symbol EcuM_GetLastShutdownTarget canbeInvokedConcurrently TRUE RunnableEntity SelectShutdownCause symbol EcuM_SelectShutdownCause canbeInvokedConcurrently TRUE RunnableEntity GetShutdownCause symbol EcuM_GetShutdownCause canbeInvokedConcurrently TRUE RunnableEntity SelectBootTarget symbol EcuM_SelectBootTarget canbeInvokedConcurrently TRUE RunnableEntity GetBootTarget symbol EcuM_GetBootTarget canbeInvokedConcurrently TRUE RunnableEntity SetRelWakeupAlarm symbol EcuM_SetRelWakeupAlarm canbeInvokedConcurrently TRUE RunnableEntity SetAbsWakeupAlarm symbol EcuM_SetAbsWakeupAlarm canbeInvokedConcurrently TRUE RunnableEntity AbortWakeupAlarm symbol EcuM_AbortWakeupAlarm canbeInvokedConcurrently TRUE RunnableEntity GetCurrentTime symbol EcuM_GetCurrentTime canbeInvokedConcurrently TRUE RunnableEntity GetWakeupTime symbol EcuM_GetWakeupTime canbeInvokedConcurrently TRUE RunnableEntity SetClock symbol EcuM_SetClock canbeInvokedConcurrently TRUE RunnableEntity RequestRUN symbol EcuM_RequestRUN canbeInvokedConcurrently TRUE RunnableEntity ReleaseRUN symbol EcuM_ReleaseRUN canbeInvokedConcurrently TRUE RunnableEntity RequestPOSTRUN symbol EcuM_RequestPOST_RUN canbeInvokedConcurrently TRUE RunnableEntity ReleasePOSTRUN symbol EcuM_ReleasePOST_RUN canbeInvokedConcurrently TRUE Port present for each user. There are NU users SR000.RequestRUN - RequestRUN SR000.ReleaseRUN - ReleaseRUN SR000.RequestPOSTRUN - RequestPOSTRUN SR000.ReleasePOSTRUN - RequestPOSTRUN PortArgument portSR000, value.typeEcuM_UserType, value.valueEcuMUser0.User 92 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 (...) SRnnn.RequestRUN - RequestRUN SRnnn.ReleaseRUN - ReleaseRUN SRnnn.RequestPOSTRUN - RequestPOSTRUN SRnnn.ReleasePOSTRUN - RequestPOSTRUN PortArgument portSRnnn, value.typeEcuM_UserType, value.valueEcuMUsernnn.User shutDownTarget.SelectShutdownTarget - SelectShutdownTarget shutDownTarget.GetShutdownTarget - GetShutdownTarget shutDownTarget.GetLastShutdownTarget - GetLastShutdownTarget shutDownTarget.SelectShutdownCause - SelectShutdownCause shutDownTarget.GetShutdownCause - GetShutdownCause bootTarget.SelectBootTarget - SelectBootTarget bootTarget.GetBootTarget - GetBootTarget alarmClock.SetRelWakeupAlarm- SetRelWakeupAlarm alarmClock.SetAbsWakeupAlarm - SetAbsWakeupAlarm alarmClock.AbortWakeupAlarm - AbortWakeupAlarm alarmClock.GetCurrentTime - GetCurrentTime alarmClock.GetWakeupTime - GetWakeupTime alarmClock.SetClock - SetClock ; c() 7.10 EcuM Mode Handling The ECU State Manager provides interfaces for SW-Cs to request and release the modes RUN and POST_RUN optionally. EcuMFlex arbitrates the requests and releases made by SW-Cs and propagates the result to BswM. The cooperation between EcuM and BswM is necessary as only the BswM can decide when a transition to a different mode can be made. Due to the fact that the EcuM does not have an own state machine, the EcuM relies on the state transitions made by BswM. Therefore the EcuM does not request a state. Furthermore it notifies the BswM about the current arbitration of all requests. And the BswM is notified when the RTE has executed all Runnables belonging to a certain mode. ArchitecturalComponentsofECUModeHandling 93 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 Figure 7.35: Architectural Components of ECU Mode Handling Figure 7.35 illustrates the architectural components of ECU Mode Handling. SWS_EcuM_04115 dECU Mode Handling shall be applied when EcuMModeHan- dling is configured to true. c(SRS_ModeMgm_09116) SWS_EcuM_04116 dWhen the BswM sets a state of the EcuM by EcuM_SetState , the EcuM shall indicate the corresponding mode to the RTE. c(SRS_ModeMgm_09116) SWS_EcuM_04117 dWhen the last RUN request has been released, ECU State Manager module shall indicate this to BswM using the API BswM_EcuM_- RequestedState(ECUM_STATE_APP_RUN, ECUM_RUNSTATUS_RELEASED) .c (SRS_ModeMgm_09116) If a SW-C needs post run activity during POST_RUN (e.g. shutdown preparation), then it must request POST_RUN before releasing the RUN request. Otherwise it is not guaranteed that this SW-C will get a chance to run its POST_RUN code. SWS_EcuM_04118 dWhen the ECU State Manager is not in the state which is re- quested by a SWC, it shall inform BswM about requested states using the BswM_- EcuM_RequestedState API.c(SRS_ModeMgm_09116) POST_RUN state provides a post run phase for SW-Cs and allows them to save im- portant data or switch off peripherals. SWS_EcuM_04144 dWhen the first RUN or POST_RUN request has been received, ECU State Manager module shall indicate this to BswM using BswM_EcuM_Request- edState(ECUM_STATE_APP_RUN, ECUM_RUNSTATUS_REQUESTED) .c() SWS_EcuM_04119 dWhen the last POST_RUN request has been released, ECU State Manager module shall indicate this to BswM using the API BswM_EcuM_Re- questedState(ECUM_STATE_APP_POST_RUN, ECUM_RUNSTATUS_RELEASED) .c (SRS_ModeMgm_09116) 94 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 Hint: To prevent, that the mode machine instance of ECU Mode lags behind and the states EcuM and the RTE get out of phase, the EcuM can use acknowledgement feed- back for the mode switch notification. Note that EcuM only requests Modes from and to RUN and POST_RUN, the SLEEP Mode has to be set by BswM, as the EcuM has no information about when this Mode can be entered. State Description STARTUPInitial value. Set by Rte when Rte_Start() has been called. RUNAs soon as all necesseray BSW modules are inistialized, BswM switches to this Mode. POST_RUNEcuM requests POST_RUN, when no RUN requests are available. SLEEPEcuM requests SLEEP Mode when no RUN and POST_RUN requests are available and Shut- down Target is set to SLEEP . SHUTDOWNEcuM requests SHUTDOWN Mode when no RUN and POST_ RUN requests are available and Shutdown Target is set to SHUT - DOWN. Table 7.8: EcuM Modes SWS_EcuM_04143 dEcuM shall notify BswM about the current State by calling the in- terface BswM_EcuM_CurrentState(EcuM_StateType State) . A new state shall be set by EcuM when RTE has given its feedback via the acknowledgement port. c() 7.11 Advanced Topics 7.11.1 Relation to Bootloader The Bootloader is",
          "Specification of ECU State Manager AUTOSAR CP R20-11 Document TitleSpecification of ECU State Manager Document Owner AUTOSAR Document Responsibility AUTOSAR Document Identification No 78 Document Status published Part of AUTOSAR Standard Classic Platform Part of Standard Release R20-11 Document Change History Date Release Changed by Description 2020-11-30 R20-11AUTOSAR Release ManagementCorrected broken chapter structure EcuM_UserType handling improved Minor content changes, clarifications (multi-core, configuration, values) 2019-11-28 R19-11AUTOSAR Release ManagementNo content changes Changed Document Status from Final to published 2018-10-31 4.4.0AUTOSAR Release ManagementReworked BswM interface through EcuM_GoDownHaltPoll Removed EcuM fixed version references 2017-12-08 4.3.1AUTOSAR Release ManagementAdapt API Can_CheckWakeup Removed ConfigPtr parameter Removed Default error Removed unused DIO driver EcuM AUTOSAR service configure on service partition only 2016-11-30 4.3.0AUTOSAR Release ManagementPartial Network Cluster Support Initialization BSW scheduler slipt Added a driver initialization list Removed EcuM_StateType 1 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 2015-07-31 4.2.2AUTOSAR Release ManagementReworked slave core poll sequence Reviewed multicore shutdown synchronization Reclassified error types Editorial changes 2014-10-31 4.2.1AUTOSAR Release ManagementAdded switch configuration Defined initialization order for InitListZeroInitListOne Definition of the name pattern of c-init-data struct corrected Type conflicts solved Editorial changes 2014-03-31 4.1.3AUTOSAR Release ManagementEcuM errors reworked Inconsistencies between APIs and Interfaces resolved Type conflicts solved Editorial changes 2013-10-31 4.1.2AUTOSAR Release ManagementAdded API table for service interfaces Fixed traceability topics General clean-up of requirements (reviewed different interfaces, operations, descriptions and figures). Editorial changes 2 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 2013-03-15 4.1.1AUTOSAR AdministrationSpecified reset mode to use in case of pending wakeup events during shutdown Added callout for Reset Loop Detection Extended specification of parameter time of function EcuM_GetMostRecentShutdown Improved configuration description Added new APIs to enable asynchronous Trcv handling for CANFR Wakeup Adaption of EcuM Flex to support BSW modules distributed over multiple partitions Reclassified which Production Errors are Extended Production Errors Added possible error to operations of ClientServer-Interfaces, where no errors where defined Enhancement of configuration to initialize BSW modules by the EcuM Flex 2011-12-22 4.0.3AUTOSAR AdministrationFixed interoperability problems between EcuM and BswM Terminology of ECU State Manager Flexible more consistently described Modification of sleep sequences to minimize misses of wakeup interrupts 2010-09-30 3.1.5AUTOSAR AdministrationUpdated pseudo code for AUTOSAR Services Update startup procedure for multi core systems 2010-02-02 3.1.4AUTOSAR AdministrationRemoved state machine to accommodate mode-dependent scheduling Added Multi-Core support Added Alarm Clock feature Revised disclaimer 2008-08-13 3.1.1AUTOSAR AdministrationLegal disclaimer revised 3 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 2007-12-21 3.0.1AUTOSAR AdministrationFixed Wakeup mechanisms Included optional triggering of Watchdog Manager during Startup, Shutdown, and Sleep Extended startup sequence to have more flexibility and to directly initialize all other BSW modules Generated APIs from BSW UML model Generated configuration from Meta Model Document meta information extended Small layout adaptations made 2007-01-24 2.1.15AUTOSAR AdministrationCorrected startup flow and wakeup concept. Added specification for AUTOSAR ports. Modified configuration for compliance with variant management. Added new API services. Legal disclaimer revised Release Notes added Advice for users revised Revision Information added 2006-05-16 2.0AUTOSAR Administration Initial Release 4 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 Disclaimer This work (specification andor software implementation) and the material contained in it, as released by AUTOSAR, is for the purpose of information only. AUTOSAR and the companies that have contributed to it shall not be liable for any use of the work. The material contained in this work is protected by copyright and other types of intel- lectual property rights. The commercial exploitation of the material contained in this work requires a license to such intellectual property rights. This work may be utilized or reproduced without any modification, in any form or by any means, for informational purposes only. For any other purpose, no part of the work may be utilized or reproduced, in any form or by any means, without permission in writing from the publisher. The work has been developed for automotive applications only. It has neither been developed, nor tested for non-automotive applications. The word AUTOSAR and the AUTOSAR logo are registered trademarks. 5 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 Table of Contents 1 Introduction and Functional Overview 13 1.1 Backwards Compatibility to Previous ECU Manager Module Versions . 14 2 Definitions and Abbreviations 15 2.1 Definitions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 15 2.2 Abbreviations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 15 3 Related documentation 17 3.1 Input documents related standards and norms . . . . . . . . . . . . 17 3.2 Related specification . . . . . . . . . . . . . . . . . . . . . . . . . . . . 17 4 Constraints and Assumptions 18 4.1 Limitations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 18 4.2 Hardware Requirements . . . . . . . . . . . . . . . . . . . . . . . . . . 18 4.3 Applicability to car domains . . . . . . . . . . . . . . . . . . . . . . . . 18 5 Dependencies to other modules 19 5.1 SPAL Modules . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 19 5.1.1 MCU Driver . . . . . . . . . .",
          "Operation successful Possible Errors 1 E_NOT_OK Operation failed Operation ReleasePOSTRUN Comment Variation Possible Errors E_OK E_NOT_OK Operation ReleaseRUN Comment Variation Possible Errors E_OK E_NOT_OK Operation RequestPOSTRUN Comment Variation Possible Errors E_OK E_NOT_OK 149 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 Operation RequestRUN Comment Variation Possible Errors E_OK E_NOT_OK c() 8.8.6 Port Interface for EcuM_CurrentMode Interface 8.8.6.1 General Approach SWS_EcuM_04132 dThe mode port of the ECU State Manager module shall declare the following modes: STARTUP RUN POST_RUN SLEEP SHUTDOWN c(SRS_ModeMgm_09116) This definition is a simplified view of ECU Modes that applications do need to know. It does not restrict or limit in any way how application modes could be defined. Applica- tions modes are completely handled by the application itself. SWS_EcuM_04133 dMode changes shall be notified to SW-Cs through the RTE mode ports when the mode change occurs. This specification assumes that the port name is currentMode and that the direct API of RTE will be used. Under these conditions mode changes signaled by invoking Rte_StatusType Rte_Switch_currentMode_currentMode( Rte_ModeType_EcuM_Mode mode) where mode is the new mode to be notified. The value range is specified by the previ- ous requirement. The return value shall be ignored. A SW-C which wants to be notified of mode changes should require the mode switch interface EcuM_CurrentMode. c() 150 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 8.8.6.2 Data Types The mode declaration group EcuM_Mode represents the modes of the ECU State Manager module that will be notified to the SW-Cs. ModeDeclarationGroup EcuM_Mode STARTUP , RUN, POST_RUN, SLEEP , SHUTDOWN initialMode STARTUP ; SWS_EcuM_04107 d Name EcuM_Mode Kind ModeDeclarationGroup Category ALPHABETIC_ORDER Initial mode STARTUP On transition value POST_RUN RUN SHUTDOWN SLEEP Modes STARTUP Description c() 8.8.6.3 Service Interfaces SWS_EcuM_04108 d Name EcuM_CurrentMode Comment Interface to read the current ECU mode IsService true Variation ModeGroup currentMode EcuM_Mode c() 8.8.7 Definition of the ECU Manager Service This section provides guidance on the definition of the ECU Manager module Service. Note that these definitions can only be completed during ECU configuration (since certain ECU Manager module configuration parameters determine the number of ports 151 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 provided by the ECU Manager module service). Also note a SW-Cs implementation does not depend on these definitions. In an AUTOSAR system, there are ports both above and below the RTE. The ECU Manager module service description defines ports provided to the RTE and the de- scriptions of every SW-C that uses this service must contain service ports which required these ECU Manager module ports from the RTE. The EcuM provides the following ports: SWS_EcuM_04111 d Name ShutdownTarget_UserName Kind ProvidedPort Interface EcuM_ShutdownTarget Description Provides an interface to SW-Cs to select a new shutdown target and query the current shutdown target. Variation UserName ecuc(EcuMEcuMConfigurationEcuMFlexConfigurationEcuMFlexUserConfigEcu MFlexUser.SHORT -NAME) c() SWS_EcuM_04110 d Name BootTarget_UserName Kind ProvidedPort Interface EcuM_BootTarget Description Provides an interface to SW-Cs to select a new boot target and query the current boot target. Variation UserName ecuc(EcuMEcuMConfigurationEcuMFlexConfigurationEcuMFlexUserConfigEcu MFlexUser.SHORT -NAME) c() SWS_EcuM_03017 d Name AlarmClock_UserName Kind ProvidedPort Interface EcuM_AlarmClock Description Provides to SW-Cs an alarm clock. The EcuM_AlarmClock port uses port-defined argument values to identify the user that manages its alarm clock. Type EcuM_UserType Port Defined Argument Value(s)Value ecuc(EcuMEcuMConfigurationEcuMFlexConfigurationEcuMFlexUser ConfigEcuMFlexUser.value) Variation ecuc(EcuMEcuMFlexGeneralEcuMAlarmClockPresent) true UserName ecuc(EcuMEcuMConfigurationEcuMFlexConfigurationEcuMAlarm Clock.SHORT -NAME) c() SWS_EcuM_04113 d 152 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 Name time Kind ProvidedPort Interface EcuM_Time Description Provides the EcuMs time service to SWCs Variation c() SWS_EcuM_04135 d Name StateRequest_UserName Kind ProvidedPort Interface EcuM_StateRequest Description Provides an interface to SW-Cs to request state changes of the ECU state. The port uses port-defined argument values to identify the user. Type EcuM_UserType Port Defined Argument Value(s)Value ecuc(EcuMEcuMConfigurationEcuMFlexConfigurationEcuMFlexUser ConfigEcuMFlexUser.value) Variation UserName ecuc(EcuMEcuMConfigurationEcuMFlexConfigurationEcuMFlexUserConfigEcu MFlexUser.SHORT -NAME) c() SWS_EcuM_04112 d Name currentMode Kind ProvidedPort Interface EcuM_CurrentMode Description Variation c() The EcuM provides the following types: SWS_EcuM_91004 d Name EcuM_UserType Kind Type Derived from uint8 Description Unique value for each user. Variation Available via Rte_EcuM_Type.h c() SWS_EcuM_04102 d 153 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 Name EcuM_TimeType Kind Type Derived from uint32 Description This data type represents the time of the ECU Manager module. Variation Available via Rte_EcuM_Type.h c() d Name EcuM_BootTargetType Kind Type Derived from uint8 ECUM_BOOT_TARGET_APP 0 The ECU will boot into the application ECUM_BOOT_TARGET_OEM_ BOOTLOADER1 The ECU will boot into the OEM bootloaderRange ECUM_BOOT_TARGET_SYS_ BOOTLOADER2 The ECU will boot into the system supplier bootloader Description This type represents the boot targets the ECU Manager module can be configured with. The default boot target is ECUM_BOOT_TARGET_OEM_BOOTLOADER. Variation Available via Rte_EcuM_Type.h c() SWS_EcuM_04045 d Name EcuM_ShutdownCauseType Kind Type Derived from uint8 ECUM_CAUSE_UNKNOWN 0 No cause was set. ECUM_CAUSE_ECU_STATE 1 ECU state machine entered a state for shutdown ECUM_CAUSE_WDGM 2 Watchdog Manager detected a failureRange ECUM_CAUSE_DCM 3 Diagnostic Communication Manager requests a shutdown due to a service request Description This type describes the cause for a shutdown by the ECU State Manager. It can be extended by configuration. Variation Available via Rte_EcuM_Type.h c() SWS_EcuM_04101 d 154 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 Name EcuM_ShutdownModeType Kind Type Derived from uint16 ecuc(EcuMEcuMConfiguration EcuMFlexConfigurationEcu MResetMode.SHORT -NAME)256 ecuc(EcuMEcu MConfigurationEcu MFlexConfiguration EcuMResetMode.Ecu MResetModeId)Configured Reset Modes Range ecuc(EcuMEcuMConfiguration EcuMCommonConfigurationEcu MSleepMode.SHORT -NAME)ecuc(EcuM Ecu MConfigurationEcu MCommon ConfigurationEcu MSleepMode.Ecu MSleepModeId)Configured Sleep Modes Description This data type represents the modes of the ECU Manager module. Variation Available via Rte_EcuM_Type.h c() SWS_EcuM_04136 d Name EcuM_ShutdownTargetType Kind Type Derived from uint8 ECUM_SHUTDOWN_TARGET_ SLEEP0x0 ECUM_SHUTDOWN_TARGET_ RESET0x1 Range ECUM_SHUTDOWN_TARGET_ OFF0x2 Description Variation Available via Rte_EcuM_Type.h c() SWS_EcuM_04094 dIn the case of a MultiCore ECU, the EcuM AUTOSAR service (Standardized AUTOSAR Interfaces) may be offered on one or more cores. c() Although the EcuM service interfaces are available on every core (see section 7.9 Multi Core for details), the EcuC allows the provided ports to be bound to the interface on a particular partition, and therefore to a particular core (see the Specification",
          "execution control and will carry out GO OFF II activities. Available via EcuM.h c(SRS_ModeMgm_09114) 106 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 8.3.3 State Management 8.3.3.1 EcuM_ SetState SWS_EcuM_04122 d Service Name EcuM_SetState Syntaxvoid EcuM_SetState ( EcuM_StateType state ) Service ID hex 0x2b SyncAsync Synchronous Reentrancy Reentrant Parameters (in) state State indicated by BswM. Parameters (inout) None Parameters (out) None Return value None Description Function called by BswM to notify about State Switch. Available via EcuM.h c() SWS_EcuM_04123 dThe EcuM_SetState function shall set the EcuM State to the value of the State parameter. If the State parameter is not a valid value, the EcuM_SetState function shall not change the State and if Development Error Reporting is turned on, the EcuM_SetState function shall additionally send an ECUM_E_STATE_PAR_OUT_OF_RANGE error message to the DET module.c(SRS_ModeMgm_09116) 8.3.3.2 EcuM_RequestRUN SWS_EcuM_04124 d Service Name EcuM_RequestRUN SyntaxStd_ReturnType EcuM_RequestRUN ( EcuM_UserType user ) Service ID hex 0x03 SyncAsync Synchronous Reentrancy Reentrant Parameters (in) user ID of the entity requesting the RUN state. Parameters (inout) None Parameters (out) None 5 107 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 4 Return value Std_ReturnType E_OK: The request was accepted by EcuM. E_NOT_OK: The request was not accepted by EcuM Description Places a request for the RUN state. Requests can be placed by every user made known to the state manager at configuration time. Available via EcuM.h c() SWS_EcuM_04125 dRequests of EcuM_RequestRUN cannot be nested, i.e. one user can only place one request but not more. Additional or duplicate user requests by the same user shall be reported to DET. Of course the DET will only be notified under development conditions. c(SRS_ModeMgm_09116) SWS_EcuM_04126 dAn implementation must track requests for each user known on the ECU. Run requests are specific to the user. c(SRS_ModeMgm_09116) SWS_EcuM_03024 dIf development error detection is enabled and there are multiple requests by the same user detected by EcuM_RequestRUN the function shall report ECUM_E_MULTIPLE_RUN_REQUESTS to Det.c() 8.3.3.3 EcuM_ReleaseRUN SWS_EcuM_04127 d Service Name EcuM_ReleaseRUN SyntaxStd_ReturnType EcuM_ReleaseRUN ( EcuM_UserType user ) Service ID hex 0x04 SyncAsync Synchronous Reentrancy Reentrant Parameters (in) user ID of the entity releasing the RUN state. Parameters (inout) None Parameters (out) None Return value Std_ReturnType E_OK: The release request was accepted by EcuM E_NOT_OK: The release request was not accepted by EcuM Description Releases a RUN request previously done with a call to EcuM_RequestRUN. The service is intended for implementing AUTOSAR ports. Available via EcuM.h c(SRS_ModeMgm_09116) SWS_EcuM_03023 dIf development error detection is enabled and EcuM_Re- leaseRUN did not find a previous matching request for the provided user, then the function shall report ECUM_E_MISMATCHED_RUN_RELEASE to Det.c() Configuration of EcuM_ReleaseRUN: Refer to EcuM_UserType for more information about user IDs and their generation. 108 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 8.3.3.4 EcuM_RequestPOST_RUN SWS_EcuM_04128 d Service Name EcuM_RequestPOST_RUN SyntaxStd_ReturnType EcuM_RequestPOST_RUN ( EcuM_UserType user ) Service ID hex 0x0a SyncAsync Synchronous Reentrancy Reentrant Parameters (in) user ID of the entity requesting the POST RUN state. Parameters (inout) None Parameters (out) None Return value Std_ReturnType E_OK: The request was accepted by EcuM E_NOT_OK: The request was not accepted by EcuM Description Places a request for the POST RUN state. Requests can be placed by every user made known to the state manager at configuration time. Requests for RUN and POST RUN must be tracked independently (in other words: two independent variables). The service is intended for implementing AUTOSAR ports. Available via EcuM.h c(SRS_ModeMgm_09116) SWS_EcuM_03025 dIf development error detection is enabled and there are multiple requests by the same user detected by EcuM_RequestPOST_RUN the function shall report ECUM_E_MULTIPLE_RUN_REQUESTS to Det.c() All requirements of 8.3.3.2 EcuM_RequestRUN apply accordingly to the function Ecu M_RequestPOST_RUN. Configuration of EcuM_RequestPOST_RUN: Refer to EcuM_UserType for more infor- mation about user IDs and their generation. 8.3.3.5 EcuM_ReleasePOST_RUN SWS_EcuM_04129 d Service Name EcuM_ReleasePOST_RUN SyntaxStd_ReturnType EcuM_ReleasePOST_RUN ( EcuM_UserType user ) Service ID hex 0x0b SyncAsync Synchronous Reentrancy Reentrant 5 109 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 4 Parameters (in) user ID of the entity releasing the POST RUN state. Parameters (inout) None Parameters (out) None Return value Std_ReturnType E_OK: The release request was accepted by EcuM E_NOT_OK: The release request was not accepted by EcuM Description Releases a POST RUN request previously done with a call to EcuM_RequestPOST_RUN. The service is intended for implementing AUTOSAR ports. Available via EcuM.h c(SRS_ModeMgm_09116) SWS_EcuM_03026 dIf development error detection is enabled and EcuM_Release- POST_RUN did not find a previous matching request for the provided user, then the function shall report ECUM_E_MISMATCHED_RUN_RELEASE to Det.c() Configuration of EcuM_ReleasePOST_RUN: Refer to EcuM_UserType for more infor- mation about user IDs and their generation. 8.3.4 Shutdown Management 8.3.4.1 EcuM_SelectShutdownTarget SWS_EcuM_02822 d Service Name EcuM_SelectShutdownTarget SyntaxStd_ReturnType EcuM_SelectShutdownTarget ( EcuM_ShutdownTargetType shutdownTarget, EcuM_ShutdownModeType shutdownMode ) Service ID hex 0x06 SyncAsync Synchronous Reentrancy Reentrant shutdownTarget The selected shutdown target. Parameters (in) shutdownMode The identfier of a sleep mode (if target is ECUM_SHUTDOWN_ TARGET_SLEEP) or a reset mechanism (if target is ECUM_ SHUTDOWN_TARGET_RESET) as defined by configuration. Parameters (inout) None Parameters (out) None Return value Std_ReturnType E_OK: The new shutdown target was set E_NOT_OK: The new shutdown target was not set Description EcuM_SelectShutdownTarget selects the shutdown target. EcuM_SelectShutdownTarget is part of the ECU Manager Module port interface. Available via EcuM.h c(SRS_ModeMgm_09114, SRS_ModeMgm_09128, SRS_ModeMgm_09235) 110 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 SWS_EcuM_00624 dThe EcuM_SelectShutdownTarget function shall set the shut- down target to the value of the shutdownTarget parameter. c(SRS_ModeMgm_09114, SRS_ModeMgm_09235) SWS_EcuM_02185 dThe parameter mode of the function EcuM_SelectShutdown Target shall be the identifier of a sleep or reset mode. The mode parameter shall only be used if the target parameter equals ECUM_SHUTDOWN_TARGET_SLEEP or ECUM_SHUTDOWN_TARGET_RESET. In all other cases, it shall be ignored. Only sleep or reset modes that are defined at configuration time and are stored in the Ecu MCommonConfiguration container (see ECUC_EcuM_00181) are allowed as parame- ters.c(SRS_ModeMgm_09114) SWS_EcuM_02585 dEcuM_SelectShutdownTarget shall not initiate any setup activi- ties but only store"
        ],
        "relevant_ids": [
          "chunk_0",
          "chunk_1",
          "chunk_5"
        ],
        "groundedness": 0.8,
        "hallucination_rate": 0.1
      },
      {
        "query": "What are the key processes in Automotive SPICE?",
        "retrieved_ids": [
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null
        ],
        "retrieved_contents": [
          "Quality Management in the Automotive Industry Automotive SPICE Process Reference Model Process Assessment Model Version 3. 1 Title: Automotive SPICE Process Assessment Reference Model Author(s): VDA QMC Working Group 13 Automotive SIG Version: 3.1 Date: 2017-11-01 Status: PUBLISHED Confidentiality: Public Revision ID: 656 VDA Quality Management Center 2 Copyright n otice This document is a revision of the Automotive SPICE process assessment model 2.5 and the process reference model 4.5, which has been developed under the Automotive SPICE initiative by consensus of the car manufacturers within the Automotive Special Interest Group (SIG), a joint special interest group of Automotive OEM, the Procurement Forum and t he SPICE User Group. It has been revised by the Working Group 13 of the Quality Management Center (QMC) in the German Association of the Automotive Industry with the representation of members of the Automotive Specia l Interest Group, and with the agreement of the SPICE User Group. This agreement is based on a validation of the Automotive SPICE 3.0 version regarding any ISO copyright infringement and the st atements given from VDA QMC to t he S PICE User Group regarding t he current and future development of Automotive SPICE. This document reproduces relevant material from: ISOIEC 33020:2015 Information technology -- Process assessment -- Process measurement framework for assessment of process capability ISOIEC 33020 :2015 provides the following copyright release statement : Users of this International Standard may reproduce subclauses 5.2, 5.3, 5.4 and 5.6 as part of any process assessment model or maturity model so that it can be used for its intended purpose. ISOIEC 1 5504 -5:2006 Information Technology Process assessment Part 5: An exemplar Process Assessment Model ISOIEC 15504 -5:2006 provides the following copyright release statement : Users of this part of ISOIEC 15504 may freely reproduce the detailed descri ptions contained in the exemplar assessment model as part of any tool or other material to support the performance of process assessments, so that it can be used for its intended purpose. Relevant material from one of the mentioned standards is incorporated under the copyright release notice . Acknowledgemen t The VDA, the VDA QMC and the Working Group 13 explicitly acknowledge the high quality work carried out by the members of the Automoti ve Special Interest Group. We would like to thank all involved people, who have contributed to the development and publication of Automotive SPICE. VDA Quality Management Center 3 Derivative w orks You may not alter, transform, or build upon this work without the prior consent of both the SPICE User Group and the VDA Quality Management Center . Such consent may be given provided ISO copyright is not infringed. The detailed descriptions contained in this document may be incorporated as part of any tool or other material to support the perf ormance of process assessments, so that this process assessment model can be used for its intended purpose, provided that any such material is not offered for sale. All distribution of derivative works shall be made at no cost to the recipient. Distribution The Automotive SPICE process a ssessment model may only be obtained by download from the www.automotivespice.com web site. It is not permitted for the recipient to further distribute the document. Change r equests Any problems or change requests should be reported through the defined mechanism at the www.automotivespice.com web site. Trademark Automotive SPICE is a registered trademark of the Verband der Automobilindustrie e.V. (VDA) For further information about Automotive SPICE visit www.automotivespice.com . VDA Quality Management Center 4 Document history Version Date By Notes 2.0 2005 -05-04 AutoSIG SUG DRAFT RELEASE, pending final editorial review 2.1 2005 -06-24 AutoSIG SUG Editorial review comments implemented Updated to reflect changes in FDIS 15504 -5 2.2 2005 -08-21 AutoSIG SUG Final checks implemented: FORMAL RELEASE 2.3 2007 -05-05 AutoSIG SUG Revision following CCB: FORMAL RELEASE 2.4 2008 -08-01 AutoSIG SUG Revision following CCB: FORMAL RELEASE 2.5 2010 -05-10 AutoSIG SUG Revision following CCB: FORMAL RELEASE 3.0 2015 -07-16 VDA QMC WG13 Changes: See release notes 3.1 2017-11-01 VDA QMC WG13 Changes: See www.automotivespice.com Release n otes Version 3.0 of the process assessment model incorporates the following major changes : Chapter 1 Editorial adaption to ISOIEC 330xx series, Notes regarding combined PRMPAM in this document Chapter 2 Adaption to ISOIEC 330xx series Chapter 3 Text optimized for better understanding and adapted to ISOIEC 330xx series . Chapter 4 Renaming ENG to SYS SWE, Structure of old ENG Processes changed, Rework of AS 4.5 process reference model and AS 2.5 process performance indicators focusing on a set of highly significant processes assessed within the automotive industry ( VDA Scope). Chapter 5 Adaption based on AS 2.5 to the measurement f ramework of ISOIEC 33020 Annex A Conformity statement adapted to ISOIEC 33004 Annex B Modifications on work produ ct characteristics according to the changes in chapter 4. Annex C Update to recent standards. Introduction of specific terms used in AS 3.0 Annex D Added the major concepts used for AS 3.0 , incorporated Annex E of AS 2.5 Annex E Updated references to other standards Version 3.1 of the process assessment model incorporates minor changes. Please refer to www.automotivespice.com for a detailed change log. VDA Quality Management Center 5 Table of contents Copyright notice ................................ ................................ ................................ .............................. 2 Acknowledgement ................................ ................................ ................................ ........................... 2 Derivative works ................................ ................................ ................................ .............................. 3 Distribution ................................ ................................ ................................ ................................ ...... 3 Change requests ................................ ................................ ................................ ............................. 3 Trademark ................................ ................................ ................................ ................................ ...... 3 Document history ................................ ................................ ................................ ............................ 4 Release notes ................................ ................................ ................................ ................................ . 4 Table of contents ................................ ................................ ................................ ............................ 5 List of Figures ................................ ................................ ................................ ................................ . 7 List of Tables ................................ ................................ ................................ ................................ .. 7 1. Introduction ................................ ................................ ................................ .............................. 8 1.1. Scope ................................ ................................ ................................ .............................. 8 1.2. Terminology ................................ ................................ ................................ ..................... 9 1.3. Abbrevi ations ................................ ................................ ................................ ................... 9 2. Statement of compliance ................................ ................................ ................................ .......... 9 3. Process capability determination ................................ ................................ ............................",
          "a process execution: - key elements to be represented in the work product VDA Quality Management Center 119 Annex C Terminology Annex C lists the applicable terminology references from ISOIECIEEE 24765 and ISOIECIEEE 29119. It also provide s terms which are specifically defined within Automotive SPICE. Some of these definitions are based on ISOIECIEEE 24765. Table C.1 Terminology Term Origin Description Acceptance testing ISOIECIEEE 24765 Formal testing conducted to enable a user, customer, or authorized entity to determine whether to accept a system or component. Application parameter Automotive SPICE V3.1 An application parameter is a parameter containing data applied to the system or software functions, behavior or properties. T he notion of application parameter is expressed in two ways: firstly, the logical specification (including name, description, unit, value domain or threshold values or characteristic curves, respectively), and, secondly, the actual quantitative data value it receives by means of data application. Architecture element Automotive SPICE V3.1 Result of the decomposition of the architecture on system and software level: The system is decomposed into elements of the system architecture across appropriate hierarchical levels. The software is decomposed into elements of the software architecture across appropriate hierarchical levels down to the software components (the lowest level elements of the software architecture). Baseline ISOIECIEEE 24765 A speci fication or product that has been formally reviewed and agreed upon, that thereafter serves as the basis for further development, and can be changed only through formal change control procedures. Black -box testing Automotive SPICE V3.1 Method of requireme nt testing where tests are developed without knowledge of the internal structure and mechanisms of the tested item. Code review Automotive SPICE V3.1 A check of the code by one or more qualified persons to determine its suitability for its intended use an d identify discrepancies from specifications and standards. Coding ISOIECIEEE 24765 The transforming of logic and data from design specifications (design descriptions) into programming language. Consistency Automotive SPICE V3.1 Consistency addresses content and semantics and ensures that work products are not in contradiction to each other. Consistency is supported by bidirectional traceability. Defect FAULT Dynamic analysis ISOIECIEEE 24765 A process of evaluating a system or component based on its behavior during execution. Element Automotive SPICE V3.1 Elements are all structural objects on architectural and design level on the left side of the V. Such elements can be further decomposed into more fine -grained sub -elements of the architecture or design across appropriate hierarchical levels. Error ISOIECIEEE 24765 The difference between a computed, observed, or measured value or condition and the true, specified, or theoretically correct value or condition. VDA Quality Management Center 120 Fault ISOIECIEEE 24765 A manifestation of an error in software. Functional requirement ISOIECIEEE 24765 A statement that identifies what a product or process must accomplish to produce required behavior andor results. Functional specification ISOIECIEEE 24765 A document that specifies the functions that a system or component must perform. Often part of a requirements specification. Functional testing ISOIECIEEE 24765 Testing conducted to evaluate the compliance of a system or component with specified functional requirements. Hardware ISOIECIEEE 24765 Physical equipment used to process, store, or transmit computer programs or data. Hardware item Automotive SPICE V3.1 A physical representation of a hardware element. Integration Automotive SPICE V3.1 A process of combining items to larger items up to an overall system. Integrated software item Automotive SPICE V3.1 A set of software units or items that are integrated into a larger assembly for the purpose of integration testing. Integration testing Automotive SPICE V3.1 Testing in which items (software items, hardware items, or system items) are combined and tested to evaluate the interaction among them. Integrated system item Automotive SPICE V3.1 A set of items that are integrated into a larger assembly for the purpose of integration testing. Quality assurance ISOIECIEEE 24765 A planned and systematic pattern of all actions necessary to provide adequate confidence that an item or product conforms to established technical requirements. Regress ion testing Automotive SPICE V3.1 Selective retesting of a system or item to verify that modifications have not caused unintended effects and that the system or item still complies with its specified requirements. Requirement Automotive SPICE V3.1 A prope rty or capability that must be achieved or possessed by a system, system item, product, or service to satisfy a contract, standard, specification or other formally imposed documents. Requirements specification Automotive SPICE V3.1 A document that specifies the requirements for a system or item. Typically included are functional requirements, performance requirements, interface requirements, design requirements, and development standards. Software ISOIECIEEE 24765 Computer programs, procedures, and possibly associated documentation and data pertaining to the operation of a computer system. Software component Automotive SPICE V3.1 In Automotive SPICE V3.1 the term software component is used for the lowest level elements of the software architec ture for which finally the detailed design is defined. A software component consists of one or more software units. ARCHITECTURE ELEMENT , UNIT Software element ARCHITECTURE ELEMENT Software item ISOIECIEEE 24765 Identifiable part of a software product. Software unit UNIT VDA Quality Management Center 121 Static analysis Automotive SPICE V3.1 A process of evaluating an item based on its form, structure, content, or documentation. System Automotive SPICE V3.1 A collection of interacting items organized to accompli sh a specific function or set of functions within a specific environment. System item Automotive SPICE V3.1 Identifiable part of the system. System test ISOIECIEEE 24765 Testing conducted on a complete, integrated system to evaluate the systems compliance with its specified requirements. Testing Automotive SPICE V3.1 Activity in which an item (system, hardware, or software) is exe cuted under specific conditions; and the results are recorded , summarized and communicated . Traceability ISOIECIEE E 24765 The degree to which a relationship can be established between two or more products of the development process, especially products having a predecessor -successor or master -subordinate relationship to one another. Unit Automotive SPICE V3.1 Part of a software component which is not further subdivided. SOFTWARE COMPONENT Unit test Automotive SPICE",
          "BSW_00348, SRS_BSW_00353, SRS_BSW_00361, SRS_BSW_00439, SRS_- BSW_00449, SRS_BSW_00308, SRS_BSW_00309, SRS_BSW_00330, SRS_- BSW_00010, SRS_BSW_00341, SRS_BSW_00334) 210 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager",
          "................................ ......................... 87 5.6. Process capability Level 5: Innovating process ................................ .............................. 88 5.6.1. PA 5.1 Process innovation process attribute ................................ .......................... 88 5.6.2. PA 5.2 Process innovation implementation proc ess attribute ................................ . 89 Annex A Conformity of the process assessment and reference model ................................ ..... 91 A.1 Introduction ................................ ................................ ................................ .................... 91 A.2 Conformance to the requirements for process reference models ................................ ... 91 A.3 Conformance to the requirements for process assessment models ............................... 92 Annex B Work product characteristics ................................ ................................ ...................... 94 Annex C Terminology ................................ ................................ ................................ ............. 119 VDA Quality Management Center 7 Annex D Key concepts ................................ ................................ ................................ ........... 122 D.1 The Plug -in concept ................................ ................................ ................................ .. 122 D.2 The Tip of the V ................................ ................................ ................................ ........ 123 D.3 Terms Element, Component, Unit, and Item ................................ ...................... 123 D.4 Traceability and consistency ................................ ................................ ........................ 124 D.5 Agree and Summarize and Communicate ................................ .............................. 125 D.6 Evaluate, Verification Criteria and Ensuring compliance ................................ ...... 125 D.7 The relation between Strategy and Plan ................................ ................................ . 126 Annex E Reference standards ................................ ................................ ............................... 128 List of Figures Figure 1 Process assessment model relationship ................................ ................................ ..... 11 Figure 2 Automotive SPICE process reference model - Overview ................................ ............ 12 Figure 3 Relationship between assessment indicators and process capability .......................... 22 Figure 4 Possible levels of abstraction for the term process ................................ ................... 23 Figure 5 Performing a process assessment for determining process capability ........................ 23 Figure D.1 The Plug -in concept ................................ ................................ ............................ 122 Figure D.2 The tip of the V ................................ ................................ ................................ ... 123 Figure D.3 Element, component, unit, and item ................................ ................................ ...... 123 Figure D.4 Bidirectional traceability and consistency ................................ .............................. 124 Figure D.5 Agree, summarize and communicate ................................ ................................ .... 125 Figure D.6 Evaluation, verification criteria and c ompliance ................................ ..................... 126 Figure D.7 Strategy and plan ................................ ................................ ................................ ... 127 List of Tables Table 1 Abbreviation List ................................ ................................ ................................ ............ 9 Table 2 Primary life cycle processes ACQ process group ................................ ...................... 13 Table 3 Primary life cycle processes SPL process group ................................ ....................... 13 Table 4 Primary life cycle process es SYS process group ................................ ...................... 13 Table 5 Primary life cycle processes SWE process group ................................ ..................... 14 Table 6 Supporting life cycle processes - SUP process group ................................ .................. 14 Table 7 Organizational life cycle processes - MAN process group ................................ ............ 14 Table 8 Organizational life cycle processes - PIM process group ................................ ............. 15 Table 9 Organizational life cycle processes - REU process group ................................ ............ 15 Table 10 Process cap ability levels according to ISOIEC 33020 ................................ ............... 16 Table 11 Process attributes according to ISOIEC 33020 ................................ ......................... 16 Table 12 Rating scale according to ISOIEC 33020 ................................ ................................ .. 17 Table 13 Rating scale percentage values according to ISOIEC 33020 ................................ .... 17 Table 14 Refinement of rating scale according to ISOIEC 33020 ................................ ............ 17 Table 15 Refined rat ing scale percentage values according to ISOIEC 33020 ........................ 18 Table 16 Process capability level model according to ISOIEC 33020 ................................ ...... 20 Table 17 Template for the process description ................................ ................................ ......... 24 Table B.1 Structure of WPC tables ................................ ................................ ........................... 94 Table B.2 Work product characteristi cs ................................ ................................ .................... 94 Table C.1 Terminology ................................ ................................ ................................ ........... 119 Table E.1 Reference standards ................................ ................................ .............................. 128 VDA Quality Management Center 8 1. Introduction 1.1. Scope Process assessment is a disciplined evaluation of an organizational units processes against a process assessment model . The Automotive SPICE process assessment model (PAM) is intended for use when performing conformant assessments of the process capability on the development of embedded automotive systems. It was developed in accordance with the requirements of ISOIEC 33004. Automotive SPICE has its own process refere nce model (PRM) , which was developed based on the Automotive SPICE process reference model 4.5 . It was further developed and tailored considering the specific needs of the automotive industry. If processes beyond the scope of Automotive SPICE are needed, a ppropriate processes from other process reference models such as ISOIEC 12207 or ISOIEC 15288 may be added based on the business needs of the organization . The PRM is incorporated in this document and is used in conjunction with the Automotive SPICE process assessment model when performing an assessment. This Automotive SPICE process assessment model contains a set of indicators to be considered when interpreting the intent of the Automotive SPICE process reference m odel. These indicators may also be used when implementing a process improvement program subsequent to an assessment. VDA Quality Management Center 9 1.2. Terminology Automotive SPICE follows the following preceden ce for use of terminology: a) ISOIEC 33001 for assessment related terminology b) ISOIECIEEE 24765 and ISOIECIEEE 29119 terminology (as contained in Annex C) c) Terms introduced by Automotive SPICE (as contained in Annex C) 1.3. Abbreviations AS Automotive SPICE BP Base Practice CAN Controller Area Network CASE Computer -Aided Software Engineering, CCB Change Control Board CFP Call For Proposals CPU Central Processing Unit ECU Electronic Control Unit EEPROM Electrically Erasable Programmable Read-Only Memory GP Generic Practice GR Generic Resource IEC International Electrotechnical Commission IEEE Institute of Electrical and Electronics Engineers IO Input Output ISO International Organization for Standardization ITT Invitation To Tender LIN Local Interconnect Network MISRA Motor Industry Software Reliability Association MOST Media Oriented Systems Transport PA Process Attribute PAM Process Assessment Model PRM Process Reference Model PWM Pulse Width Modulation RAM Random Access Memory ROM Read Only Memory SPICE Software Process Improvement and Capability d Etermination SUG Spice User Group USB Universal Serial Bus WP Work Product WPC Work Product Characteristic Table 1 Abbreviation List 2. Statement of compliance The Automotive SPICE process assessment model and process reference model is conformant with the IS OIEC 33004 , and can be used as the basis for conducting an assessment of process capability. VDA Quality Management Center 10 ISOIEC 33020 is used as an",
          "and ISOIECIEEE 29119 terminology (as contained in Annex C) c) Terms introduced by Automotive SPICE (as contained in Annex C) 1.3. Abbreviations AS Automotive SPICE BP Base Practice CAN Controller Area Network CASE Computer -Aided Software Engineering, CCB Change Control Board CFP Call For Proposals CPU Central Processing Unit ECU Electronic Control Unit EEPROM Electrically Erasable Programmable Read-Only Memory GP Generic Practice GR Generic Resource IEC International Electrotechnical Commission IEEE Institute of Electrical and Electronics Engineers IO Input Output ISO International Organization for Standardization ITT Invitation To Tender LIN Local Interconnect Network MISRA Motor Industry Software Reliability Association MOST Media Oriented Systems Transport PA Process Attribute PAM Process Assessment Model PRM Process Reference Model PWM Pulse Width Modulation RAM Random Access Memory ROM Read Only Memory SPICE Software Process Improvement and Capability d Etermination SUG Spice User Group USB Universal Serial Bus WP Work Product WPC Work Product Characteristic Table 1 Abbreviation List 2. Statement of compliance The Automotive SPICE process assessment model and process reference model is conformant with the IS OIEC 33004 , and can be used as the basis for conducting an assessment of process capability. VDA Quality Management Center 10 ISOIEC 33020 is used as an ISOIEC 33003 compliant Measurement Framework. A statement of compliance of the process assessment model and process reference model with the requirements of ISOIEC 33004 is provided in Annex A. VDA Quality Management Center 11 3. Process capability determination The concept of process capability determination by using a process assessment model is based on a two -dimensional framework. The first dimension is provided by processes defined in a process reference model (process dimension). The second dimension consists of capability levels that are further subdivided into process attributes (capability dimension). The pr ocess attributes provide the measurable characteristics of process capability. The process assessment model selects processes from a process reference model and supplements with indicators. These indicators support the collection of objective evidence whic h enable an assessor to assign ratings for processes according to the capability dimension. The relationship is shown in Figure 1: Process1Measurement framework (ISOIEC 33020) Capability levels Process attributes Rating Scale Rating method Aggregation method Process capability level model Process2 Process3 Process4 ...Process assessment model (Automotive SPICE) Process capability indicators Process performance indicators Process reference model (Automotive SPICE) Domain and scopes Process purposes Process outcomes Figure 1 Process assessment model relationship VDA Quality Management Center 12 3.1. Process reference m odel Processes are grouped by process category and at a second level into process groups according to the type of activity they address. There are 3 p rocess categories: Primary life cycle processes , Organizational life cycle processes and Supporting life cycle processes . Each process is described in terms of a purpose statement. The purpose statement contains the unique functional objectives of the process when performed in a particular environment. For each purpose statement a list of speci fic outcomes is associated, as a list of expected positive results of the process performance. For the process dimension, the Automotive SPICE process reference model provides the set of processes shown in Figure 2. Management Process Group (MAN) Supporting Process Group (SUP)Acquisition Process Group (ACQ) Supply Process Group (SPL)ACQ.4 Supplier Monitoring ACQ.11 Technical Requirements ACQ.12 Legal and Administrative Requirements ACQ.13 Project Requirements ACQ.14 Request for Proposals ACQ.15 Supplier Qualification SPL.1 Supplier Tendering SPL.2 Product ReleaseSUP.1 Quality AssuranceSUP.2 VerificationSUP.4 Joint ReviewSUP.7 Documentation SUP.8 Configuration ManagementSUP.9 Problem Resolution ManagementSUP.10 Change Request ManagementMAN.3 Project Management MAN.5 Risk Management MAN.6 MeasurementACQ.3 Contract Agreement Process Improvement Process Group (PIM) PIM.3 Process ImprovementReuse Process Group (REU) REU.2 Reuse Program ManagementSystem Engineering Process Group (SYS) SYS.1 Requirements Elicitation SYS.2 System Requirements Analysis SYS.3 System Architectural DesignSYS.4 System Integration and Integration TestSYS.5 System Qualification Test Software Engineering Process Group (SWE) SWE.1 Software Requirements Analysis SWE.2 Software Architectural Design SWE.3 Software Detailed Design and Unit ConstructionSWE.4 Software Unit VerificationSWE.5 Software Integration and Integration TestSWE.6 Software Qualification Test Primary Life Cycle Processes Supporting Life Cycle Processes Organizational Life Cycle Processes Figure 2 Automotive SPICE process reference model - Overview VDA Quality Management Center 13 3.1.1. Primary life cycle processes category The p rimary life cycle processes category consists of processes that may be used by the customer when acquiring products from a supplier, and by the supplier when responding and delivering products to the customer including the engineering processes needed for specification, design, deve lopment, integration and testing. The primary life cycle processes category consists of the following groups: the Acquisition p rocess group; the Supply process group; the System engineering process group; the Sof tware engineering process group. The Acqui sition process group (ACQ) consists of processes that are performed by the customer, or by the supplier when acting as a customer for its own suppliers, in order to acquire a product andor service. ACQ.3 Contract Agreement ACQ.4 Supplier Monitoring ACQ.11 Technical Requirements ACQ.12 Legal and Administrative Requirements ACQ.13 Project Requirements ACQ.14 Request for Proposals ACQ.15 Supplier Qualification Table 2 Primary life cycle processes ACQ process group The Supply process group (SPL) consists of processes performed by the supplier in order to supply a product andor a service. SPL.1 Supplier Tendering SPL.2 Product Release Table 3 Primary life cycle processes SPL process group The System Engineering process group (SYS) consists of processes addressing the elicitation and management of customer and internal requirements, the definition of the system architecture and the integration and testing on the system level. SYS.1 Requirement s Elicitation SYS.2 System Requirements Analysis SYS.3 System Architectural Design SYS.4 System Integration and Integration Test SYS.5 System Qualification Test Table 4 Primary life cycle processes SYS process group The Software Engineering process group (SWE) consists of processes addressing the management of software requirements derived from the system requirements, the development of the VDA Quality Management Center 14 corresponding software architecture and design as well as the implementation, integration and testing of the software. SWE.1 Software Requirements Analysis SWE.2 Software Architectural Design SWE.3 Software Detailed Design and Unit Construction SWE.4 Software Unit Verification SWE.5 Software Integration and Integration",
          "BSW_00348, SRS_BSW_00353, SRS_BSW_00361, SRS_BSW_00439, SRS_- BSW_00449, SRS_BSW_00308, SRS_BSW_00309, SRS_BSW_00330, SRS_- BSW_00010, SRS_BSW_00341, SRS_BSW_00334) 210 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager",
          "the process are determined. Generic practices GP 3.1.1 Define and maintain the standard process that will support the deployment of the defined process. ACHIEVEMENT a A standard process is developed and maintained that includes the fundamental process elements. The standard process identifies the deployment needs and deployment context. Guidance andor procedures are provided to support implementation of the process as needed. Appropriate tailoring guideline(s) are available as needed. GP 3.1.2 Determine the sequence and interaction between processes so that they work as an integrated system of processes. ACHIEVEMENT b The standard processs sequence and interaction with other pr ocesses are determined. Deployment of the standard process as a defined process maintains integrity of processes. GP 3.1.3 Identify the roles and competencies, responsibilities , and authorit ies for performing the standard process. ACHIEVEMENT c Process p erformance roles are identified Competencies for performing the process are identified. Authorities necessary for executing responsibilities are identified . GP 3.1.4 Identify the required infrastructure and work environment for performing the standard process. ACHIEVEMENT d Process infrastructure components are identified (facilities, tools, networks, methods, etc.). Work environment requirements are identified. GP 3.1.5 Determine suitable methods and measures to monitor the effectiveness and suitabil ity of the standard process. ACHIEVEMENT e Methods and measures for monitoring the effectiveness and suitability of the process are determined. Appropriate criteria and data needed to monitor the effectiveness and suitability of the process are defined. The need to conduct internal audit and management review is established. Process changes are implemented to maintain the standard process. Generic resources Process modeling methodstools ACHIEVEMENT a, b, c, d Training material and courses ACHIEVEMENT a, b, c, d VDA Quality Management Center 84 Resource management system ACHIEVEMENT d Process infrastructure ACHIEVEMENT a, b, d Audit and trend analysis tools ACHIEVEMENT e Process monitoring method ACHIEVEMENT e 5.4.2. PA 3.2 Process deployment process attribute The process deployment process attribute is a measure of the extent to which the standard process is deployed as a defined process to achieve its process outcomes. As a result of full achievement of this process attribute: a) A defined process is deployed based upon an a ppropriately selected andor tailored standard process; b) Required roles, responsibilities and authorities for performing the defined process are assigned and communicated; c) Personnel performing the defined process are competent on the basis of appropriate ed ucation, training, and experience; d) Required resources and information necessary for performing the defined process are made available, allocated and used; e) Required infrastructure and work environment for performing the defined process are made available, m anaged and maintained; f) Appropriate data are collected and analysed as a basis for understanding the behaviour of the process, to demonstrate the suitability and effectiveness of the process, and to evaluate where continual improvement of the process can be made. Generic practices GP 3.2.1 Deploy a defined process that satisfies the context specific requirements of the use of the standard process. ACHIEVEMENT a The defined process is appropriately selected andor tailored from the standard process. Conformance of defined process with standard process requirements is verified. GP 3.2.2 Assign and communicate roles, responsibilities and authorities for performing the defined process. ACHIEVEMENT b The roles for performing the defined process are assi gned and communicated. The responsibilities and authorities for performing the defined process are assigned and communicated. GP 3.2.3 Ensure necessary competencies for performing the defined process. ACHIEVEMENT c Appropriate competencies for assigned p ersonnel are identified. Suitable training is available for those deploying the defined process. GP 3.2.4 Provide resources and information to support the performance of the defined process. ACHIEVEMENT d VDA Quality Management Center 85 Required human resources are made available, allo cated and used. Required information to perform the process is made available, allocated and used. GP 3.2.5 Provide adequate process infrastructure to support the performance of the defined process. ACHIEVEMENT e Required infrastructure and work environm ent is available. Organizational support to effectively manage and maintain the infrastructure and work environment is available. Infrastructure and work environment is used and maintained. GP 3.2.6 Collect and analyze data about performance of the process to demonstrate its suitability and effectiveness. ACHIEVEMENT f Data required to understand the behavior , suitability and effectiveness of the defined process are identified. Data is collected and analyzed to understand the behavior , suitability and eff ectiveness of the defined process. Results of the analysis are used to identify where continual improvement of the standard andor defined process can be made. NOTE 1 : Data about process performance may be qualitative or quantitative. Generic resources Feedback mechanisms (customer, staff, other stakeholders) ACHIEVEMENT f Process repository ACHIEVEMENT a Resource management system ACHIEVEMENT b, c, d Knowledge management system ACHIEVEMENT a, b, d, f Problem and change management system ACHIEVE MENT f Working environment and infrastructure ACHIEVEMENT d, e Data collection analysis system ACHIEVEMENT f Process assessment framework ACHIEVEMENT f Auditreview system ACHIEVEMENT f 5.5. Process capability Level 4: Predictable process The previously described Established process now operates predictively within defined limits to achieve its process outcomes. Quantitative management needs are identified, measurement data are collected and analysed to identify assignable causes of variation. Corrective action is taken to address assignable causes of variation. The following process attributes, together with the previously defined process attributes, demonstrate the achievement of this level: VDA Quality Management Center 86 5.5.1. PA 4.1 Quantitative analysis process attribute The q uantitative analysis process attribute is a measure of the extent to which information needs are defined, relationships between process elements are identified and data are collected. As a result of full achievement of this process attribute: a) The process i s aligned with quantitative business goals; b) Process information needs in support of relevant defined quantitative business goals are established; c) Process measurement objectives are derived from process information needs; d) Measurable relationships between pr ocess elements that contribute to the process performance are identified; e) Quantitative objectives for process performance in support of relevant business goals are established; f) Appropriate measures",
          "ava ilable, allocated and used. The individuals performing and managing the process are prepared by training, mentoring, or coaching to execute their responsibilities. The information necessary to perform the process is identified and made available. GP 2.1. 7 Manage the interfaces between involved parties. ACHIEVEMENT h The individuals and groups involved in the process performance are determined. Responsibilities of the involved parties are assigned. Interfaces between the involved parties are managed. Communication is assured between the involved parties. Communication between the involved parties is effective. Generic resources Human resources with identified objectives, responsibilities and authorities ACHIEVEMENT e, f, h Facilities and infrastructure resources ACHIEVEMENT g, h Project planning, management and control tools, including time and cost reporting ACHIEVEMENT a, b, c, d Workflow management system ACHIEVEMENT d, f, g , h VDA Quality Management Center 81 Email andor other communication mecha nisms ACHIEVEMENT b, c, d, f, g , h Information andor experience repository ACHIEVEMENT b, d, e Problem and issues management mechanisms ACHIEVEMENT c 5.3.2. PA 2.2 Work product management process attribute The work product management process attribute is a measure of the extent to which the work products produced by the process are appropriately managed. As a result of full achievement of this process attribute: a) Requirements for the work products of the process are defined; b) Requirements for documentation a nd control of the work products are defined; c) Work products are appropriately identified, documented, and controlled; d) Work products are reviewed in accordance with planned arrangements and adjusted as necessary to meet requirements. NOTE 1: Requirements for documentation and control of work products may include requirements for the identification of changes and revision status, approval and re -approval of work products, distribution of work products, and for making relevant versions of applicable work produc ts available at points of use. NOTE 2: The work products referred to in this clause are those that result from the achievement of the process purpose through the process outcomes. Generic practices GP 2.2.1 Define the requirements for the work products. ACHIEVEMENT a The requirements for the work products to be produced are defined. Requirements may include defining contents and structure. Quality criteria of the work products are identified. Appropriate review and approval criteria for the work products are defined. GP 2.2.2 Define the requirements for documentation and control of the work products. ACHIEVEMENT b Requirements for the documentation and control of the work products are defined. Such requiremen ts may include requirements for (1) distribut ion, (2) identification of work products and their components and (3) traceability . Dependencies between work products are identified and understood. Requirements for the approval of work products to be controlled are defined. GP 2.2.3 Identify, document and control the work products. ACHIEVEMENT c The work products to be controlled are identified. VDA Quality Management Center 82 Change control is established for work products. The work products are documented and controlled in accordance with requirements. Versions of work products a re assigned to product configurations as applicable. The work products are made available through appropriate access mechanisms. The revision status of the work products may readily be ascertained. GP 2.2.4 Review and adjust work products to meet the defin ed requirements. ACHIEVEMENT d Work products are reviewed against the defined requirements in accordance with planned arrangements. Issues arising from work product reviews are resolved. Generic resources Requirement management methodtoolset ACHIEVEMENT a, b, c Configuration management system ACHIEVEMENT b, c Documentation elaboration and support tool ACHIEVEMENT b, c Document identification and control procedure ACHIEVEMENT b, c Work product review methods and experiences ACHIEVEMENT d Review management methodtoolset ACHIEVEMENT d Intranets, extranets andor other communication mechanisms ACHIEVEMENT b, c Problem and issue management mechanisms ACHIEVEMENT d 5.4. Process capability Level 3: Established process The previously described Managed process is now implemented using a defined process that is capable of achieving its process outcomes. The following process attributes, together with the previously defined process attributes, demonstrate the achievement of this level: 5.4.1. PA 3.1 Process definition process attribute The process definition process attribute is a measure of the extent to which a standard process is maintained to support the deployment of the defined process. As a result of full achievement of this process attrib ute: a) A standard process, including appropriate tailoring guidelines, is defined and maintained that describes the fundamental elements that must be incorporated into a defined process; b) The sequence and interaction of the standard process with other process es is determined. c) Required competencies and roles for performing the process are identified as part of the standard process; d) Required infrastructure and work environment for performing the process are identified as part of the standard process; VDA Quality Management Center 83 e) Suitable me thods and measures for monitoring the effectiveness and suitability of the process are determined. Generic practices GP 3.1.1 Define and maintain the standard process that will support the deployment of the defined process. ACHIEVEMENT a A standard process is developed and maintained that includes the fundamental process elements. The standard process identifies the deployment needs and deployment context. Guidance andor procedures are provided to support implementation of the process as needed. Appropriate tailoring guideline(s) are available as needed. GP 3.1.2 Determine the sequence and interaction between processes so that they work as an integrated system of processes. ACHIEVEMENT b The standard processs sequence and interaction with other pr ocesses are determined. Deployment of the standard process as a defined process maintains integrity of processes. GP 3.1.3 Identify the roles and competencies, responsibilities , and authorit ies for performing the standard process. ACHIEVEMENT c Process p erformance roles are identified Competencies for performing the process are identified. Authorities necessary for executing responsibilities are identified . GP 3.1.4 Identify the required infrastructure and work environment for performing the standard process. ACHIEVEMENT d Process infrastructure components are identified (facilities, tools, networks, methods, etc.). Work environment requirements are identified. GP 3.1.5 Determine suitable methods and measures to monitor the effectiveness and suitabil ity of",
          "process assessment model consists of six capability levels matching the capability levels defined in ISOIEC 33020 . The process capability indicators for the 9 process attributes included in the capa bility dimension for process capability level 1 to 5 are described. Each of the process attributes in this process assessment model is identical to the process attribute defined in the process measurement framework. The generic practices address the chara cteristics from each process attribute. The generic resources relate to the process attribute as a whole. Process capability level 0 does not include any type of indicators, as it reflects a non -implemented process or a process which fails to partially achieve any of its outcomes. NOTE: ISOIEC 33020 process attribute definitions and attribute outcomes are duplicated from ISOIEC 33020 in italic font and marked with a left side bar . 5.1. Process capability Level 0: Incomplete process The process is not implem ented, or fails to achieve its process purpose. At this level there is little or no evidence of any systematic achievement of the process purpose. 5.2. Process capability Level 1: Performed process The implemented process achieves its process purpose. The follo wing process attribute demonstrates the achievement of this level 5.2.1. PA 1.1 Process performance process attribute The process performance process attribute is a measure of the extent to which the process purpose is achieved. As a result of full achievement of this attribute: a) the process achieves its defined outcomes Generic practices GP 1.1.1 Achieve the process outcomes ACHIEVEMENT a Achieve the intent of the base practices. Produce work products that evidence the process outcomes. Generic resources Resources are used to achieve the intent of process specific base practices ACHIEVEMENT a 5.3. Process capability Level 2: Managed process The previously described Performed process is now implemented in a managed fashion (planned, monitored and adjusted) and its work products are appropriately established, controlled and maintained. The following process attributes, together with the previously defined process attribute, demonstrate the achievement of this level: VDA Quality Management Center 79 5.3.1. PA 2.1 Performance management process attri bute The performance management process attribute is a measure of the extent to which the performance of the process is managed. As a result of full achievement of this process attribute: a) Objectives for the performance of the process are identified; b) Perfor mance of the process is planned; c) Performance of the process is monitored; d) Performance of the process is adjusted to meet plans; e) Responsibilities and authorities for performing the process are defined, assigned and communicated; f) Personnel performing the pro cess are prepared for executing their responsibilities; g) Resources and information necessary for performing the process are identified, made available, allocated and used; h) Interfaces between the involved parties are managed to ensure both effective communic ation and clear assignment of responsibility. Generic practices GP 2.1.1 Identify the objectives for the performance of the process. ACHIEVEMENT a Performance objectives are identified based on process requirements. The scope of the process performance is defined. Assumptions and constraints are considered when identifying the performance objectives. NOTE 1: Perf ormance objectives may include (1) timely production of artifact s meeting the defined quality criteria, (2) process cycle time or frequency (3) resource usage ; and (4) boundaries of the process. NOTE 2: At minimum, pro cess performance objectives for resources, effort and schedule should be stated. GP 2.1.2 Plan the performance of the process to fulfill the identified objectives . ACHIEVEMENT b Plan(s) for the performance of the process are developed. The process performance cycle is defined. Key milestones for the performance of the process are established. Estimates for process performance attributes are determined and maintained. Process activities and tasks are defined. Schedule is defined and aligned with the approach to performing the process. Process work product reviews are planned. GP 2.1.3 Monitor the performance of the process against the plans. ACHIEVEMENT c VDA Quality Management Center 80 The process is performed according to the plan(s). Process performance is monitored to ensure planned results are achieved and to identify possible deviations GP 2.1. 4 Adjust the performance of the process. ACHIEVEMENT d Process performance issues are identi fied. Appropriate actions are taken when planned results and objectives are not achieved. The plan(s) are adjusted, as necessary. Rescheduling is performed as necessary. GP 2.1. 5 Define responsibilities and authorities for performing the process. ACHIEVEMENT e Responsibilities, commitments and authorities to perform the process are defined, assigned and communicated. Responsibilities and authorities to verify process work products are defined and assigned. The needs for process performance experien ce, knowledge and skills are defined. GP 2.1. 6 Identify, prepare, and make available resources to perform the process according to plan. ACHIEVEMENT f, g The human and infrastructure resources, necessary for performing the process are identified made ava ilable, allocated and used. The individuals performing and managing the process are prepared by training, mentoring, or coaching to execute their responsibilities. The information necessary to perform the process is identified and made available. GP 2.1. 7 Manage the interfaces between involved parties. ACHIEVEMENT h The individuals and groups involved in the process performance are determined. Responsibilities of the involved parties are assigned. Interfaces between the involved parties are managed. Communication is assured between the involved parties. Communication between the involved parties is effective. Generic resources Human resources with identified objectives, responsibilities and authorities ACHIEVEMENT e, f, h Facilities and infrastructure resources ACHIEVEMENT g, h Project planning, management and control tools, including time and cost reporting ACHIEVEMENT a, b, c, d Workflow management system ACHIEVEMENT d, f, g , h VDA Quality Management Center 81 Email andor other communication mecha nisms ACHIEVEMENT b, c, d, f, g , h Information andor experience repository ACHIEVEMENT b, d, e Problem and issues management mechanisms ACHIEVEMENT c 5.3.2. PA 2.2 Work product management process attribute The work product management process attribute is a measure of the extent to which the work products produced by the process are appropriately managed. As a result",
          "with the projects master plan that must occur for the treatment to be properly implemented Environmentinfrastructure: VDA Quality Management Center 103 WP ID WP Name WP Characteristics - describes any environmental or infrastructure requirements or impacts (e.g., safety or secur ity impacts that the treatment may have) Risk treatment plan change procedures and history 08-26 Documentation plan Identifies documents to be produced Defines the documentation activities during the life cycle of the software product or service Identifies any applicable standards and templates Defines requirements for documents Review and authorization practices Distribution of the documents Maintenance and disposal of the documents 08-27 Problem management plan Defines problem resolution activ ities including identification, recording, description and classification Problem resolution approach: evaluation and correction of the problem Defines problem tracking Mechanism to collect and distribute problem resolutions 08-28 Change management plan Defines change management activities including identification, recording, description, analysis and implementation Defines approach to track status of change requests Defines verification and validation activities Change approval and implication review 08-29 Improvement plan Improvement objectives derived from organizational business goals Organizational scope Process scope, the processes to be improved Key roles and responsibilities Appropriate milestones, review points and reporting mechanisms Activities to be performed to keep all those affected by the improvement program informed of progress 08-50 Test specification Test Design Specification Test Case Specification Test Procedure Specification Identification of test cases for regression testing Additi onally , for system integration: - identification of required system elements (hardware elements, wiring elements, settings for parameter s (such as application parameters or global variables ) , data bases, etc.) - necessary sequence or ordering identified for integrating the system elements 08-51 Technology monitoring plan No requirements additional to Plan (Generic) 08-52 Test plan Test Plan according to ISO29119 -3 Context : - projectTest sub -process - test item(s) - test scope - assumptions and constraints - stakeholder - testing communication Test strategy - identifies what needs there are to be satisfied VDA Quality Management Center 104 WP ID WP Name WP Characteristics - establishes the options and approach for satisfying the needs (black -box andor white -box-testing, boundary class test determination, regression testing strategy , etc.) - establishes the evaluation criteria against which the strategic options are evaluated - identifies any constraintsrisks and how these will be addressed - test design techniques - test completion criteria - test ending criteria - test start, abort and re -start criteria - metrics to be collected - test data requirements - retesting and regression testing - suspension and resumption criteria - deviations from the Organizational Test Strategy Test data requirements Test environment requirements Test sub -processes Test de liverables Testing activities and estimates 09-00 Policy Authorized Available to all personnel impacted by the policy Establishes practicesrules to be adhered to 09-03 Reuse policy Identification of reuse requirements Establishes the rules of reuse Documents the reuse adoption strategy including goals and objectives Identification of the reuse program Identification of the name of the reuse sponsor Identification of the reuse program participants Identification of the reuse steering function Identification of reuse program support functions 10-00 Process description A detailed description of the processprocedure which includes: - tailoring of the standard process (if applicable) - purpose of the process - outcomes of the process - task and activitie s to be performed and ordering of tasks - critical dependencies between task activities - expected time required to execute task - inputoutput work products - links between input and outputs work products Identifies process entry and exit criteria Identifies internal and external interfaces to the process Identifies process measures Identifies quality expectations Identifies functional roles and responsibilities Approved by authorized personnel 11-00 Product Is a resultdeliverable of the execution of a proce ss, includes services, systems (software and hardware) and processed materials Has elements that satisfy one or more aspects of a process purpose May be represented on various media (tangible and intangible) 11-03 Product release information Coverage for key elements (as appropriate to the application): Description of what is new or changed (including features removed) System information and requirements VDA Quality Management Center 105 WP ID WP Name WP Characteristics Identification of conversion programs and instructions Release numbering implementation may include: - the major release number - the feature release number - the defect repair number - the alpha or beta release; and the iteration within the alpha or beta release Identification of the component list (version identification included): - hardware software product elements, libraries, etc. - associated documentation list Newchanged parameter information ( e.g. for application parameters or global variables ) andor commands Backup and recovery information List of open known problems, faults, warning information, etc. Identification of verification and diagnostic procedures Technical support information Copyright and license information The release note may include an introduction, the environmental requirements, installation procedures, product invocation, new feature identification and a list of defect resolutions, known defects and workarounds 11-04 Product release package Includes the hardwaresoftwareproduct Includes and associated release elements such as: - system hardwaresoftwareproduct elements - associated customer documentation - application parameter definitions defined - command language defined - installation instructions - release letter 11-05 Software unit Follows established coding standards (as appropriate to the language and application): - commented - structured or optimized - meaningful naming conventions - parameter information identified - error codes defined - error messages descriptive and meaningful - formatting - indented, levels Follows data definition standards (as appropriate to the language and applica tion): - variables defined - data types defined - classes and inheritance structures defined - objects defined Entity relationships defined Database layouts are defined File structures and blocking are defined Data structures are defined Algorithms are defined Functional interfaces defined 11-06 System All elements of the product release are included Any required hardware Integrated product VDA Quality Management Center 106 WP ID WP Name WP Characteristics Customer documentation Fully configured set of the system elements: - application parameters defined - commands defined - data loaded or converted 11-07 Temporary solution Problem identification Release",
          "Quality Management in the Automotive Industry Automotive SPICE Process Reference Model Process Assessment Model Version 3. 1 Title: Automotive SPICE Process Assessment Reference Model Author(s): VDA QMC Working Group 13 Automotive SIG Version: 3.1 Date: 2017-11-01 Status: PUBLISHED Confidentiality: Public Revision ID: 656 VDA Quality Management Center 2 Copyright n otice This document is a revision of the Automotive SPICE process assessment model 2.5 and the process reference model 4.5, which has been developed under the Automotive SPICE initiative by consensus of the car manufacturers within the Automotive Special Interest Group (SIG), a joint special interest group of Automotive OEM, the Procurement Forum and t he SPICE User Group. It has been revised by the Working Group 13 of the Quality Management Center (QMC) in the German Association of the Automotive Industry with the representation of members of the Automotive Specia l Interest Group, and with the agreement of the SPICE User Group. This agreement is based on a validation of the Automotive SPICE 3.0 version regarding any ISO copyright infringement and the st atements given from VDA QMC to t he S PICE User Group regarding t he current and future development of Automotive SPICE. This document reproduces relevant material from: ISOIEC 33020:2015 Information technology -- Process assessment -- Process measurement framework for assessment of process capability ISOIEC 33020 :2015 provides the following copyright release statement : Users of this International Standard may reproduce subclauses 5.2, 5.3, 5.4 and 5.6 as part of any process assessment model or maturity model so that it can be used for its intended purpose. ISOIEC 1 5504 -5:2006 Information Technology Process assessment Part 5: An exemplar Process Assessment Model ISOIEC 15504 -5:2006 provides the following copyright release statement : Users of this part of ISOIEC 15504 may freely reproduce the detailed descri ptions contained in the exemplar assessment model as part of any tool or other material to support the performance of process assessments, so that it can be used for its intended purpose. Relevant material from one of the mentioned standards is incorporated under the copyright release notice . Acknowledgemen t The VDA, the VDA QMC and the Working Group 13 explicitly acknowledge the high quality work carried out by the members of the Automoti ve Special Interest Group. We would like to thank all involved people, who have contributed to the development and publication of Automotive SPICE. VDA Quality Management Center 3 Derivative w orks You may not alter, transform, or build upon this work without the prior consent of both the SPICE User Group and the VDA Quality Management Center . Such consent may be given provided ISO copyright is not infringed. The detailed descriptions contained in this document may be incorporated as part of any tool or other material to support the perf ormance of process assessments, so that this process assessment model can be used for its intended purpose, provided that any such material is not offered for sale. All distribution of derivative works shall be made at no cost to the recipient. Distribution The Automotive SPICE process a ssessment model may only be obtained by download from the www.automotivespice.com web site. It is not permitted for the recipient to further distribute the document. Change r equests Any problems or change requests should be reported through the defined mechanism at the www.automotivespice.com web site. Trademark Automotive SPICE is a registered trademark of the Verband der Automobilindustrie e.V. (VDA) For further information about Automotive SPICE visit www.automotivespice.com . VDA Quality Management Center 4 Document history Version Date By Notes 2.0 2005 -05-04 AutoSIG SUG DRAFT RELEASE, pending final editorial review 2.1 2005 -06-24 AutoSIG SUG Editorial review comments implemented Updated to reflect changes in FDIS 15504 -5 2.2 2005 -08-21 AutoSIG SUG Final checks implemented: FORMAL RELEASE 2.3 2007 -05-05 AutoSIG SUG Revision following CCB: FORMAL RELEASE 2.4 2008 -08-01 AutoSIG SUG Revision following CCB: FORMAL RELEASE 2.5 2010 -05-10 AutoSIG SUG Revision following CCB: FORMAL RELEASE 3.0 2015 -07-16 VDA QMC WG13 Changes: See release notes 3.1 2017-11-01 VDA QMC WG13 Changes: See www.automotivespice.com Release n otes Version 3.0 of the process assessment model incorporates the following major changes : Chapter 1 Editorial adaption to ISOIEC 330xx series, Notes regarding combined PRMPAM in this document Chapter 2 Adaption to ISOIEC 330xx series Chapter 3 Text optimized for better understanding and adapted to ISOIEC 330xx series . Chapter 4 Renaming ENG to SYS SWE, Structure of old ENG Processes changed, Rework of AS 4.5 process reference model and AS 2.5 process performance indicators focusing on a set of highly significant processes assessed within the automotive industry ( VDA Scope). Chapter 5 Adaption based on AS 2.5 to the measurement f ramework of ISOIEC 33020 Annex A Conformity statement adapted to ISOIEC 33004 Annex B Modifications on work produ ct characteristics according to the changes in chapter 4. Annex C Update to recent standards. Introduction of specific terms used in AS 3.0 Annex D Added the major concepts used for AS 3.0 , incorporated Annex E of AS 2.5 Annex E Updated references to other standards Version 3.1 of the process assessment model incorporates minor changes. Please refer to www.automotivespice.com for a detailed change log. VDA Quality Management Center 5 Table of contents Copyright notice ................................ ................................ ................................ .............................. 2 Acknowledgement ................................ ................................ ................................ ........................... 2 Derivative works ................................ ................................ ................................ .............................. 3 Distribution ................................ ................................ ................................ ................................ ...... 3 Change requests ................................ ................................ ................................ ............................. 3 Trademark ................................ ................................ ................................ ................................ ...... 3 Document history ................................ ................................ ................................ ............................ 4 Release notes ................................ ................................ ................................ ................................ . 4 Table of contents ................................ ................................ ................................ ............................ 5 List of Figures ................................ ................................ ................................ ................................ . 7 List of Tables ................................ ................................ ................................ ................................ .. 7 1. Introduction ................................ ................................ ................................ .............................. 8 1.1. Scope ................................ ................................ ................................ .............................. 8 1.2. Terminology ................................ ................................ ................................ ..................... 9 1.3. Abbrevi ations ................................ ................................ ................................ ................... 9 2. Statement of compliance ................................ ................................ ................................ .......... 9 3. Process capability determination ................................ ................................ ............................",
          "a process execution: - key elements to be represented in the work product VDA Quality Management Center 119 Annex C Terminology Annex C lists the applicable terminology references from ISOIECIEEE 24765 and ISOIECIEEE 29119. It also provide s terms which are specifically defined within Automotive SPICE. Some of these definitions are based on ISOIECIEEE 24765. Table C.1 Terminology Term Origin Description Acceptance testing ISOIECIEEE 24765 Formal testing conducted to enable a user, customer, or authorized entity to determine whether to accept a system or component. Application parameter Automotive SPICE V3.1 An application parameter is a parameter containing data applied to the system or software functions, behavior or properties. T he notion of application parameter is expressed in two ways: firstly, the logical specification (including name, description, unit, value domain or threshold values or characteristic curves, respectively), and, secondly, the actual quantitative data value it receives by means of data application. Architecture element Automotive SPICE V3.1 Result of the decomposition of the architecture on system and software level: The system is decomposed into elements of the system architecture across appropriate hierarchical levels. The software is decomposed into elements of the software architecture across appropriate hierarchical levels down to the software components (the lowest level elements of the software architecture). Baseline ISOIECIEEE 24765 A speci fication or product that has been formally reviewed and agreed upon, that thereafter serves as the basis for further development, and can be changed only through formal change control procedures. Black -box testing Automotive SPICE V3.1 Method of requireme nt testing where tests are developed without knowledge of the internal structure and mechanisms of the tested item. Code review Automotive SPICE V3.1 A check of the code by one or more qualified persons to determine its suitability for its intended use an d identify discrepancies from specifications and standards. Coding ISOIECIEEE 24765 The transforming of logic and data from design specifications (design descriptions) into programming language. Consistency Automotive SPICE V3.1 Consistency addresses content and semantics and ensures that work products are not in contradiction to each other. Consistency is supported by bidirectional traceability. Defect FAULT Dynamic analysis ISOIECIEEE 24765 A process of evaluating a system or component based on its behavior during execution. Element Automotive SPICE V3.1 Elements are all structural objects on architectural and design level on the left side of the V. Such elements can be further decomposed into more fine -grained sub -elements of the architecture or design across appropriate hierarchical levels. Error ISOIECIEEE 24765 The difference between a computed, observed, or measured value or condition and the true, specified, or theoretically correct value or condition. VDA Quality Management Center 120 Fault ISOIECIEEE 24765 A manifestation of an error in software. Functional requirement ISOIECIEEE 24765 A statement that identifies what a product or process must accomplish to produce required behavior andor results. Functional specification ISOIECIEEE 24765 A document that specifies the functions that a system or component must perform. Often part of a requirements specification. Functional testing ISOIECIEEE 24765 Testing conducted to evaluate the compliance of a system or component with specified functional requirements. Hardware ISOIECIEEE 24765 Physical equipment used to process, store, or transmit computer programs or data. Hardware item Automotive SPICE V3.1 A physical representation of a hardware element. Integration Automotive SPICE V3.1 A process of combining items to larger items up to an overall system. Integrated software item Automotive SPICE V3.1 A set of software units or items that are integrated into a larger assembly for the purpose of integration testing. Integration testing Automotive SPICE V3.1 Testing in which items (software items, hardware items, or system items) are combined and tested to evaluate the interaction among them. Integrated system item Automotive SPICE V3.1 A set of items that are integrated into a larger assembly for the purpose of integration testing. Quality assurance ISOIECIEEE 24765 A planned and systematic pattern of all actions necessary to provide adequate confidence that an item or product conforms to established technical requirements. Regress ion testing Automotive SPICE V3.1 Selective retesting of a system or item to verify that modifications have not caused unintended effects and that the system or item still complies with its specified requirements. Requirement Automotive SPICE V3.1 A prope rty or capability that must be achieved or possessed by a system, system item, product, or service to satisfy a contract, standard, specification or other formally imposed documents. Requirements specification Automotive SPICE V3.1 A document that specifies the requirements for a system or item. Typically included are functional requirements, performance requirements, interface requirements, design requirements, and development standards. Software ISOIECIEEE 24765 Computer programs, procedures, and possibly associated documentation and data pertaining to the operation of a computer system. Software component Automotive SPICE V3.1 In Automotive SPICE V3.1 the term software component is used for the lowest level elements of the software architec ture for which finally the detailed design is defined. A software component consists of one or more software units. ARCHITECTURE ELEMENT , UNIT Software element ARCHITECTURE ELEMENT Software item ISOIECIEEE 24765 Identifiable part of a software product. Software unit UNIT VDA Quality Management Center 121 Static analysis Automotive SPICE V3.1 A process of evaluating an item based on its form, structure, content, or documentation. System Automotive SPICE V3.1 A collection of interacting items organized to accompli sh a specific function or set of functions within a specific environment. System item Automotive SPICE V3.1 Identifiable part of the system. System test ISOIECIEEE 24765 Testing conducted on a complete, integrated system to evaluate the systems compliance with its specified requirements. Testing Automotive SPICE V3.1 Activity in which an item (system, hardware, or software) is exe cuted under specific conditions; and the results are recorded , summarized and communicated . Traceability ISOIECIEE E 24765 The degree to which a relationship can be established between two or more products of the development process, especially products having a predecessor -successor or master -subordinate relationship to one another. Unit Automotive SPICE V3.1 Part of a software component which is not further subdivided. SOFTWARE COMPONENT Unit test Automotive SPICE",
          "BSW_00348, SRS_BSW_00353, SRS_BSW_00361, SRS_BSW_00439, SRS_- BSW_00449, SRS_BSW_00308, SRS_BSW_00309, SRS_BSW_00330, SRS_- BSW_00010, SRS_BSW_00341, SRS_BSW_00334) 210 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager",
          "................................ ......................... 87 5.6. Process capability Level 5: Innovating process ................................ .............................. 88 5.6.1. PA 5.1 Process innovation process attribute ................................ .......................... 88 5.6.2. PA 5.2 Process innovation implementation proc ess attribute ................................ . 89 Annex A Conformity of the process assessment and reference model ................................ ..... 91 A.1 Introduction ................................ ................................ ................................ .................... 91 A.2 Conformance to the requirements for process reference models ................................ ... 91 A.3 Conformance to the requirements for process assessment models ............................... 92 Annex B Work product characteristics ................................ ................................ ...................... 94 Annex C Terminology ................................ ................................ ................................ ............. 119 VDA Quality Management Center 7 Annex D Key concepts ................................ ................................ ................................ ........... 122 D.1 The Plug -in concept ................................ ................................ ................................ .. 122 D.2 The Tip of the V ................................ ................................ ................................ ........ 123 D.3 Terms Element, Component, Unit, and Item ................................ ...................... 123 D.4 Traceability and consistency ................................ ................................ ........................ 124 D.5 Agree and Summarize and Communicate ................................ .............................. 125 D.6 Evaluate, Verification Criteria and Ensuring compliance ................................ ...... 125 D.7 The relation between Strategy and Plan ................................ ................................ . 126 Annex E Reference standards ................................ ................................ ............................... 128 List of Figures Figure 1 Process assessment model relationship ................................ ................................ ..... 11 Figure 2 Automotive SPICE process reference model - Overview ................................ ............ 12 Figure 3 Relationship between assessment indicators and process capability .......................... 22 Figure 4 Possible levels of abstraction for the term process ................................ ................... 23 Figure 5 Performing a process assessment for determining process capability ........................ 23 Figure D.1 The Plug -in concept ................................ ................................ ............................ 122 Figure D.2 The tip of the V ................................ ................................ ................................ ... 123 Figure D.3 Element, component, unit, and item ................................ ................................ ...... 123 Figure D.4 Bidirectional traceability and consistency ................................ .............................. 124 Figure D.5 Agree, summarize and communicate ................................ ................................ .... 125 Figure D.6 Evaluation, verification criteria and c ompliance ................................ ..................... 126 Figure D.7 Strategy and plan ................................ ................................ ................................ ... 127 List of Tables Table 1 Abbreviation List ................................ ................................ ................................ ............ 9 Table 2 Primary life cycle processes ACQ process group ................................ ...................... 13 Table 3 Primary life cycle processes SPL process group ................................ ....................... 13 Table 4 Primary life cycle process es SYS process group ................................ ...................... 13 Table 5 Primary life cycle processes SWE process group ................................ ..................... 14 Table 6 Supporting life cycle processes - SUP process group ................................ .................. 14 Table 7 Organizational life cycle processes - MAN process group ................................ ............ 14 Table 8 Organizational life cycle processes - PIM process group ................................ ............. 15 Table 9 Organizational life cycle processes - REU process group ................................ ............ 15 Table 10 Process cap ability levels according to ISOIEC 33020 ................................ ............... 16 Table 11 Process attributes according to ISOIEC 33020 ................................ ......................... 16 Table 12 Rating scale according to ISOIEC 33020 ................................ ................................ .. 17 Table 13 Rating scale percentage values according to ISOIEC 33020 ................................ .... 17 Table 14 Refinement of rating scale according to ISOIEC 33020 ................................ ............ 17 Table 15 Refined rat ing scale percentage values according to ISOIEC 33020 ........................ 18 Table 16 Process capability level model according to ISOIEC 33020 ................................ ...... 20 Table 17 Template for the process description ................................ ................................ ......... 24 Table B.1 Structure of WPC tables ................................ ................................ ........................... 94 Table B.2 Work product characteristi cs ................................ ................................ .................... 94 Table C.1 Terminology ................................ ................................ ................................ ........... 119 Table E.1 Reference standards ................................ ................................ .............................. 128 VDA Quality Management Center 8 1. Introduction 1.1. Scope Process assessment is a disciplined evaluation of an organizational units processes against a process assessment model . The Automotive SPICE process assessment model (PAM) is intended for use when performing conformant assessments of the process capability on the development of embedded automotive systems. It was developed in accordance with the requirements of ISOIEC 33004. Automotive SPICE has its own process refere nce model (PRM) , which was developed based on the Automotive SPICE process reference model 4.5 . It was further developed and tailored considering the specific needs of the automotive industry. If processes beyond the scope of Automotive SPICE are needed, a ppropriate processes from other process reference models such as ISOIEC 12207 or ISOIEC 15288 may be added based on the business needs of the organization . The PRM is incorporated in this document and is used in conjunction with the Automotive SPICE process assessment model when performing an assessment. This Automotive SPICE process assessment model contains a set of indicators to be considered when interpreting the intent of the Automotive SPICE process reference m odel. These indicators may also be used when implementing a process improvement program subsequent to an assessment. VDA Quality Management Center 9 1.2. Terminology Automotive SPICE follows the following preceden ce for use of terminology: a) ISOIEC 33001 for assessment related terminology b) ISOIECIEEE 24765 and ISOIECIEEE 29119 terminology (as contained in Annex C) c) Terms introduced by Automotive SPICE (as contained in Annex C) 1.3. Abbreviations AS Automotive SPICE BP Base Practice CAN Controller Area Network CASE Computer -Aided Software Engineering, CCB Change Control Board CFP Call For Proposals CPU Central Processing Unit ECU Electronic Control Unit EEPROM Electrically Erasable Programmable Read-Only Memory GP Generic Practice GR Generic Resource IEC International Electrotechnical Commission IEEE Institute of Electrical and Electronics Engineers IO Input Output ISO International Organization for Standardization ITT Invitation To Tender LIN Local Interconnect Network MISRA Motor Industry Software Reliability Association MOST Media Oriented Systems Transport PA Process Attribute PAM Process Assessment Model PRM Process Reference Model PWM Pulse Width Modulation RAM Random Access Memory ROM Read Only Memory SPICE Software Process Improvement and Capability d Etermination SUG Spice User Group USB Universal Serial Bus WP Work Product WPC Work Product Characteristic Table 1 Abbreviation List 2. Statement of compliance The Automotive SPICE process assessment model and process reference model is conformant with the IS OIEC 33004 , and can be used as the basis for conducting an assessment of process capability. VDA Quality Management Center 10 ISOIEC 33020 is used as an",
          "and ISOIECIEEE 29119 terminology (as contained in Annex C) c) Terms introduced by Automotive SPICE (as contained in Annex C) 1.3. Abbreviations AS Automotive SPICE BP Base Practice CAN Controller Area Network CASE Computer -Aided Software Engineering, CCB Change Control Board CFP Call For Proposals CPU Central Processing Unit ECU Electronic Control Unit EEPROM Electrically Erasable Programmable Read-Only Memory GP Generic Practice GR Generic Resource IEC International Electrotechnical Commission IEEE Institute of Electrical and Electronics Engineers IO Input Output ISO International Organization for Standardization ITT Invitation To Tender LIN Local Interconnect Network MISRA Motor Industry Software Reliability Association MOST Media Oriented Systems Transport PA Process Attribute PAM Process Assessment Model PRM Process Reference Model PWM Pulse Width Modulation RAM Random Access Memory ROM Read Only Memory SPICE Software Process Improvement and Capability d Etermination SUG Spice User Group USB Universal Serial Bus WP Work Product WPC Work Product Characteristic Table 1 Abbreviation List 2. Statement of compliance The Automotive SPICE process assessment model and process reference model is conformant with the IS OIEC 33004 , and can be used as the basis for conducting an assessment of process capability. VDA Quality Management Center 10 ISOIEC 33020 is used as an ISOIEC 33003 compliant Measurement Framework. A statement of compliance of the process assessment model and process reference model with the requirements of ISOIEC 33004 is provided in Annex A. VDA Quality Management Center 11 3. Process capability determination The concept of process capability determination by using a process assessment model is based on a two -dimensional framework. The first dimension is provided by processes defined in a process reference model (process dimension). The second dimension consists of capability levels that are further subdivided into process attributes (capability dimension). The pr ocess attributes provide the measurable characteristics of process capability. The process assessment model selects processes from a process reference model and supplements with indicators. These indicators support the collection of objective evidence whic h enable an assessor to assign ratings for processes according to the capability dimension. The relationship is shown in Figure 1: Process1Measurement framework (ISOIEC 33020) Capability levels Process attributes Rating Scale Rating method Aggregation method Process capability level model Process2 Process3 Process4 ...Process assessment model (Automotive SPICE) Process capability indicators Process performance indicators Process reference model (Automotive SPICE) Domain and scopes Process purposes Process outcomes Figure 1 Process assessment model relationship VDA Quality Management Center 12 3.1. Process reference m odel Processes are grouped by process category and at a second level into process groups according to the type of activity they address. There are 3 p rocess categories: Primary life cycle processes , Organizational life cycle processes and Supporting life cycle processes . Each process is described in terms of a purpose statement. The purpose statement contains the unique functional objectives of the process when performed in a particular environment. For each purpose statement a list of speci fic outcomes is associated, as a list of expected positive results of the process performance. For the process dimension, the Automotive SPICE process reference model provides the set of processes shown in Figure 2. Management Process Group (MAN) Supporting Process Group (SUP)Acquisition Process Group (ACQ) Supply Process Group (SPL)ACQ.4 Supplier Monitoring ACQ.11 Technical Requirements ACQ.12 Legal and Administrative Requirements ACQ.13 Project Requirements ACQ.14 Request for Proposals ACQ.15 Supplier Qualification SPL.1 Supplier Tendering SPL.2 Product ReleaseSUP.1 Quality AssuranceSUP.2 VerificationSUP.4 Joint ReviewSUP.7 Documentation SUP.8 Configuration ManagementSUP.9 Problem Resolution ManagementSUP.10 Change Request ManagementMAN.3 Project Management MAN.5 Risk Management MAN.6 MeasurementACQ.3 Contract Agreement Process Improvement Process Group (PIM) PIM.3 Process ImprovementReuse Process Group (REU) REU.2 Reuse Program ManagementSystem Engineering Process Group (SYS) SYS.1 Requirements Elicitation SYS.2 System Requirements Analysis SYS.3 System Architectural DesignSYS.4 System Integration and Integration TestSYS.5 System Qualification Test Software Engineering Process Group (SWE) SWE.1 Software Requirements Analysis SWE.2 Software Architectural Design SWE.3 Software Detailed Design and Unit ConstructionSWE.4 Software Unit VerificationSWE.5 Software Integration and Integration TestSWE.6 Software Qualification Test Primary Life Cycle Processes Supporting Life Cycle Processes Organizational Life Cycle Processes Figure 2 Automotive SPICE process reference model - Overview VDA Quality Management Center 13 3.1.1. Primary life cycle processes category The p rimary life cycle processes category consists of processes that may be used by the customer when acquiring products from a supplier, and by the supplier when responding and delivering products to the customer including the engineering processes needed for specification, design, deve lopment, integration and testing. The primary life cycle processes category consists of the following groups: the Acquisition p rocess group; the Supply process group; the System engineering process group; the Sof tware engineering process group. The Acqui sition process group (ACQ) consists of processes that are performed by the customer, or by the supplier when acting as a customer for its own suppliers, in order to acquire a product andor service. ACQ.3 Contract Agreement ACQ.4 Supplier Monitoring ACQ.11 Technical Requirements ACQ.12 Legal and Administrative Requirements ACQ.13 Project Requirements ACQ.14 Request for Proposals ACQ.15 Supplier Qualification Table 2 Primary life cycle processes ACQ process group The Supply process group (SPL) consists of processes performed by the supplier in order to supply a product andor a service. SPL.1 Supplier Tendering SPL.2 Product Release Table 3 Primary life cycle processes SPL process group The System Engineering process group (SYS) consists of processes addressing the elicitation and management of customer and internal requirements, the definition of the system architecture and the integration and testing on the system level. SYS.1 Requirement s Elicitation SYS.2 System Requirements Analysis SYS.3 System Architectural Design SYS.4 System Integration and Integration Test SYS.5 System Qualification Test Table 4 Primary life cycle processes SYS process group The Software Engineering process group (SWE) consists of processes addressing the management of software requirements derived from the system requirements, the development of the VDA Quality Management Center 14 corresponding software architecture and design as well as the implementation, integration and testing of the software. SWE.1 Software Requirements Analysis SWE.2 Software Architectural Design SWE.3 Software Detailed Design and Unit Construction SWE.4 Software Unit Verification SWE.5 Software Integration and Integration",
          "BSW_00348, SRS_BSW_00353, SRS_BSW_00361, SRS_BSW_00439, SRS_- BSW_00449, SRS_BSW_00308, SRS_BSW_00309, SRS_BSW_00330, SRS_- BSW_00010, SRS_BSW_00341, SRS_BSW_00334) 210 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager",
          "the process are determined. Generic practices GP 3.1.1 Define and maintain the standard process that will support the deployment of the defined process. ACHIEVEMENT a A standard process is developed and maintained that includes the fundamental process elements. The standard process identifies the deployment needs and deployment context. Guidance andor procedures are provided to support implementation of the process as needed. Appropriate tailoring guideline(s) are available as needed. GP 3.1.2 Determine the sequence and interaction between processes so that they work as an integrated system of processes. ACHIEVEMENT b The standard processs sequence and interaction with other pr ocesses are determined. Deployment of the standard process as a defined process maintains integrity of processes. GP 3.1.3 Identify the roles and competencies, responsibilities , and authorit ies for performing the standard process. ACHIEVEMENT c Process p erformance roles are identified Competencies for performing the process are identified. Authorities necessary for executing responsibilities are identified . GP 3.1.4 Identify the required infrastructure and work environment for performing the standard process. ACHIEVEMENT d Process infrastructure components are identified (facilities, tools, networks, methods, etc.). Work environment requirements are identified. GP 3.1.5 Determine suitable methods and measures to monitor the effectiveness and suitabil ity of the standard process. ACHIEVEMENT e Methods and measures for monitoring the effectiveness and suitability of the process are determined. Appropriate criteria and data needed to monitor the effectiveness and suitability of the process are defined. The need to conduct internal audit and management review is established. Process changes are implemented to maintain the standard process. Generic resources Process modeling methodstools ACHIEVEMENT a, b, c, d Training material and courses ACHIEVEMENT a, b, c, d VDA Quality Management Center 84 Resource management system ACHIEVEMENT d Process infrastructure ACHIEVEMENT a, b, d Audit and trend analysis tools ACHIEVEMENT e Process monitoring method ACHIEVEMENT e 5.4.2. PA 3.2 Process deployment process attribute The process deployment process attribute is a measure of the extent to which the standard process is deployed as a defined process to achieve its process outcomes. As a result of full achievement of this process attribute: a) A defined process is deployed based upon an a ppropriately selected andor tailored standard process; b) Required roles, responsibilities and authorities for performing the defined process are assigned and communicated; c) Personnel performing the defined process are competent on the basis of appropriate ed ucation, training, and experience; d) Required resources and information necessary for performing the defined process are made available, allocated and used; e) Required infrastructure and work environment for performing the defined process are made available, m anaged and maintained; f) Appropriate data are collected and analysed as a basis for understanding the behaviour of the process, to demonstrate the suitability and effectiveness of the process, and to evaluate where continual improvement of the process can be made. Generic practices GP 3.2.1 Deploy a defined process that satisfies the context specific requirements of the use of the standard process. ACHIEVEMENT a The defined process is appropriately selected andor tailored from the standard process. Conformance of defined process with standard process requirements is verified. GP 3.2.2 Assign and communicate roles, responsibilities and authorities for performing the defined process. ACHIEVEMENT b The roles for performing the defined process are assi gned and communicated. The responsibilities and authorities for performing the defined process are assigned and communicated. GP 3.2.3 Ensure necessary competencies for performing the defined process. ACHIEVEMENT c Appropriate competencies for assigned p ersonnel are identified. Suitable training is available for those deploying the defined process. GP 3.2.4 Provide resources and information to support the performance of the defined process. ACHIEVEMENT d VDA Quality Management Center 85 Required human resources are made available, allo cated and used. Required information to perform the process is made available, allocated and used. GP 3.2.5 Provide adequate process infrastructure to support the performance of the defined process. ACHIEVEMENT e Required infrastructure and work environm ent is available. Organizational support to effectively manage and maintain the infrastructure and work environment is available. Infrastructure and work environment is used and maintained. GP 3.2.6 Collect and analyze data about performance of the process to demonstrate its suitability and effectiveness. ACHIEVEMENT f Data required to understand the behavior , suitability and effectiveness of the defined process are identified. Data is collected and analyzed to understand the behavior , suitability and eff ectiveness of the defined process. Results of the analysis are used to identify where continual improvement of the standard andor defined process can be made. NOTE 1 : Data about process performance may be qualitative or quantitative. Generic resources Feedback mechanisms (customer, staff, other stakeholders) ACHIEVEMENT f Process repository ACHIEVEMENT a Resource management system ACHIEVEMENT b, c, d Knowledge management system ACHIEVEMENT a, b, d, f Problem and change management system ACHIEVE MENT f Working environment and infrastructure ACHIEVEMENT d, e Data collection analysis system ACHIEVEMENT f Process assessment framework ACHIEVEMENT f Auditreview system ACHIEVEMENT f 5.5. Process capability Level 4: Predictable process The previously described Established process now operates predictively within defined limits to achieve its process outcomes. Quantitative management needs are identified, measurement data are collected and analysed to identify assignable causes of variation. Corrective action is taken to address assignable causes of variation. The following process attributes, together with the previously defined process attributes, demonstrate the achievement of this level: VDA Quality Management Center 86 5.5.1. PA 4.1 Quantitative analysis process attribute The q uantitative analysis process attribute is a measure of the extent to which information needs are defined, relationships between process elements are identified and data are collected. As a result of full achievement of this process attribute: a) The process i s aligned with quantitative business goals; b) Process information needs in support of relevant defined quantitative business goals are established; c) Process measurement objectives are derived from process information needs; d) Measurable relationships between pr ocess elements that contribute to the process performance are identified; e) Quantitative objectives for process performance in support of relevant business goals are established; f) Appropriate measures",
          "ava ilable, allocated and used. The individuals performing and managing the process are prepared by training, mentoring, or coaching to execute their responsibilities. The information necessary to perform the process is identified and made available. GP 2.1. 7 Manage the interfaces between involved parties. ACHIEVEMENT h The individuals and groups involved in the process performance are determined. Responsibilities of the involved parties are assigned. Interfaces between the involved parties are managed. Communication is assured between the involved parties. Communication between the involved parties is effective. Generic resources Human resources with identified objectives, responsibilities and authorities ACHIEVEMENT e, f, h Facilities and infrastructure resources ACHIEVEMENT g, h Project planning, management and control tools, including time and cost reporting ACHIEVEMENT a, b, c, d Workflow management system ACHIEVEMENT d, f, g , h VDA Quality Management Center 81 Email andor other communication mecha nisms ACHIEVEMENT b, c, d, f, g , h Information andor experience repository ACHIEVEMENT b, d, e Problem and issues management mechanisms ACHIEVEMENT c 5.3.2. PA 2.2 Work product management process attribute The work product management process attribute is a measure of the extent to which the work products produced by the process are appropriately managed. As a result of full achievement of this process attribute: a) Requirements for the work products of the process are defined; b) Requirements for documentation a nd control of the work products are defined; c) Work products are appropriately identified, documented, and controlled; d) Work products are reviewed in accordance with planned arrangements and adjusted as necessary to meet requirements. NOTE 1: Requirements for documentation and control of work products may include requirements for the identification of changes and revision status, approval and re -approval of work products, distribution of work products, and for making relevant versions of applicable work produc ts available at points of use. NOTE 2: The work products referred to in this clause are those that result from the achievement of the process purpose through the process outcomes. Generic practices GP 2.2.1 Define the requirements for the work products. ACHIEVEMENT a The requirements for the work products to be produced are defined. Requirements may include defining contents and structure. Quality criteria of the work products are identified. Appropriate review and approval criteria for the work products are defined. GP 2.2.2 Define the requirements for documentation and control of the work products. ACHIEVEMENT b Requirements for the documentation and control of the work products are defined. Such requiremen ts may include requirements for (1) distribut ion, (2) identification of work products and their components and (3) traceability . Dependencies between work products are identified and understood. Requirements for the approval of work products to be controlled are defined. GP 2.2.3 Identify, document and control the work products. ACHIEVEMENT c The work products to be controlled are identified. VDA Quality Management Center 82 Change control is established for work products. The work products are documented and controlled in accordance with requirements. Versions of work products a re assigned to product configurations as applicable. The work products are made available through appropriate access mechanisms. The revision status of the work products may readily be ascertained. GP 2.2.4 Review and adjust work products to meet the defin ed requirements. ACHIEVEMENT d Work products are reviewed against the defined requirements in accordance with planned arrangements. Issues arising from work product reviews are resolved. Generic resources Requirement management methodtoolset ACHIEVEMENT a, b, c Configuration management system ACHIEVEMENT b, c Documentation elaboration and support tool ACHIEVEMENT b, c Document identification and control procedure ACHIEVEMENT b, c Work product review methods and experiences ACHIEVEMENT d Review management methodtoolset ACHIEVEMENT d Intranets, extranets andor other communication mechanisms ACHIEVEMENT b, c Problem and issue management mechanisms ACHIEVEMENT d 5.4. Process capability Level 3: Established process The previously described Managed process is now implemented using a defined process that is capable of achieving its process outcomes. The following process attributes, together with the previously defined process attributes, demonstrate the achievement of this level: 5.4.1. PA 3.1 Process definition process attribute The process definition process attribute is a measure of the extent to which a standard process is maintained to support the deployment of the defined process. As a result of full achievement of this process attrib ute: a) A standard process, including appropriate tailoring guidelines, is defined and maintained that describes the fundamental elements that must be incorporated into a defined process; b) The sequence and interaction of the standard process with other process es is determined. c) Required competencies and roles for performing the process are identified as part of the standard process; d) Required infrastructure and work environment for performing the process are identified as part of the standard process; VDA Quality Management Center 83 e) Suitable me thods and measures for monitoring the effectiveness and suitability of the process are determined. Generic practices GP 3.1.1 Define and maintain the standard process that will support the deployment of the defined process. ACHIEVEMENT a A standard process is developed and maintained that includes the fundamental process elements. The standard process identifies the deployment needs and deployment context. Guidance andor procedures are provided to support implementation of the process as needed. Appropriate tailoring guideline(s) are available as needed. GP 3.1.2 Determine the sequence and interaction between processes so that they work as an integrated system of processes. ACHIEVEMENT b The standard processs sequence and interaction with other pr ocesses are determined. Deployment of the standard process as a defined process maintains integrity of processes. GP 3.1.3 Identify the roles and competencies, responsibilities , and authorit ies for performing the standard process. ACHIEVEMENT c Process p erformance roles are identified Competencies for performing the process are identified. Authorities necessary for executing responsibilities are identified . GP 3.1.4 Identify the required infrastructure and work environment for performing the standard process. ACHIEVEMENT d Process infrastructure components are identified (facilities, tools, networks, methods, etc.). Work environment requirements are identified. GP 3.1.5 Determine suitable methods and measures to monitor the effectiveness and suitabil ity of",
          "process assessment model consists of six capability levels matching the capability levels defined in ISOIEC 33020 . The process capability indicators for the 9 process attributes included in the capa bility dimension for process capability level 1 to 5 are described. Each of the process attributes in this process assessment model is identical to the process attribute defined in the process measurement framework. The generic practices address the chara cteristics from each process attribute. The generic resources relate to the process attribute as a whole. Process capability level 0 does not include any type of indicators, as it reflects a non -implemented process or a process which fails to partially achieve any of its outcomes. NOTE: ISOIEC 33020 process attribute definitions and attribute outcomes are duplicated from ISOIEC 33020 in italic font and marked with a left side bar . 5.1. Process capability Level 0: Incomplete process The process is not implem ented, or fails to achieve its process purpose. At this level there is little or no evidence of any systematic achievement of the process purpose. 5.2. Process capability Level 1: Performed process The implemented process achieves its process purpose. The follo wing process attribute demonstrates the achievement of this level 5.2.1. PA 1.1 Process performance process attribute The process performance process attribute is a measure of the extent to which the process purpose is achieved. As a result of full achievement of this attribute: a) the process achieves its defined outcomes Generic practices GP 1.1.1 Achieve the process outcomes ACHIEVEMENT a Achieve the intent of the base practices. Produce work products that evidence the process outcomes. Generic resources Resources are used to achieve the intent of process specific base practices ACHIEVEMENT a 5.3. Process capability Level 2: Managed process The previously described Performed process is now implemented in a managed fashion (planned, monitored and adjusted) and its work products are appropriately established, controlled and maintained. The following process attributes, together with the previously defined process attribute, demonstrate the achievement of this level: VDA Quality Management Center 79 5.3.1. PA 2.1 Performance management process attri bute The performance management process attribute is a measure of the extent to which the performance of the process is managed. As a result of full achievement of this process attribute: a) Objectives for the performance of the process are identified; b) Perfor mance of the process is planned; c) Performance of the process is monitored; d) Performance of the process is adjusted to meet plans; e) Responsibilities and authorities for performing the process are defined, assigned and communicated; f) Personnel performing the pro cess are prepared for executing their responsibilities; g) Resources and information necessary for performing the process are identified, made available, allocated and used; h) Interfaces between the involved parties are managed to ensure both effective communic ation and clear assignment of responsibility. Generic practices GP 2.1.1 Identify the objectives for the performance of the process. ACHIEVEMENT a Performance objectives are identified based on process requirements. The scope of the process performance is defined. Assumptions and constraints are considered when identifying the performance objectives. NOTE 1: Perf ormance objectives may include (1) timely production of artifact s meeting the defined quality criteria, (2) process cycle time or frequency (3) resource usage ; and (4) boundaries of the process. NOTE 2: At minimum, pro cess performance objectives for resources, effort and schedule should be stated. GP 2.1.2 Plan the performance of the process to fulfill the identified objectives . ACHIEVEMENT b Plan(s) for the performance of the process are developed. The process performance cycle is defined. Key milestones for the performance of the process are established. Estimates for process performance attributes are determined and maintained. Process activities and tasks are defined. Schedule is defined and aligned with the approach to performing the process. Process work product reviews are planned. GP 2.1.3 Monitor the performance of the process against the plans. ACHIEVEMENT c VDA Quality Management Center 80 The process is performed according to the plan(s). Process performance is monitored to ensure planned results are achieved and to identify possible deviations GP 2.1. 4 Adjust the performance of the process. ACHIEVEMENT d Process performance issues are identi fied. Appropriate actions are taken when planned results and objectives are not achieved. The plan(s) are adjusted, as necessary. Rescheduling is performed as necessary. GP 2.1. 5 Define responsibilities and authorities for performing the process. ACHIEVEMENT e Responsibilities, commitments and authorities to perform the process are defined, assigned and communicated. Responsibilities and authorities to verify process work products are defined and assigned. The needs for process performance experien ce, knowledge and skills are defined. GP 2.1. 6 Identify, prepare, and make available resources to perform the process according to plan. ACHIEVEMENT f, g The human and infrastructure resources, necessary for performing the process are identified made ava ilable, allocated and used. The individuals performing and managing the process are prepared by training, mentoring, or coaching to execute their responsibilities. The information necessary to perform the process is identified and made available. GP 2.1. 7 Manage the interfaces between involved parties. ACHIEVEMENT h The individuals and groups involved in the process performance are determined. Responsibilities of the involved parties are assigned. Interfaces between the involved parties are managed. Communication is assured between the involved parties. Communication between the involved parties is effective. Generic resources Human resources with identified objectives, responsibilities and authorities ACHIEVEMENT e, f, h Facilities and infrastructure resources ACHIEVEMENT g, h Project planning, management and control tools, including time and cost reporting ACHIEVEMENT a, b, c, d Workflow management system ACHIEVEMENT d, f, g , h VDA Quality Management Center 81 Email andor other communication mecha nisms ACHIEVEMENT b, c, d, f, g , h Information andor experience repository ACHIEVEMENT b, d, e Problem and issues management mechanisms ACHIEVEMENT c 5.3.2. PA 2.2 Work product management process attribute The work product management process attribute is a measure of the extent to which the work products produced by the process are appropriately managed. As a result",
          "with the projects master plan that must occur for the treatment to be properly implemented Environmentinfrastructure: VDA Quality Management Center 103 WP ID WP Name WP Characteristics - describes any environmental or infrastructure requirements or impacts (e.g., safety or secur ity impacts that the treatment may have) Risk treatment plan change procedures and history 08-26 Documentation plan Identifies documents to be produced Defines the documentation activities during the life cycle of the software product or service Identifies any applicable standards and templates Defines requirements for documents Review and authorization practices Distribution of the documents Maintenance and disposal of the documents 08-27 Problem management plan Defines problem resolution activ ities including identification, recording, description and classification Problem resolution approach: evaluation and correction of the problem Defines problem tracking Mechanism to collect and distribute problem resolutions 08-28 Change management plan Defines change management activities including identification, recording, description, analysis and implementation Defines approach to track status of change requests Defines verification and validation activities Change approval and implication review 08-29 Improvement plan Improvement objectives derived from organizational business goals Organizational scope Process scope, the processes to be improved Key roles and responsibilities Appropriate milestones, review points and reporting mechanisms Activities to be performed to keep all those affected by the improvement program informed of progress 08-50 Test specification Test Design Specification Test Case Specification Test Procedure Specification Identification of test cases for regression testing Additi onally , for system integration: - identification of required system elements (hardware elements, wiring elements, settings for parameter s (such as application parameters or global variables ) , data bases, etc.) - necessary sequence or ordering identified for integrating the system elements 08-51 Technology monitoring plan No requirements additional to Plan (Generic) 08-52 Test plan Test Plan according to ISO29119 -3 Context : - projectTest sub -process - test item(s) - test scope - assumptions and constraints - stakeholder - testing communication Test strategy - identifies what needs there are to be satisfied VDA Quality Management Center 104 WP ID WP Name WP Characteristics - establishes the options and approach for satisfying the needs (black -box andor white -box-testing, boundary class test determination, regression testing strategy , etc.) - establishes the evaluation criteria against which the strategic options are evaluated - identifies any constraintsrisks and how these will be addressed - test design techniques - test completion criteria - test ending criteria - test start, abort and re -start criteria - metrics to be collected - test data requirements - retesting and regression testing - suspension and resumption criteria - deviations from the Organizational Test Strategy Test data requirements Test environment requirements Test sub -processes Test de liverables Testing activities and estimates 09-00 Policy Authorized Available to all personnel impacted by the policy Establishes practicesrules to be adhered to 09-03 Reuse policy Identification of reuse requirements Establishes the rules of reuse Documents the reuse adoption strategy including goals and objectives Identification of the reuse program Identification of the name of the reuse sponsor Identification of the reuse program participants Identification of the reuse steering function Identification of reuse program support functions 10-00 Process description A detailed description of the processprocedure which includes: - tailoring of the standard process (if applicable) - purpose of the process - outcomes of the process - task and activitie s to be performed and ordering of tasks - critical dependencies between task activities - expected time required to execute task - inputoutput work products - links between input and outputs work products Identifies process entry and exit criteria Identifies internal and external interfaces to the process Identifies process measures Identifies quality expectations Identifies functional roles and responsibilities Approved by authorized personnel 11-00 Product Is a resultdeliverable of the execution of a proce ss, includes services, systems (software and hardware) and processed materials Has elements that satisfy one or more aspects of a process purpose May be represented on various media (tangible and intangible) 11-03 Product release information Coverage for key elements (as appropriate to the application): Description of what is new or changed (including features removed) System information and requirements VDA Quality Management Center 105 WP ID WP Name WP Characteristics Identification of conversion programs and instructions Release numbering implementation may include: - the major release number - the feature release number - the defect repair number - the alpha or beta release; and the iteration within the alpha or beta release Identification of the component list (version identification included): - hardware software product elements, libraries, etc. - associated documentation list Newchanged parameter information ( e.g. for application parameters or global variables ) andor commands Backup and recovery information List of open known problems, faults, warning information, etc. Identification of verification and diagnostic procedures Technical support information Copyright and license information The release note may include an introduction, the environmental requirements, installation procedures, product invocation, new feature identification and a list of defect resolutions, known defects and workarounds 11-04 Product release package Includes the hardwaresoftwareproduct Includes and associated release elements such as: - system hardwaresoftwareproduct elements - associated customer documentation - application parameter definitions defined - command language defined - installation instructions - release letter 11-05 Software unit Follows established coding standards (as appropriate to the language and application): - commented - structured or optimized - meaningful naming conventions - parameter information identified - error codes defined - error messages descriptive and meaningful - formatting - indented, levels Follows data definition standards (as appropriate to the language and applica tion): - variables defined - data types defined - classes and inheritance structures defined - objects defined Entity relationships defined Database layouts are defined File structures and blocking are defined Data structures are defined Algorithms are defined Functional interfaces defined 11-06 System All elements of the product release are included Any required hardware Integrated product VDA Quality Management Center 106 WP ID WP Name WP Characteristics Customer documentation Fully configured set of the system elements: - application parameters defined - commands defined - data loaded or converted 11-07 Temporary solution Problem identification Release"
        ],
        "relevant_ids": [
          "chunk_10",
          "chunk_11",
          "chunk_15"
        ],
        "groundedness": 0.8,
        "hallucination_rate": 0.1
      }
    ],
    "avg_groundedness": 0.8,
    "avg_hallucination_rate": 0.1
  },
  "multi_hop": {
    "recall_at_k": {
      "recall@1": 0.0,
      "recall@3": 0.0,
      "recall@5": 0.0625,
      "recall@10": 0.0625
    },
    "precision_at_k": {
      "precision@1": 0.0,
      "precision@3": 0.0,
      "precision@5": 0.0,
      "precision@10": 0.0
    },
    "groundedness_scores": [
      0.8,
      0.8
    ],
    "hallucination_rates": [
      0.1,
      0.1
    ],
    "query_details": [
      {
        "query": "How does AUTOSAR ECU State Manager relate to Automotive SPICE processes?",
        "retrieved_ids": [
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null
        ],
        "retrieved_contents": [
          "BSW_00348, SRS_BSW_00353, SRS_BSW_00361, SRS_BSW_00439, SRS_- BSW_00449, SRS_BSW_00308, SRS_BSW_00309, SRS_BSW_00330, SRS_- BSW_00010, SRS_BSW_00341, SRS_BSW_00334) 210 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager",
          "Specification of ECU State Manager AUTOSAR CP R20-11 Document TitleSpecification of ECU State Manager Document Owner AUTOSAR Document Responsibility AUTOSAR Document Identification No 78 Document Status published Part of AUTOSAR Standard Classic Platform Part of Standard Release R20-11 Document Change History Date Release Changed by Description 2020-11-30 R20-11AUTOSAR Release ManagementCorrected broken chapter structure EcuM_UserType handling improved Minor content changes, clarifications (multi-core, configuration, values) 2019-11-28 R19-11AUTOSAR Release ManagementNo content changes Changed Document Status from Final to published 2018-10-31 4.4.0AUTOSAR Release ManagementReworked BswM interface through EcuM_GoDownHaltPoll Removed EcuM fixed version references 2017-12-08 4.3.1AUTOSAR Release ManagementAdapt API Can_CheckWakeup Removed ConfigPtr parameter Removed Default error Removed unused DIO driver EcuM AUTOSAR service configure on service partition only 2016-11-30 4.3.0AUTOSAR Release ManagementPartial Network Cluster Support Initialization BSW scheduler slipt Added a driver initialization list Removed EcuM_StateType 1 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 2015-07-31 4.2.2AUTOSAR Release ManagementReworked slave core poll sequence Reviewed multicore shutdown synchronization Reclassified error types Editorial changes 2014-10-31 4.2.1AUTOSAR Release ManagementAdded switch configuration Defined initialization order for InitListZeroInitListOne Definition of the name pattern of c-init-data struct corrected Type conflicts solved Editorial changes 2014-03-31 4.1.3AUTOSAR Release ManagementEcuM errors reworked Inconsistencies between APIs and Interfaces resolved Type conflicts solved Editorial changes 2013-10-31 4.1.2AUTOSAR Release ManagementAdded API table for service interfaces Fixed traceability topics General clean-up of requirements (reviewed different interfaces, operations, descriptions and figures). Editorial changes 2 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 2013-03-15 4.1.1AUTOSAR AdministrationSpecified reset mode to use in case of pending wakeup events during shutdown Added callout for Reset Loop Detection Extended specification of parameter time of function EcuM_GetMostRecentShutdown Improved configuration description Added new APIs to enable asynchronous Trcv handling for CANFR Wakeup Adaption of EcuM Flex to support BSW modules distributed over multiple partitions Reclassified which Production Errors are Extended Production Errors Added possible error to operations of ClientServer-Interfaces, where no errors where defined Enhancement of configuration to initialize BSW modules by the EcuM Flex 2011-12-22 4.0.3AUTOSAR AdministrationFixed interoperability problems between EcuM and BswM Terminology of ECU State Manager Flexible more consistently described Modification of sleep sequences to minimize misses of wakeup interrupts 2010-09-30 3.1.5AUTOSAR AdministrationUpdated pseudo code for AUTOSAR Services Update startup procedure for multi core systems 2010-02-02 3.1.4AUTOSAR AdministrationRemoved state machine to accommodate mode-dependent scheduling Added Multi-Core support Added Alarm Clock feature Revised disclaimer 2008-08-13 3.1.1AUTOSAR AdministrationLegal disclaimer revised 3 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 2007-12-21 3.0.1AUTOSAR AdministrationFixed Wakeup mechanisms Included optional triggering of Watchdog Manager during Startup, Shutdown, and Sleep Extended startup sequence to have more flexibility and to directly initialize all other BSW modules Generated APIs from BSW UML model Generated configuration from Meta Model Document meta information extended Small layout adaptations made 2007-01-24 2.1.15AUTOSAR AdministrationCorrected startup flow and wakeup concept. Added specification for AUTOSAR ports. Modified configuration for compliance with variant management. Added new API services. Legal disclaimer revised Release Notes added Advice for users revised Revision Information added 2006-05-16 2.0AUTOSAR Administration Initial Release 4 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 Disclaimer This work (specification andor software implementation) and the material contained in it, as released by AUTOSAR, is for the purpose of information only. AUTOSAR and the companies that have contributed to it shall not be liable for any use of the work. The material contained in this work is protected by copyright and other types of intel- lectual property rights. The commercial exploitation of the material contained in this work requires a license to such intellectual property rights. This work may be utilized or reproduced without any modification, in any form or by any means, for informational purposes only. For any other purpose, no part of the work may be utilized or reproduced, in any form or by any means, without permission in writing from the publisher. The work has been developed for automotive applications only. It has neither been developed, nor tested for non-automotive applications. The word AUTOSAR and the AUTOSAR logo are registered trademarks. 5 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 Table of Contents 1 Introduction and Functional Overview 13 1.1 Backwards Compatibility to Previous ECU Manager Module Versions . 14 2 Definitions and Abbreviations 15 2.1 Definitions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 15 2.2 Abbreviations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 15 3 Related documentation 17 3.1 Input documents related standards and norms . . . . . . . . . . . . 17 3.2 Related specification . . . . . . . . . . . . . . . . . . . . . . . . . . . . 17 4 Constraints and Assumptions 18 4.1 Limitations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 18 4.2 Hardware Requirements . . . . . . . . . . . . . . . . . . . . . . . . . . 18 4.3 Applicability to car domains . . . . . . . . . . . . . . . . . . . . . . . . 18 5 Dependencies to other modules 19 5.1 SPAL Modules . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 19 5.1.1 MCU Driver . . . . . . . . . .",
          "are finished processing, the cores must be synchronized before entering SHUTDOWN. The BswM (which is distributed over all partitions) ascertains that the ECU should be shut down and synchronizes with each BwsM in the ECU. All BswMs induce de- initialization of all the partitions BSWs, SWCs and CDDs and send appropriate signals to the other BswMs to indicate their readiness to shut down. 78 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 For a shutdown of the ECU, the BswM (which lies in the same partition of the master EcuM) ultimately calls GoOff on the master core which distributes that request to all slave cores. The master EcuM de-initializes the BswM, and the SchM. The EcuMs on the slave cores de-initialize their SchM and BswM and then send a signal to indicate that the core is ready for ShutdownOS (again, see section section 7.9.3 Master Core - Slave Core Signalling for details). The master EcuM waits for the signal from each slave core EcuM and then initiates shutdown as usual on the master core (the master EcuM calls ShutdownAllCores , and the ECU is put to bed with the global shutdown hook) 79 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 7.9.6.1 Master Core SHUTDOWN module EcuMmodule SchMmodule BswMmodule McOsIntegration Code opt Pending wakeup events?loop over every BswM running in this core loop FOR all configured cores EcuM_OnGoOffOne() ShutdownAllCores(StatusType)EcuM_GetPendingWakeupEvents(EcuM_WakeupSourceType)BswM_Deinit() WaitEvent(Mask)SchM_Deinit()GetCoreID(CoreIdType) EcuM_SelectShutdownTarget(Std_ReturnType, EcuM_ShutdownTargetType, EcuM_ShutdownModeType) Figure 7.23: Master Core OffPreOS Sequence 80 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 SWS_EcuM_04020 d Integration Code module EcuMmodule McOs alt Shutdown Target Reset OffGetCoreID(CoreIdType) EcuM_AL_SwitchOff()EcuM_AL_Reset(EcuM_ResetType)EcuM_OnGoOffTwo() Figure 7.24: Master Core OffPostOS Sequencec () 81 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 7.9.6.2 Slave Core SHUTDOWN module EcuMmodule McOsmodule :SchMIntegration Code module BswM loop over every BswM running in this core SetEvent(TaskId, Mask)GetCoreID(CoreIdType) SchM_Deinit()BswM_Deinit()EcuM_OnGoOffOne() Figure 7.25: Slave Core OffPreOS Sequence SWS_EcuM_04022 d 82 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 module EcuMmodule McOsIntegration Code EcuM_OnGoOffTwo()GetCoreID(CoreIdType) Figure 7.26: Slave Core OffPostOS Sequencec () 7.9.7 SLEEP Phase When the shutdown target Sleep is requested, all cores are put to sleep simultaneously. The MCU must issue a halt for each core. As task timing and priority are local to a core in the OS, neither the scheduler nor the RTE must be synchronized after a halt. Because the master core could issue the MCU halt before all slave cores are finished processing, the cores must be synchronized before entering GoHalt. The BswMs ascertain that sleep should be initiated and distribute an appropriate ECU mode to each core. The BSWs, SWCs and CDDs on the slave cores must be informed by their partition local BswM, de-initialize appropriately and send appropriate mode requests to the BswM to indicate their readiness. If the ECU is put to sleep, the halts must be synchronized so that all slave cores are halted before the master core computes the checksum. The ECU Manager module on the master core uses the same signal mechanism as for synchronizing cores on Go Off. Similarly, the ECU Manager module on the master core must validate the checksum before releasing the slave cores from the halt state 83 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 7.9.7.1 Master Core SLEEP SWS_EcuM_04023 d module EcuMmodule OsIntegration Code module :BswM GetCoreID(CoreIdType) GetResource(RES_AUTOSAR_ECUM_core)EcuM_EnableWakeupSources(EcuM_WakeupSourceType)BswM_EcuM_CurrentWakeup(sources, ECUM_WKSTATUS_NONE ) Figure 7.27: Master Core GoSleep Sequencec () SWS_EcuM_04024 d 84 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 Integration Code module :BswMPeripheral Wakeup Sourcemodule Mcumodule EcuMmodule Wakeup Sourcemodule Os HALT opt RAM check failed alt Validation Needed Yes Noalt AlarmClock Service Present EcuM_AlarmClock only pending event AND Alarm not e xpired EcuM_GenerateRamHash() EcuM_CheckRamHash(uint8)Return from interrupt()Wait for all SlaveCores to be ready to sleep() EcuM_ErrorHook(uint16)Mcu_SetMode()EcuM_SetWakeupEvent(EcuM_WakeupSourceType)Mcu_SetMode(Mcu_ModeType) Signal all SlaveCores to continue()DisableAllInterrupts()Module_CheckWakeup() BswM_EcuM_CurrentWakeup(Sources, ECUM_WKSTATUS_VALIDATED)Mcu_SetMode(Mcu_ModeType)Interrupt() EcuM_GenerateRamHash()EcuM_CheckWakeup(EcuM_WakeupSourceType) EnableAllInterrupts()DisableAllInterrupts() BswM_EcuM_CurrentWakeup(sources, ECUM_WKSTATUS_PENDING)Activate PLL() Figure 7.28: Master Core Halt Sequence 85 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 c(SRS_ModeMgm_09239) SWS_EcuM_04025 d module EcuMmodule :BswMIntegration Code module Mcumodule Wakeup Sourcemodule Os loop WHILE no pendingvalidated events loop FOR all wakeup sources that need polling opt Wakeup detected alt Yes No ! EnableAllInterrupts() Signal SlaveCores to continue()EcuM_SetWakeupEvent(EcuM_WakeupSourceType) EcuM_GetPendingWakeupEvents(EcuM_WakeupSourceType)EcuM_SleepActivity() Module_CheckWakeup()Mcu_SetMode (Mcu_ModeType) BswMEcuM_CurrentWakeup(sources, ECUM_WKSTATUS_VALIDATED)DisableAllInterrupts() BswM_EcuM_CurrentWakeup(sources, ECUM_WKSTATUS_PENDING)EcuM_CheckWakeup(EcuM_WakeupSourceType) Figure 7.29: Master Core Poll Sequencec () SWS_EcuM_04026 d 86 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 module Mcumodule Osmodule EcuMIntegration Code Mcu_SetMode(Mcu_ModeType) EcuM_GetPendingWakeupEvents(EcuM_WakeupSourceType) ReleaseResource(RES_AUTOSAR_ECUM_core)EcuM_DisableWakeupSources(EcuM_WakeupSourceType)EnableAllInterrupts()DisableAllInterrupts() EcuM_AL_DriverRestart() Figure 7.30: Master Core WakeupRestart Sequencec () 7.9.7.2 Slave Core SLEEP SWS_EcuM_04027 d 87 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 module EcuMmodule Osmodule :BswMIntegration Code GetCoreID(CoreIdType) EcuM_EnableWakeupSources(EcuM_WakeupSourceType) GetResource(RES_AUTOSAR_ECUM_core)BswM_EcuM_CurrentWakeup(sources, ECUM_WKSTATUS_NONE ) Figure 7.31: Slave Core GoSleep Sequencec () SWS_EcuM_04028 d 88 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 Integration Code module Wakeup Sourcemodule EcuMmodule McuPeripheral Wakeup Sourcemodule Osmodule :BswM HALT alt Validation Needed Yes NoMcu_SetMode()EcuM_SetWakeupEvent(EcuM_WakeupSourceType)Interrupt()Signal MasterCore that Slave is ready to sleep() Return from interrupt()EcuM_CheckWakeup(EcuM_WakeupSourceType) BswM_EcuM_CurrentState(ECUM_WKSTATUS_PENDING) Wait for MasterCore to continue()DisableAllInterrupts() BswM_EcuM_CurrentWakeup(Sources, ECUM_WKSTATUS_VALI DATED)Module_CheckWakeup() EnableAllInterrupts()Mcu_SetMode(Mcu_ModeType) Figure 7.32: Slave Core Halt Sequencec () SWS_EcuM_04029 d 89 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 module EcuMmodule Wakeup Sourcemodule McuIntegration Code module Osmodule BswM loop WHILE no pendingvalidated events loop FOR all wakeup sources that need polling opt Wakeup detected alt Yes No ! Mcu_SetMode(Mcu_ModeType) Wait for signal from MasterCore to continue()EcuM_SetWakeupEvent(EcuM_WakeupSourceType)Module_CheckWakeup() BswM_EcuM_CurrentWakeup(sources, ECUM_WKSTATUS_PEND ING)EcuM_GetPendingWakeupEvents(EcuM_WakeupSourceType)EnableAllInterrupts() EcuM_CheckWakeup(EcuM_WakeupSourceType)DisableAllInterrupts() BswM_EcuM_CurrentWakeup(sources, ECUM_WKSTATUS_VALI DATED)EcuM_SleepActivity() Figure 7.33: Slave Core Poll Sequencec () SWS_EcuM_04030 d 90 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 module Mcumodule Osmodule EcuMIntegration Code Mcu_SetMode(Mcu_ModeType)DisableAllInterrupts() ReleaseResource(RES_AUTOSAR_ECUM_core)EcuM_DisableWakeupSources(EcuM_WakeupSourceType)EnableAllInterrupts() Figure 7.34: Slave Core WakeupRestart Sequencec () 7.9.8 Runnables and Entry points 7.9.8.1 Internal behavior SWS_EcuM_03018 dThe definition of the internal behavior of the the ECU Manager module shall be as follows. This detailed description is only needed for the configura- tion",
          "of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 module Osmodule Mcumodule EcuMIntegration Code opt Configuration data inconsistent EcuM_LoopDetection()EcuM_AL_DriverInitOne()Check consistency of configuration data()EcuM_AL_DriverInitZero() EcuM_DeterminePbConfiguration(const EcuM_ConfigType) StartOS(ECUM_DEFAULT_APP_MODE)Mcu_GetResetReason()EcuM_ErrorHook(ECUM_E_CONFIGURATION_DATA_INCONSISTEN T) Mcu_GetResetReason(Mcu_ResetType) EcuM_SelectShutdownTarget(Std_ReturnType, EcuM_ShutdownTargetType, EcuM_ShutdownModeType)Map reset reason to wakeup source() Figure 7.4: StartPreOS Sequence 37 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 The StartPreOS Sequence is intended to prepare the ECU to initialize the OS and should be kept as short as possible. Drivers should be initialised in the UP phase when possible and the callouts should also be kept short. Interrupts should not be used during this sequence. If interrupts have to be used, only category I interrupts are allowed in the StartPreOS Sequence 13. Initialization of drivers and hardware abstraction modules is not strictly defined by the ECU Manager. Two callouts EcuM_AL_DriverInitZero (see SWS_EcuM_02905 ) and EcuM_AL_DriverInitOne (see SWS_EcuM_02907 ) are provided to define the init blocks 0 and I. These blocks contain the initialization activities associated with the StartPreOS sequence. MCU_Init does not provide complete MCU initialization. Additionally, hardware depen- dent steps have to be executed and must be defined at system design time. These steps are supposed to be taken within the EcuM_AL_DriverInitZero (seeEcuM_- AL_DriverInitZero , SWS_EcuM_02905 ) or EcuM_AL_DriverInitOne call- outs (see EcuM_AL_DriverInitOne , SWS_EcuM_02907 ). Details can be found in the Specification of MCU Driver 10. SWS_EcuM_02181 dThe ECU Manager module shall call EcuM_GetValidated- WakeupEvents with the configured default shutdown target ( EcuMDefaultShut- downTarget ).c() See section 7.7 Shutdown Targets. SWS_EcuM_02603 dThe StartPreOS Sequence shall initialize all basic software modules that are needed to start the OS. c() 7.3.3 Activities in the StartPostOS Sequence StartPostOS Sequence Initialization Activity Comment Opt. Start BSW Scheduler no Init BSW Mode Manager no Init BSW SchedulerInitialize the semaphores for critical sections used by BSW modulesno Start Scheduler Timing Start periodical events for BSWSWCsno Table 7.2: StartPostOS Sequence Note to column Opt. : Optional activities can be switched on or off by configuration. See section 10.1 Common Containers and configuration parameters for details. SWS_EcuM_02932 dWhen activated through the EcuM_StartupTwo (see SWS_EcuM_02838 ) function, the ECU Manager module shall perform the actions in StartPostOS Sequence (see table 7.2). c(SRS_ModeMgm_09113) 3Category II interrupts require a running OS while category I interrupts do not. AUTOSAR OS re- quires each interrupt vector to be exclusively put into one category. 38 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 module SchMmodule EcuMmodule BswM SchM_Start(): Std_ReturnType SchM_StartTiming(const SchM_ConfigType)SchM_Init(const SchM_ConfigType)BswM_Init(const BswM_ConfigType ) Figure 7.5: StartPostOS Sequence 7.3.4 Checking Configuration Consistency 7.3.4.1 The Necessity for Checking Configuration Consistency in the ECU Man- ager In an AUTOSAR ECU several configuration parameters are set and put into the ECU at different times. Pre-compile parameters are set, inserted into the generated source code and compiled into object code. When the source code has been compiled, link- time parameters are set, compiled, and linked with the previously configured object code into an image that is put into the ECU. Finally, post-build parameters are set, compiled, linked, and put into the ECU at a different time. All these parameters must match to obtain a stable ECU. 39 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 Figure 7.6: BSW Configuration Steps The configuration tool can check the consistency of configuration time parameters it- self. The compiler may detect parameter errors at compilation time and the linker may find additional errors at link time. Unfortunately, finding configuration errors in post- build parameters is very difficult. This can only be achieved by checking that the pre-compile and link-time parameter settings used when compiling the code are exactly the same as the pre-compile and link-time parameter settings used when configuring and com- piling the post-build parameters. This can only be done at run-time. Explanation for SWS_EcuM_02796: The ECU Manager module checks the consis- tency once before initializing the first BSW module to avoid multiple checks scattered over the different BSW modules. This also implies that: SWS_EcuM_02796 dThe ECU Manager module shall not only check the consistency of its own parameters but of all post-build configurable BSW modules before initializing the first BSW module. c() The ECU Manager Configuration Tool must compute a hash value over all pre-compile and link-time configuration parameters of all BSW modules and store the value in the link-time ECUM_CONFIGCONSISTENCY_HASH (seeEcuMConfigConsistencyHash ) configuration parameter. The hash value is necessary for two reasons. First, the pre- compile and link-time parameters are not accessible at run-time. Second, the check 40 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 must be very efficient at run-time. Comparing hundreds of parameters would cause an unacceptable delay in the ECU startup process. The ECU Manager module Configuration Tool must in turn put the computed ECUM_ CONFIGCONSISTENCY_HASH value into the field in the EcuM_ConfigType structure which contains the root of all post-build configuration parameters. SWS_EcuM_02798 dThe ECU Manager module shall check in EcuM_Init (see SWS_EcuM_02811 ) that the field in the structure is equal to the value of ECUM_ CONFIGCONSISTENCY_HASH .c() By computing hash values at configuration time and comparing them at run-time the EcuM code can be very efficient and is furthermore independent of a particular hash computation algorithm. This allows the use of complex hash computation algorithms, e.g. cryptographically strong hash functions. Note that the same hash algorithm can be used to produce the value for the post-build configuration identifier in the EcuM_ConfigType structure. Then the hash algorithm is applied to the post-build parameters instead of the pre-compile and link-time param- eters. SWS_EcuM_02799 dThe hash computation algorithm used to compute a hash value over all pre-compile and link-time configuration parameters of all BSW modules shall always produce the same hash value for the same set of configuration data regardless of the order of configuration parameters in the XML files. c() 7.3.4.2 Example Hash Computation Algorithm Note: This chapter is not normative. It describes one possible way to compute hash values. A simple",
          "function defined in a common API in the Basis-SWSWS_EcuM_NA_00000 SRS_BSW_00172 The scheduling strategy that is built inside the Basic Software Modules shall be compatible with the strategy used in the systemSWS_EcuM_02836 SRS_BSW_00307 Global variables naming convention SWS_EcuM_NA_00000 SRS_BSW_00308 AUTOSAR Basic Software Modules shall not define global data in their header files, but in the C fileSWS_EcuM_NA_00000 SRS_BSW_00309 All AUTOSAR Basic Software Modules shall indicate all global data with read-only purposes by explicitly assigning the const keywordSWS_EcuM_NA_00000 SRS_BSW_00314 All internal driver modules shall separate the interrupt frame definition from the service routineSWS_EcuM_NA_00000 5 23 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 4 Requirement Description Satisfied by SRS_BSW_00323 All AUTOSAR Basic Software Modules shall check passed API parameters for validitySWS_EcuM_03009 SRS_BSW_00325 The runtime of interrupt service routines and functions that are running in interrupt context shall be kept shortSWS_EcuM_NA_00000 SRS_BSW_00327 Error values naming convention SWS_EcuM_04032 SRS_BSW_00330 It shall be allowed to use macros instead of functions where source code is used and runtime is criticalSWS_EcuM_NA_00000 SRS_BSW_00331 All Basic Software Modules shall strictly separate error and status informationSWS_EcuM_91005 SRS_BSW_00333 For each callback function it shall be specified if it is called from interrupt context or notSWS_EcuM_02171 SWS_EcuM_02345 SRS_BSW_00334 All Basic Software Modules shall provide an XML file that contains the meta dataSWS_EcuM_NA_00000 SRS_BSW_00337 Classification of development errors SWS_EcuM_04032 SRS_BSW_00339 Reporting of production relevant error statusSWS_EcuM_02987 SRS_BSW_00341 Module documentation shall contains all needed informationsSWS_EcuM_NA_00000 SRS_BSW_00347 A Naming seperation of different instances of BSW drivers shall be in placeSWS_EcuM_NA_00000 SRS_BSW_00348 All AUTOSAR standard types and constants shall be placed and organized in a standard type header fileSWS_EcuM_NA_00000 SRS_BSW_00350 All AUTOSAR Basic Software Modules shall allow the enabling disabling of detection and reporting of development errors.SWS_EcuM_04032 SRS_BSW_00353 All integer type definitions of target and compiler specific scope shall be placed and organized in a single type headerSWS_EcuM_NA_00000 SRS_BSW_00358 The return type of init() functions implemented by AUTOSAR Basic Software Modules shall be voidSWS_EcuM_02811 SRS_BSW_00359 All AUTOSAR Basic Software Modules callback functions shall avoid return types other than void if possibleSWS_EcuM_02826 SWS_EcuM_02829 SRS_BSW_00360 AUTOSAR Basic Software Modules callback functions are allowed to have parametersSWS_EcuM_02826 SWS_EcuM_02829 SRS_BSW_00361 All mappings of not standardized keywords of compiler specific scope shall be placed and organized in a compiler specific type and keyword headerSWS_EcuM_NA_00000 5 24 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 4 Requirement Description Satisfied by SRS_BSW_00373 The main processing function of each AUTOSAR Basic Software Module shall be named according the defined conventionSWS_EcuM_02837 SRS_BSW_00385 List possible error notifications SWS_EcuM_04032 SRS_BSW_00406 A static status variable denoting if a BSW module is initialized shall be initialized with value 0 before any APIs of the BSW module is calledSWS_EcuM_NA_00000 SRS_BSW_00407 Each BSW module shall provide a function to read out the version information of a dedicated module implementationSWS_EcuM_02813 SRS_BSW_00410 Compiler switches shall have defined valuesSWS_EcuM_NA_00000 SRS_BSW_00411 All AUTOSAR Basic Software Modules shall apply a naming rule for enablingdisabling the existence of the APISWS_EcuM_02813 SRS_BSW_00413 An index-based accessing of the instances of BSW modules shall be doneSWS_EcuM_NA_00000 SRS_BSW_00414 Init functions shall have a pointer to a configuration structure as single parameterSWS_EcuM_02811 SRS_BSW_00415 Interfaces which are provided exclusively for one module shall be separated into a dedicated header fileSWS_EcuM_NA_00000 SRS_BSW_00416 The sequence of modules to be initialized shall be configurableSWS_EcuM_02559 SRS_BSW_00417 Software which is not part of the SW-C shall report error events only after the DEM is fully operational.SWS_EcuM_NA_00000 SRS_BSW_00422 Pre-de-bouncing of error status information is done within the DEMSWS_EcuM_NA_00000 SRS_BSW_00425 The BSW module description template shall provide means to model the defined trigger conditions of schedulable objectsSWS_EcuM_02837 SRS_BSW_00426 BSW Modules shall ensure data consistency of data which is shared between BSW modulesSWS_EcuM_NA_00000 SRS_BSW_00427 ISR functions shall be defined and documented in the BSW module description templateSWS_EcuM_NA_00000 SRS_BSW_00432 Modules should have separate main processing functions for readreceive and writetransmit data pathSWS_EcuM_NA_00000 SRS_BSW_00437 Memory mapping shall provide the possibility to define RAM segments which are not to be initialized during startupSWS_EcuM_NA_00000 SRS_BSW_00439 Enable BSW modules to handle interruptsSWS_EcuM_NA_00000 5 25 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 4 Requirement Description Satisfied by SRS_BSW_00440 The callback function invocation by the BSW module shall follow the signature provided by RTE to invoke servers via Rte_Call APISWS_EcuM_02826 SWS_EcuM_02829 SRS_BSW_00449 BSW Service APIs used by Autosar Application Software shall return a Std_ReturnTypeSWS_EcuM_NA_00000 SRS_BSW_00450 A Main function of a un-initialized module shall return immediatelySWS_EcuM_NA_00000 SRS_BSW_00453 BSW Modules shall be harmonized SWS_EcuM_NA_00000 SRS_ModeMgm_- 09072ECU shutdown shall be forced SWS_EcuM_03022 SRS_ModeMgm_- 09098Storing the wake-up reasons shall be availableSWS_EcuM_02826 SRS_ModeMgm_- 09100Selection of wake-up sources shall be configurableSWS_EcuM_02389 SRS_ModeMgm_- 09104ECU State Manager shall take over control after OS shutdownSWS_EcuM_02952 SWS_EcuM_02953 SRS_ModeMgm_- 09113Initialization of Basic Software modules shall be doneSWS_EcuM_02932 SRS_ModeMgm_- 09114Startinginvoking the shutdown process shall be providedSWS_EcuM_00624 SWS_EcuM_02185 SWS_EcuM_02585 SWS_EcuM_02812 SWS_EcuM_02822 SRS_ModeMgm_- 09116Requesting and releasing the RUN state shall be providedSWS_EcuM_04115 SWS_EcuM_04116 SWS_EcuM_04117 SWS_EcuM_04118 SWS_EcuM_04119 SWS_EcuM_04120 SWS_EcuM_04121 SWS_EcuM_04123 SWS_EcuM_04125 SWS_EcuM_04126 SWS_EcuM_04127 SWS_EcuM_04128 SWS_EcuM_04129 SWS_EcuM_04130 SWS_EcuM_04132 SRS_ModeMgm_- 09126An API for querying the wake-up reason shall be providedSWS_EcuM_02827 SWS_EcuM_02828 SWS_EcuM_02830 SWS_EcuM_02831 SRS_ModeMgm_- 09127The ECU State Manager shall de-initialize Basic Software modules where appropriate during the shutdown processSWS_EcuM_03021 SRS_ModeMgm_- 09128Several shutdown targets shall be supportedSWS_EcuM_02822 SWS_EcuM_02824 SWS_EcuM_02825 SRS_ModeMgm_- 09136The ECU State Manager shall be the receiver of all wake-up eventsSWS_EcuM_04091 SRS_ModeMgm_- 09186Alarm Clock shall be active while the ECU is poweredSWS_EcuM_04054 SWS_EcuM_04055 SWS_EcuM_04056 SWS_EcuM_04057 SWS_EcuM_04058 SWS_EcuM_04059 SWS_EcuM_04060 SRS_ModeMgm_- 09187In Case of wakeup, all the alarm clock shall be canceledSWS_EcuM_04009 SRS_ModeMgm_- 09188In Case of startup, all the alarm clock shall be canceledSWS_EcuM_04010 SRS_ModeMgm_- 09190The alarm clock service shall allow setting an alarm relative to the current time using a time resolution of secondsSWS_EcuM_04054 5 26 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 4 Requirement Description Satisfied by SRS_ModeMgm_- 09194The alarm clock service shall allow setting the clockSWS_EcuM_04064 SRS_ModeMgm_- 09199The alarm clock service shall allow setting an alarm absolute by using an absolute time with a resolution of secondsSWS_EcuM_04057 SRS_ModeMgm_- 09234The EcuM shall handle the initialization of Basic Software modulesSWS_EcuM_02559",
          "BSW_00348, SRS_BSW_00353, SRS_BSW_00361, SRS_BSW_00439, SRS_- BSW_00449, SRS_BSW_00308, SRS_BSW_00309, SRS_BSW_00330, SRS_- BSW_00010, SRS_BSW_00341, SRS_BSW_00334) 210 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager",
          "Slave Core GoSleep Sequencec () SWS_EcuM_04028 d 88 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 Integration Code module Wakeup Sourcemodule EcuMmodule McuPeripheral Wakeup Sourcemodule Osmodule :BswM HALT alt Validation Needed Yes NoMcu_SetMode()EcuM_SetWakeupEvent(EcuM_WakeupSourceType)Interrupt()Signal MasterCore that Slave is ready to sleep() Return from interrupt()EcuM_CheckWakeup(EcuM_WakeupSourceType) BswM_EcuM_CurrentState(ECUM_WKSTATUS_PENDING) Wait for MasterCore to continue()DisableAllInterrupts() BswM_EcuM_CurrentWakeup(Sources, ECUM_WKSTATUS_VALI DATED)Module_CheckWakeup() EnableAllInterrupts()Mcu_SetMode(Mcu_ModeType) Figure 7.32: Slave Core Halt Sequencec () SWS_EcuM_04029 d 89 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 module EcuMmodule Wakeup Sourcemodule McuIntegration Code module Osmodule BswM loop WHILE no pendingvalidated events loop FOR all wakeup sources that need polling opt Wakeup detected alt Yes No ! Mcu_SetMode(Mcu_ModeType) Wait for signal from MasterCore to continue()EcuM_SetWakeupEvent(EcuM_WakeupSourceType)Module_CheckWakeup() BswM_EcuM_CurrentWakeup(sources, ECUM_WKSTATUS_PEND ING)EcuM_GetPendingWakeupEvents(EcuM_WakeupSourceType)EnableAllInterrupts() EcuM_CheckWakeup(EcuM_WakeupSourceType)DisableAllInterrupts() BswM_EcuM_CurrentWakeup(sources, ECUM_WKSTATUS_VALI DATED)EcuM_SleepActivity() Figure 7.33: Slave Core Poll Sequencec () SWS_EcuM_04030 d 90 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 module Mcumodule Osmodule EcuMIntegration Code Mcu_SetMode(Mcu_ModeType)DisableAllInterrupts() ReleaseResource(RES_AUTOSAR_ECUM_core)EcuM_DisableWakeupSources(EcuM_WakeupSourceType)EnableAllInterrupts() Figure 7.34: Slave Core WakeupRestart Sequencec () 7.9.8 Runnables and Entry points 7.9.8.1 Internal behavior SWS_EcuM_03018 dThe definition of the internal behavior of the the ECU Manager module shall be as follows. This detailed description is only needed for the configura- tion of the local RTE. InternalBehavior EcuStateManager Runnable entities of the EcuStateManager RunnableEntity SelectShutdownTarget symbol EcuM_SelectShutdownTarget canbeInvokedConcurrently TRUE RunnableEntity GetShutdownTarget 91 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 symbol EcuM_GetShutdownTarget canbeInvokedConcurrently TRUE RunnableEntity GetLastShutdownTarget symbol EcuM_GetLastShutdownTarget canbeInvokedConcurrently TRUE RunnableEntity SelectShutdownCause symbol EcuM_SelectShutdownCause canbeInvokedConcurrently TRUE RunnableEntity GetShutdownCause symbol EcuM_GetShutdownCause canbeInvokedConcurrently TRUE RunnableEntity SelectBootTarget symbol EcuM_SelectBootTarget canbeInvokedConcurrently TRUE RunnableEntity GetBootTarget symbol EcuM_GetBootTarget canbeInvokedConcurrently TRUE RunnableEntity SetRelWakeupAlarm symbol EcuM_SetRelWakeupAlarm canbeInvokedConcurrently TRUE RunnableEntity SetAbsWakeupAlarm symbol EcuM_SetAbsWakeupAlarm canbeInvokedConcurrently TRUE RunnableEntity AbortWakeupAlarm symbol EcuM_AbortWakeupAlarm canbeInvokedConcurrently TRUE RunnableEntity GetCurrentTime symbol EcuM_GetCurrentTime canbeInvokedConcurrently TRUE RunnableEntity GetWakeupTime symbol EcuM_GetWakeupTime canbeInvokedConcurrently TRUE RunnableEntity SetClock symbol EcuM_SetClock canbeInvokedConcurrently TRUE RunnableEntity RequestRUN symbol EcuM_RequestRUN canbeInvokedConcurrently TRUE RunnableEntity ReleaseRUN symbol EcuM_ReleaseRUN canbeInvokedConcurrently TRUE RunnableEntity RequestPOSTRUN symbol EcuM_RequestPOST_RUN canbeInvokedConcurrently TRUE RunnableEntity ReleasePOSTRUN symbol EcuM_ReleasePOST_RUN canbeInvokedConcurrently TRUE Port present for each user. There are NU users SR000.RequestRUN - RequestRUN SR000.ReleaseRUN - ReleaseRUN SR000.RequestPOSTRUN - RequestPOSTRUN SR000.ReleasePOSTRUN - RequestPOSTRUN PortArgument portSR000, value.typeEcuM_UserType, value.valueEcuMUser0.User 92 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 (...) SRnnn.RequestRUN - RequestRUN SRnnn.ReleaseRUN - ReleaseRUN SRnnn.RequestPOSTRUN - RequestPOSTRUN SRnnn.ReleasePOSTRUN - RequestPOSTRUN PortArgument portSRnnn, value.typeEcuM_UserType, value.valueEcuMUsernnn.User shutDownTarget.SelectShutdownTarget - SelectShutdownTarget shutDownTarget.GetShutdownTarget - GetShutdownTarget shutDownTarget.GetLastShutdownTarget - GetLastShutdownTarget shutDownTarget.SelectShutdownCause - SelectShutdownCause shutDownTarget.GetShutdownCause - GetShutdownCause bootTarget.SelectBootTarget - SelectBootTarget bootTarget.GetBootTarget - GetBootTarget alarmClock.SetRelWakeupAlarm- SetRelWakeupAlarm alarmClock.SetAbsWakeupAlarm - SetAbsWakeupAlarm alarmClock.AbortWakeupAlarm - AbortWakeupAlarm alarmClock.GetCurrentTime - GetCurrentTime alarmClock.GetWakeupTime - GetWakeupTime alarmClock.SetClock - SetClock ; c() 7.10 EcuM Mode Handling The ECU State Manager provides interfaces for SW-Cs to request and release the modes RUN and POST_RUN optionally. EcuMFlex arbitrates the requests and releases made by SW-Cs and propagates the result to BswM. The cooperation between EcuM and BswM is necessary as only the BswM can decide when a transition to a different mode can be made. Due to the fact that the EcuM does not have an own state machine, the EcuM relies on the state transitions made by BswM. Therefore the EcuM does not request a state. Furthermore it notifies the BswM about the current arbitration of all requests. And the BswM is notified when the RTE has executed all Runnables belonging to a certain mode. ArchitecturalComponentsofECUModeHandling 93 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 Figure 7.35: Architectural Components of ECU Mode Handling Figure 7.35 illustrates the architectural components of ECU Mode Handling. SWS_EcuM_04115 dECU Mode Handling shall be applied when EcuMModeHan- dling is configured to true. c(SRS_ModeMgm_09116) SWS_EcuM_04116 dWhen the BswM sets a state of the EcuM by EcuM_SetState , the EcuM shall indicate the corresponding mode to the RTE. c(SRS_ModeMgm_09116) SWS_EcuM_04117 dWhen the last RUN request has been released, ECU State Manager module shall indicate this to BswM using the API BswM_EcuM_- RequestedState(ECUM_STATE_APP_RUN, ECUM_RUNSTATUS_RELEASED) .c (SRS_ModeMgm_09116) If a SW-C needs post run activity during POST_RUN (e.g. shutdown preparation), then it must request POST_RUN before releasing the RUN request. Otherwise it is not guaranteed that this SW-C will get a chance to run its POST_RUN code. SWS_EcuM_04118 dWhen the ECU State Manager is not in the state which is re- quested by a SWC, it shall inform BswM about requested states using the BswM_- EcuM_RequestedState API.c(SRS_ModeMgm_09116) POST_RUN state provides a post run phase for SW-Cs and allows them to save im- portant data or switch off peripherals. SWS_EcuM_04144 dWhen the first RUN or POST_RUN request has been received, ECU State Manager module shall indicate this to BswM using BswM_EcuM_Request- edState(ECUM_STATE_APP_RUN, ECUM_RUNSTATUS_REQUESTED) .c() SWS_EcuM_04119 dWhen the last POST_RUN request has been released, ECU State Manager module shall indicate this to BswM using the API BswM_EcuM_Re- questedState(ECUM_STATE_APP_POST_RUN, ECUM_RUNSTATUS_RELEASED) .c (SRS_ModeMgm_09116) 94 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 Hint: To prevent, that the mode machine instance of ECU Mode lags behind and the states EcuM and the RTE get out of phase, the EcuM can use acknowledgement feed- back for the mode switch notification. Note that EcuM only requests Modes from and to RUN and POST_RUN, the SLEEP Mode has to be set by BswM, as the EcuM has no information about when this Mode can be entered. State Description STARTUPInitial value. Set by Rte when Rte_Start() has been called. RUNAs soon as all necesseray BSW modules are inistialized, BswM switches to this Mode. POST_RUNEcuM requests POST_RUN, when no RUN requests are available. SLEEPEcuM requests SLEEP Mode when no RUN and POST_RUN requests are available and Shut- down Target is set to SLEEP . SHUTDOWNEcuM requests SHUTDOWN Mode when no RUN and POST_ RUN requests are available and Shutdown Target is set to SHUT - DOWN. Table 7.8: EcuM Modes SWS_EcuM_04143 dEcuM shall notify BswM about the current State by calling the in- terface BswM_EcuM_CurrentState(EcuM_StateType State) . A new state shall be set by EcuM when RTE has given its feedback via the acknowledgement port. c() 7.11 Advanced Topics 7.11.1 Relation to Bootloader The Bootloader is",
          "Specification of ECU State Manager AUTOSAR CP R20-11 Document TitleSpecification of ECU State Manager Document Owner AUTOSAR Document Responsibility AUTOSAR Document Identification No 78 Document Status published Part of AUTOSAR Standard Classic Platform Part of Standard Release R20-11 Document Change History Date Release Changed by Description 2020-11-30 R20-11AUTOSAR Release ManagementCorrected broken chapter structure EcuM_UserType handling improved Minor content changes, clarifications (multi-core, configuration, values) 2019-11-28 R19-11AUTOSAR Release ManagementNo content changes Changed Document Status from Final to published 2018-10-31 4.4.0AUTOSAR Release ManagementReworked BswM interface through EcuM_GoDownHaltPoll Removed EcuM fixed version references 2017-12-08 4.3.1AUTOSAR Release ManagementAdapt API Can_CheckWakeup Removed ConfigPtr parameter Removed Default error Removed unused DIO driver EcuM AUTOSAR service configure on service partition only 2016-11-30 4.3.0AUTOSAR Release ManagementPartial Network Cluster Support Initialization BSW scheduler slipt Added a driver initialization list Removed EcuM_StateType 1 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 2015-07-31 4.2.2AUTOSAR Release ManagementReworked slave core poll sequence Reviewed multicore shutdown synchronization Reclassified error types Editorial changes 2014-10-31 4.2.1AUTOSAR Release ManagementAdded switch configuration Defined initialization order for InitListZeroInitListOne Definition of the name pattern of c-init-data struct corrected Type conflicts solved Editorial changes 2014-03-31 4.1.3AUTOSAR Release ManagementEcuM errors reworked Inconsistencies between APIs and Interfaces resolved Type conflicts solved Editorial changes 2013-10-31 4.1.2AUTOSAR Release ManagementAdded API table for service interfaces Fixed traceability topics General clean-up of requirements (reviewed different interfaces, operations, descriptions and figures). Editorial changes 2 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 2013-03-15 4.1.1AUTOSAR AdministrationSpecified reset mode to use in case of pending wakeup events during shutdown Added callout for Reset Loop Detection Extended specification of parameter time of function EcuM_GetMostRecentShutdown Improved configuration description Added new APIs to enable asynchronous Trcv handling for CANFR Wakeup Adaption of EcuM Flex to support BSW modules distributed over multiple partitions Reclassified which Production Errors are Extended Production Errors Added possible error to operations of ClientServer-Interfaces, where no errors where defined Enhancement of configuration to initialize BSW modules by the EcuM Flex 2011-12-22 4.0.3AUTOSAR AdministrationFixed interoperability problems between EcuM and BswM Terminology of ECU State Manager Flexible more consistently described Modification of sleep sequences to minimize misses of wakeup interrupts 2010-09-30 3.1.5AUTOSAR AdministrationUpdated pseudo code for AUTOSAR Services Update startup procedure for multi core systems 2010-02-02 3.1.4AUTOSAR AdministrationRemoved state machine to accommodate mode-dependent scheduling Added Multi-Core support Added Alarm Clock feature Revised disclaimer 2008-08-13 3.1.1AUTOSAR AdministrationLegal disclaimer revised 3 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 2007-12-21 3.0.1AUTOSAR AdministrationFixed Wakeup mechanisms Included optional triggering of Watchdog Manager during Startup, Shutdown, and Sleep Extended startup sequence to have more flexibility and to directly initialize all other BSW modules Generated APIs from BSW UML model Generated configuration from Meta Model Document meta information extended Small layout adaptations made 2007-01-24 2.1.15AUTOSAR AdministrationCorrected startup flow and wakeup concept. Added specification for AUTOSAR ports. Modified configuration for compliance with variant management. Added new API services. Legal disclaimer revised Release Notes added Advice for users revised Revision Information added 2006-05-16 2.0AUTOSAR Administration Initial Release 4 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 Disclaimer This work (specification andor software implementation) and the material contained in it, as released by AUTOSAR, is for the purpose of information only. AUTOSAR and the companies that have contributed to it shall not be liable for any use of the work. The material contained in this work is protected by copyright and other types of intel- lectual property rights. The commercial exploitation of the material contained in this work requires a license to such intellectual property rights. This work may be utilized or reproduced without any modification, in any form or by any means, for informational purposes only. For any other purpose, no part of the work may be utilized or reproduced, in any form or by any means, without permission in writing from the publisher. The work has been developed for automotive applications only. It has neither been developed, nor tested for non-automotive applications. The word AUTOSAR and the AUTOSAR logo are registered trademarks. 5 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 Table of Contents 1 Introduction and Functional Overview 13 1.1 Backwards Compatibility to Previous ECU Manager Module Versions . 14 2 Definitions and Abbreviations 15 2.1 Definitions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 15 2.2 Abbreviations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 15 3 Related documentation 17 3.1 Input documents related standards and norms . . . . . . . . . . . . 17 3.2 Related specification . . . . . . . . . . . . . . . . . . . . . . . . . . . . 17 4 Constraints and Assumptions 18 4.1 Limitations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 18 4.2 Hardware Requirements . . . . . . . . . . . . . . . . . . . . . . . . . . 18 4.3 Applicability to car domains . . . . . . . . . . . . . . . . . . . . . . . . 18 5 Dependencies to other modules 19 5.1 SPAL Modules . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 19 5.1.1 MCU Driver . . . . . . . . . .",
          "Operation successful Possible Errors 1 E_NOT_OK Operation failed Operation ReleasePOSTRUN Comment Variation Possible Errors E_OK E_NOT_OK Operation ReleaseRUN Comment Variation Possible Errors E_OK E_NOT_OK Operation RequestPOSTRUN Comment Variation Possible Errors E_OK E_NOT_OK 149 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 Operation RequestRUN Comment Variation Possible Errors E_OK E_NOT_OK c() 8.8.6 Port Interface for EcuM_CurrentMode Interface 8.8.6.1 General Approach SWS_EcuM_04132 dThe mode port of the ECU State Manager module shall declare the following modes: STARTUP RUN POST_RUN SLEEP SHUTDOWN c(SRS_ModeMgm_09116) This definition is a simplified view of ECU Modes that applications do need to know. It does not restrict or limit in any way how application modes could be defined. Applica- tions modes are completely handled by the application itself. SWS_EcuM_04133 dMode changes shall be notified to SW-Cs through the RTE mode ports when the mode change occurs. This specification assumes that the port name is currentMode and that the direct API of RTE will be used. Under these conditions mode changes signaled by invoking Rte_StatusType Rte_Switch_currentMode_currentMode( Rte_ModeType_EcuM_Mode mode) where mode is the new mode to be notified. The value range is specified by the previ- ous requirement. The return value shall be ignored. A SW-C which wants to be notified of mode changes should require the mode switch interface EcuM_CurrentMode. c() 150 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 8.8.6.2 Data Types The mode declaration group EcuM_Mode represents the modes of the ECU State Manager module that will be notified to the SW-Cs. ModeDeclarationGroup EcuM_Mode STARTUP , RUN, POST_RUN, SLEEP , SHUTDOWN initialMode STARTUP ; SWS_EcuM_04107 d Name EcuM_Mode Kind ModeDeclarationGroup Category ALPHABETIC_ORDER Initial mode STARTUP On transition value POST_RUN RUN SHUTDOWN SLEEP Modes STARTUP Description c() 8.8.6.3 Service Interfaces SWS_EcuM_04108 d Name EcuM_CurrentMode Comment Interface to read the current ECU mode IsService true Variation ModeGroup currentMode EcuM_Mode c() 8.8.7 Definition of the ECU Manager Service This section provides guidance on the definition of the ECU Manager module Service. Note that these definitions can only be completed during ECU configuration (since certain ECU Manager module configuration parameters determine the number of ports 151 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 provided by the ECU Manager module service). Also note a SW-Cs implementation does not depend on these definitions. In an AUTOSAR system, there are ports both above and below the RTE. The ECU Manager module service description defines ports provided to the RTE and the de- scriptions of every SW-C that uses this service must contain service ports which required these ECU Manager module ports from the RTE. The EcuM provides the following ports: SWS_EcuM_04111 d Name ShutdownTarget_UserName Kind ProvidedPort Interface EcuM_ShutdownTarget Description Provides an interface to SW-Cs to select a new shutdown target and query the current shutdown target. Variation UserName ecuc(EcuMEcuMConfigurationEcuMFlexConfigurationEcuMFlexUserConfigEcu MFlexUser.SHORT -NAME) c() SWS_EcuM_04110 d Name BootTarget_UserName Kind ProvidedPort Interface EcuM_BootTarget Description Provides an interface to SW-Cs to select a new boot target and query the current boot target. Variation UserName ecuc(EcuMEcuMConfigurationEcuMFlexConfigurationEcuMFlexUserConfigEcu MFlexUser.SHORT -NAME) c() SWS_EcuM_03017 d Name AlarmClock_UserName Kind ProvidedPort Interface EcuM_AlarmClock Description Provides to SW-Cs an alarm clock. The EcuM_AlarmClock port uses port-defined argument values to identify the user that manages its alarm clock. Type EcuM_UserType Port Defined Argument Value(s)Value ecuc(EcuMEcuMConfigurationEcuMFlexConfigurationEcuMFlexUser ConfigEcuMFlexUser.value) Variation ecuc(EcuMEcuMFlexGeneralEcuMAlarmClockPresent) true UserName ecuc(EcuMEcuMConfigurationEcuMFlexConfigurationEcuMAlarm Clock.SHORT -NAME) c() SWS_EcuM_04113 d 152 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 Name time Kind ProvidedPort Interface EcuM_Time Description Provides the EcuMs time service to SWCs Variation c() SWS_EcuM_04135 d Name StateRequest_UserName Kind ProvidedPort Interface EcuM_StateRequest Description Provides an interface to SW-Cs to request state changes of the ECU state. The port uses port-defined argument values to identify the user. Type EcuM_UserType Port Defined Argument Value(s)Value ecuc(EcuMEcuMConfigurationEcuMFlexConfigurationEcuMFlexUser ConfigEcuMFlexUser.value) Variation UserName ecuc(EcuMEcuMConfigurationEcuMFlexConfigurationEcuMFlexUserConfigEcu MFlexUser.SHORT -NAME) c() SWS_EcuM_04112 d Name currentMode Kind ProvidedPort Interface EcuM_CurrentMode Description Variation c() The EcuM provides the following types: SWS_EcuM_91004 d Name EcuM_UserType Kind Type Derived from uint8 Description Unique value for each user. Variation Available via Rte_EcuM_Type.h c() SWS_EcuM_04102 d 153 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 Name EcuM_TimeType Kind Type Derived from uint32 Description This data type represents the time of the ECU Manager module. Variation Available via Rte_EcuM_Type.h c() d Name EcuM_BootTargetType Kind Type Derived from uint8 ECUM_BOOT_TARGET_APP 0 The ECU will boot into the application ECUM_BOOT_TARGET_OEM_ BOOTLOADER1 The ECU will boot into the OEM bootloaderRange ECUM_BOOT_TARGET_SYS_ BOOTLOADER2 The ECU will boot into the system supplier bootloader Description This type represents the boot targets the ECU Manager module can be configured with. The default boot target is ECUM_BOOT_TARGET_OEM_BOOTLOADER. Variation Available via Rte_EcuM_Type.h c() SWS_EcuM_04045 d Name EcuM_ShutdownCauseType Kind Type Derived from uint8 ECUM_CAUSE_UNKNOWN 0 No cause was set. ECUM_CAUSE_ECU_STATE 1 ECU state machine entered a state for shutdown ECUM_CAUSE_WDGM 2 Watchdog Manager detected a failureRange ECUM_CAUSE_DCM 3 Diagnostic Communication Manager requests a shutdown due to a service request Description This type describes the cause for a shutdown by the ECU State Manager. It can be extended by configuration. Variation Available via Rte_EcuM_Type.h c() SWS_EcuM_04101 d 154 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 Name EcuM_ShutdownModeType Kind Type Derived from uint16 ecuc(EcuMEcuMConfiguration EcuMFlexConfigurationEcu MResetMode.SHORT -NAME)256 ecuc(EcuMEcu MConfigurationEcu MFlexConfiguration EcuMResetMode.Ecu MResetModeId)Configured Reset Modes Range ecuc(EcuMEcuMConfiguration EcuMCommonConfigurationEcu MSleepMode.SHORT -NAME)ecuc(EcuM Ecu MConfigurationEcu MCommon ConfigurationEcu MSleepMode.Ecu MSleepModeId)Configured Sleep Modes Description This data type represents the modes of the ECU Manager module. Variation Available via Rte_EcuM_Type.h c() SWS_EcuM_04136 d Name EcuM_ShutdownTargetType Kind Type Derived from uint8 ECUM_SHUTDOWN_TARGET_ SLEEP0x0 ECUM_SHUTDOWN_TARGET_ RESET0x1 Range ECUM_SHUTDOWN_TARGET_ OFF0x2 Description Variation Available via Rte_EcuM_Type.h c() SWS_EcuM_04094 dIn the case of a MultiCore ECU, the EcuM AUTOSAR service (Standardized AUTOSAR Interfaces) may be offered on one or more cores. c() Although the EcuM service interfaces are available on every core (see section 7.9 Multi Core for details), the EcuC allows the provided ports to be bound to the interface on a particular partition, and therefore to a particular core (see the Specification",
          "execution control and will carry out GO OFF II activities. Available via EcuM.h c(SRS_ModeMgm_09114) 106 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 8.3.3 State Management 8.3.3.1 EcuM_ SetState SWS_EcuM_04122 d Service Name EcuM_SetState Syntaxvoid EcuM_SetState ( EcuM_StateType state ) Service ID hex 0x2b SyncAsync Synchronous Reentrancy Reentrant Parameters (in) state State indicated by BswM. Parameters (inout) None Parameters (out) None Return value None Description Function called by BswM to notify about State Switch. Available via EcuM.h c() SWS_EcuM_04123 dThe EcuM_SetState function shall set the EcuM State to the value of the State parameter. If the State parameter is not a valid value, the EcuM_SetState function shall not change the State and if Development Error Reporting is turned on, the EcuM_SetState function shall additionally send an ECUM_E_STATE_PAR_OUT_OF_RANGE error message to the DET module.c(SRS_ModeMgm_09116) 8.3.3.2 EcuM_RequestRUN SWS_EcuM_04124 d Service Name EcuM_RequestRUN SyntaxStd_ReturnType EcuM_RequestRUN ( EcuM_UserType user ) Service ID hex 0x03 SyncAsync Synchronous Reentrancy Reentrant Parameters (in) user ID of the entity requesting the RUN state. Parameters (inout) None Parameters (out) None 5 107 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 4 Return value Std_ReturnType E_OK: The request was accepted by EcuM. E_NOT_OK: The request was not accepted by EcuM Description Places a request for the RUN state. Requests can be placed by every user made known to the state manager at configuration time. Available via EcuM.h c() SWS_EcuM_04125 dRequests of EcuM_RequestRUN cannot be nested, i.e. one user can only place one request but not more. Additional or duplicate user requests by the same user shall be reported to DET. Of course the DET will only be notified under development conditions. c(SRS_ModeMgm_09116) SWS_EcuM_04126 dAn implementation must track requests for each user known on the ECU. Run requests are specific to the user. c(SRS_ModeMgm_09116) SWS_EcuM_03024 dIf development error detection is enabled and there are multiple requests by the same user detected by EcuM_RequestRUN the function shall report ECUM_E_MULTIPLE_RUN_REQUESTS to Det.c() 8.3.3.3 EcuM_ReleaseRUN SWS_EcuM_04127 d Service Name EcuM_ReleaseRUN SyntaxStd_ReturnType EcuM_ReleaseRUN ( EcuM_UserType user ) Service ID hex 0x04 SyncAsync Synchronous Reentrancy Reentrant Parameters (in) user ID of the entity releasing the RUN state. Parameters (inout) None Parameters (out) None Return value Std_ReturnType E_OK: The release request was accepted by EcuM E_NOT_OK: The release request was not accepted by EcuM Description Releases a RUN request previously done with a call to EcuM_RequestRUN. The service is intended for implementing AUTOSAR ports. Available via EcuM.h c(SRS_ModeMgm_09116) SWS_EcuM_03023 dIf development error detection is enabled and EcuM_Re- leaseRUN did not find a previous matching request for the provided user, then the function shall report ECUM_E_MISMATCHED_RUN_RELEASE to Det.c() Configuration of EcuM_ReleaseRUN: Refer to EcuM_UserType for more information about user IDs and their generation. 108 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 8.3.3.4 EcuM_RequestPOST_RUN SWS_EcuM_04128 d Service Name EcuM_RequestPOST_RUN SyntaxStd_ReturnType EcuM_RequestPOST_RUN ( EcuM_UserType user ) Service ID hex 0x0a SyncAsync Synchronous Reentrancy Reentrant Parameters (in) user ID of the entity requesting the POST RUN state. Parameters (inout) None Parameters (out) None Return value Std_ReturnType E_OK: The request was accepted by EcuM E_NOT_OK: The request was not accepted by EcuM Description Places a request for the POST RUN state. Requests can be placed by every user made known to the state manager at configuration time. Requests for RUN and POST RUN must be tracked independently (in other words: two independent variables). The service is intended for implementing AUTOSAR ports. Available via EcuM.h c(SRS_ModeMgm_09116) SWS_EcuM_03025 dIf development error detection is enabled and there are multiple requests by the same user detected by EcuM_RequestPOST_RUN the function shall report ECUM_E_MULTIPLE_RUN_REQUESTS to Det.c() All requirements of 8.3.3.2 EcuM_RequestRUN apply accordingly to the function Ecu M_RequestPOST_RUN. Configuration of EcuM_RequestPOST_RUN: Refer to EcuM_UserType for more infor- mation about user IDs and their generation. 8.3.3.5 EcuM_ReleasePOST_RUN SWS_EcuM_04129 d Service Name EcuM_ReleasePOST_RUN SyntaxStd_ReturnType EcuM_ReleasePOST_RUN ( EcuM_UserType user ) Service ID hex 0x0b SyncAsync Synchronous Reentrancy Reentrant 5 109 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 4 Parameters (in) user ID of the entity releasing the POST RUN state. Parameters (inout) None Parameters (out) None Return value Std_ReturnType E_OK: The release request was accepted by EcuM E_NOT_OK: The release request was not accepted by EcuM Description Releases a POST RUN request previously done with a call to EcuM_RequestPOST_RUN. The service is intended for implementing AUTOSAR ports. Available via EcuM.h c(SRS_ModeMgm_09116) SWS_EcuM_03026 dIf development error detection is enabled and EcuM_Release- POST_RUN did not find a previous matching request for the provided user, then the function shall report ECUM_E_MISMATCHED_RUN_RELEASE to Det.c() Configuration of EcuM_ReleasePOST_RUN: Refer to EcuM_UserType for more infor- mation about user IDs and their generation. 8.3.4 Shutdown Management 8.3.4.1 EcuM_SelectShutdownTarget SWS_EcuM_02822 d Service Name EcuM_SelectShutdownTarget SyntaxStd_ReturnType EcuM_SelectShutdownTarget ( EcuM_ShutdownTargetType shutdownTarget, EcuM_ShutdownModeType shutdownMode ) Service ID hex 0x06 SyncAsync Synchronous Reentrancy Reentrant shutdownTarget The selected shutdown target. Parameters (in) shutdownMode The identfier of a sleep mode (if target is ECUM_SHUTDOWN_ TARGET_SLEEP) or a reset mechanism (if target is ECUM_ SHUTDOWN_TARGET_RESET) as defined by configuration. Parameters (inout) None Parameters (out) None Return value Std_ReturnType E_OK: The new shutdown target was set E_NOT_OK: The new shutdown target was not set Description EcuM_SelectShutdownTarget selects the shutdown target. EcuM_SelectShutdownTarget is part of the ECU Manager Module port interface. Available via EcuM.h c(SRS_ModeMgm_09114, SRS_ModeMgm_09128, SRS_ModeMgm_09235) 110 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 SWS_EcuM_00624 dThe EcuM_SelectShutdownTarget function shall set the shut- down target to the value of the shutdownTarget parameter. c(SRS_ModeMgm_09114, SRS_ModeMgm_09235) SWS_EcuM_02185 dThe parameter mode of the function EcuM_SelectShutdown Target shall be the identifier of a sleep or reset mode. The mode parameter shall only be used if the target parameter equals ECUM_SHUTDOWN_TARGET_SLEEP or ECUM_SHUTDOWN_TARGET_RESET. In all other cases, it shall be ignored. Only sleep or reset modes that are defined at configuration time and are stored in the Ecu MCommonConfiguration container (see ECUC_EcuM_00181) are allowed as parame- ters.c(SRS_ModeMgm_09114) SWS_EcuM_02585 dEcuM_SelectShutdownTarget shall not initiate any setup activi- ties but only store",
          "Quality Management in the Automotive Industry Automotive SPICE Process Reference Model Process Assessment Model Version 3. 1 Title: Automotive SPICE Process Assessment Reference Model Author(s): VDA QMC Working Group 13 Automotive SIG Version: 3.1 Date: 2017-11-01 Status: PUBLISHED Confidentiality: Public Revision ID: 656 VDA Quality Management Center 2 Copyright n otice This document is a revision of the Automotive SPICE process assessment model 2.5 and the process reference model 4.5, which has been developed under the Automotive SPICE initiative by consensus of the car manufacturers within the Automotive Special Interest Group (SIG), a joint special interest group of Automotive OEM, the Procurement Forum and t he SPICE User Group. It has been revised by the Working Group 13 of the Quality Management Center (QMC) in the German Association of the Automotive Industry with the representation of members of the Automotive Specia l Interest Group, and with the agreement of the SPICE User Group. This agreement is based on a validation of the Automotive SPICE 3.0 version regarding any ISO copyright infringement and the st atements given from VDA QMC to t he S PICE User Group regarding t he current and future development of Automotive SPICE. This document reproduces relevant material from: ISOIEC 33020:2015 Information technology -- Process assessment -- Process measurement framework for assessment of process capability ISOIEC 33020 :2015 provides the following copyright release statement : Users of this International Standard may reproduce subclauses 5.2, 5.3, 5.4 and 5.6 as part of any process assessment model or maturity model so that it can be used for its intended purpose. ISOIEC 1 5504 -5:2006 Information Technology Process assessment Part 5: An exemplar Process Assessment Model ISOIEC 15504 -5:2006 provides the following copyright release statement : Users of this part of ISOIEC 15504 may freely reproduce the detailed descri ptions contained in the exemplar assessment model as part of any tool or other material to support the performance of process assessments, so that it can be used for its intended purpose. Relevant material from one of the mentioned standards is incorporated under the copyright release notice . Acknowledgemen t The VDA, the VDA QMC and the Working Group 13 explicitly acknowledge the high quality work carried out by the members of the Automoti ve Special Interest Group. We would like to thank all involved people, who have contributed to the development and publication of Automotive SPICE. VDA Quality Management Center 3 Derivative w orks You may not alter, transform, or build upon this work without the prior consent of both the SPICE User Group and the VDA Quality Management Center . Such consent may be given provided ISO copyright is not infringed. The detailed descriptions contained in this document may be incorporated as part of any tool or other material to support the perf ormance of process assessments, so that this process assessment model can be used for its intended purpose, provided that any such material is not offered for sale. All distribution of derivative works shall be made at no cost to the recipient. Distribution The Automotive SPICE process a ssessment model may only be obtained by download from the www.automotivespice.com web site. It is not permitted for the recipient to further distribute the document. Change r equests Any problems or change requests should be reported through the defined mechanism at the www.automotivespice.com web site. Trademark Automotive SPICE is a registered trademark of the Verband der Automobilindustrie e.V. (VDA) For further information about Automotive SPICE visit www.automotivespice.com . VDA Quality Management Center 4 Document history Version Date By Notes 2.0 2005 -05-04 AutoSIG SUG DRAFT RELEASE, pending final editorial review 2.1 2005 -06-24 AutoSIG SUG Editorial review comments implemented Updated to reflect changes in FDIS 15504 -5 2.2 2005 -08-21 AutoSIG SUG Final checks implemented: FORMAL RELEASE 2.3 2007 -05-05 AutoSIG SUG Revision following CCB: FORMAL RELEASE 2.4 2008 -08-01 AutoSIG SUG Revision following CCB: FORMAL RELEASE 2.5 2010 -05-10 AutoSIG SUG Revision following CCB: FORMAL RELEASE 3.0 2015 -07-16 VDA QMC WG13 Changes: See release notes 3.1 2017-11-01 VDA QMC WG13 Changes: See www.automotivespice.com Release n otes Version 3.0 of the process assessment model incorporates the following major changes : Chapter 1 Editorial adaption to ISOIEC 330xx series, Notes regarding combined PRMPAM in this document Chapter 2 Adaption to ISOIEC 330xx series Chapter 3 Text optimized for better understanding and adapted to ISOIEC 330xx series . Chapter 4 Renaming ENG to SYS SWE, Structure of old ENG Processes changed, Rework of AS 4.5 process reference model and AS 2.5 process performance indicators focusing on a set of highly significant processes assessed within the automotive industry ( VDA Scope). Chapter 5 Adaption based on AS 2.5 to the measurement f ramework of ISOIEC 33020 Annex A Conformity statement adapted to ISOIEC 33004 Annex B Modifications on work produ ct characteristics according to the changes in chapter 4. Annex C Update to recent standards. Introduction of specific terms used in AS 3.0 Annex D Added the major concepts used for AS 3.0 , incorporated Annex E of AS 2.5 Annex E Updated references to other standards Version 3.1 of the process assessment model incorporates minor changes. Please refer to www.automotivespice.com for a detailed change log. VDA Quality Management Center 5 Table of contents Copyright notice ................................ ................................ ................................ .............................. 2 Acknowledgement ................................ ................................ ................................ ........................... 2 Derivative works ................................ ................................ ................................ .............................. 3 Distribution ................................ ................................ ................................ ................................ ...... 3 Change requests ................................ ................................ ................................ ............................. 3 Trademark ................................ ................................ ................................ ................................ ...... 3 Document history ................................ ................................ ................................ ............................ 4 Release notes ................................ ................................ ................................ ................................ . 4 Table of contents ................................ ................................ ................................ ............................ 5 List of Figures ................................ ................................ ................................ ................................ . 7 List of Tables ................................ ................................ ................................ ................................ .. 7 1. Introduction ................................ ................................ ................................ .............................. 8 1.1. Scope ................................ ................................ ................................ .............................. 8 1.2. Terminology ................................ ................................ ................................ ..................... 9 1.3. Abbrevi ations ................................ ................................ ................................ ................... 9 2. Statement of compliance ................................ ................................ ................................ .......... 9 3. Process capability determination ................................ ................................ ............................",
          "a process execution: - key elements to be represented in the work product VDA Quality Management Center 119 Annex C Terminology Annex C lists the applicable terminology references from ISOIECIEEE 24765 and ISOIECIEEE 29119. It also provide s terms which are specifically defined within Automotive SPICE. Some of these definitions are based on ISOIECIEEE 24765. Table C.1 Terminology Term Origin Description Acceptance testing ISOIECIEEE 24765 Formal testing conducted to enable a user, customer, or authorized entity to determine whether to accept a system or component. Application parameter Automotive SPICE V3.1 An application parameter is a parameter containing data applied to the system or software functions, behavior or properties. T he notion of application parameter is expressed in two ways: firstly, the logical specification (including name, description, unit, value domain or threshold values or characteristic curves, respectively), and, secondly, the actual quantitative data value it receives by means of data application. Architecture element Automotive SPICE V3.1 Result of the decomposition of the architecture on system and software level: The system is decomposed into elements of the system architecture across appropriate hierarchical levels. The software is decomposed into elements of the software architecture across appropriate hierarchical levels down to the software components (the lowest level elements of the software architecture). Baseline ISOIECIEEE 24765 A speci fication or product that has been formally reviewed and agreed upon, that thereafter serves as the basis for further development, and can be changed only through formal change control procedures. Black -box testing Automotive SPICE V3.1 Method of requireme nt testing where tests are developed without knowledge of the internal structure and mechanisms of the tested item. Code review Automotive SPICE V3.1 A check of the code by one or more qualified persons to determine its suitability for its intended use an d identify discrepancies from specifications and standards. Coding ISOIECIEEE 24765 The transforming of logic and data from design specifications (design descriptions) into programming language. Consistency Automotive SPICE V3.1 Consistency addresses content and semantics and ensures that work products are not in contradiction to each other. Consistency is supported by bidirectional traceability. Defect FAULT Dynamic analysis ISOIECIEEE 24765 A process of evaluating a system or component based on its behavior during execution. Element Automotive SPICE V3.1 Elements are all structural objects on architectural and design level on the left side of the V. Such elements can be further decomposed into more fine -grained sub -elements of the architecture or design across appropriate hierarchical levels. Error ISOIECIEEE 24765 The difference between a computed, observed, or measured value or condition and the true, specified, or theoretically correct value or condition. VDA Quality Management Center 120 Fault ISOIECIEEE 24765 A manifestation of an error in software. Functional requirement ISOIECIEEE 24765 A statement that identifies what a product or process must accomplish to produce required behavior andor results. Functional specification ISOIECIEEE 24765 A document that specifies the functions that a system or component must perform. Often part of a requirements specification. Functional testing ISOIECIEEE 24765 Testing conducted to evaluate the compliance of a system or component with specified functional requirements. Hardware ISOIECIEEE 24765 Physical equipment used to process, store, or transmit computer programs or data. Hardware item Automotive SPICE V3.1 A physical representation of a hardware element. Integration Automotive SPICE V3.1 A process of combining items to larger items up to an overall system. Integrated software item Automotive SPICE V3.1 A set of software units or items that are integrated into a larger assembly for the purpose of integration testing. Integration testing Automotive SPICE V3.1 Testing in which items (software items, hardware items, or system items) are combined and tested to evaluate the interaction among them. Integrated system item Automotive SPICE V3.1 A set of items that are integrated into a larger assembly for the purpose of integration testing. Quality assurance ISOIECIEEE 24765 A planned and systematic pattern of all actions necessary to provide adequate confidence that an item or product conforms to established technical requirements. Regress ion testing Automotive SPICE V3.1 Selective retesting of a system or item to verify that modifications have not caused unintended effects and that the system or item still complies with its specified requirements. Requirement Automotive SPICE V3.1 A prope rty or capability that must be achieved or possessed by a system, system item, product, or service to satisfy a contract, standard, specification or other formally imposed documents. Requirements specification Automotive SPICE V3.1 A document that specifies the requirements for a system or item. Typically included are functional requirements, performance requirements, interface requirements, design requirements, and development standards. Software ISOIECIEEE 24765 Computer programs, procedures, and possibly associated documentation and data pertaining to the operation of a computer system. Software component Automotive SPICE V3.1 In Automotive SPICE V3.1 the term software component is used for the lowest level elements of the software architec ture for which finally the detailed design is defined. A software component consists of one or more software units. ARCHITECTURE ELEMENT , UNIT Software element ARCHITECTURE ELEMENT Software item ISOIECIEEE 24765 Identifiable part of a software product. Software unit UNIT VDA Quality Management Center 121 Static analysis Automotive SPICE V3.1 A process of evaluating an item based on its form, structure, content, or documentation. System Automotive SPICE V3.1 A collection of interacting items organized to accompli sh a specific function or set of functions within a specific environment. System item Automotive SPICE V3.1 Identifiable part of the system. System test ISOIECIEEE 24765 Testing conducted on a complete, integrated system to evaluate the systems compliance with its specified requirements. Testing Automotive SPICE V3.1 Activity in which an item (system, hardware, or software) is exe cuted under specific conditions; and the results are recorded , summarized and communicated . Traceability ISOIECIEE E 24765 The degree to which a relationship can be established between two or more products of the development process, especially products having a predecessor -successor or master -subordinate relationship to one another. Unit Automotive SPICE V3.1 Part of a software component which is not further subdivided. SOFTWARE COMPONENT Unit test Automotive SPICE",
          "BSW_00348, SRS_BSW_00353, SRS_BSW_00361, SRS_BSW_00439, SRS_- BSW_00449, SRS_BSW_00308, SRS_BSW_00309, SRS_BSW_00330, SRS_- BSW_00010, SRS_BSW_00341, SRS_BSW_00334) 210 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager",
          "................................ ......................... 87 5.6. Process capability Level 5: Innovating process ................................ .............................. 88 5.6.1. PA 5.1 Process innovation process attribute ................................ .......................... 88 5.6.2. PA 5.2 Process innovation implementation proc ess attribute ................................ . 89 Annex A Conformity of the process assessment and reference model ................................ ..... 91 A.1 Introduction ................................ ................................ ................................ .................... 91 A.2 Conformance to the requirements for process reference models ................................ ... 91 A.3 Conformance to the requirements for process assessment models ............................... 92 Annex B Work product characteristics ................................ ................................ ...................... 94 Annex C Terminology ................................ ................................ ................................ ............. 119 VDA Quality Management Center 7 Annex D Key concepts ................................ ................................ ................................ ........... 122 D.1 The Plug -in concept ................................ ................................ ................................ .. 122 D.2 The Tip of the V ................................ ................................ ................................ ........ 123 D.3 Terms Element, Component, Unit, and Item ................................ ...................... 123 D.4 Traceability and consistency ................................ ................................ ........................ 124 D.5 Agree and Summarize and Communicate ................................ .............................. 125 D.6 Evaluate, Verification Criteria and Ensuring compliance ................................ ...... 125 D.7 The relation between Strategy and Plan ................................ ................................ . 126 Annex E Reference standards ................................ ................................ ............................... 128 List of Figures Figure 1 Process assessment model relationship ................................ ................................ ..... 11 Figure 2 Automotive SPICE process reference model - Overview ................................ ............ 12 Figure 3 Relationship between assessment indicators and process capability .......................... 22 Figure 4 Possible levels of abstraction for the term process ................................ ................... 23 Figure 5 Performing a process assessment for determining process capability ........................ 23 Figure D.1 The Plug -in concept ................................ ................................ ............................ 122 Figure D.2 The tip of the V ................................ ................................ ................................ ... 123 Figure D.3 Element, component, unit, and item ................................ ................................ ...... 123 Figure D.4 Bidirectional traceability and consistency ................................ .............................. 124 Figure D.5 Agree, summarize and communicate ................................ ................................ .... 125 Figure D.6 Evaluation, verification criteria and c ompliance ................................ ..................... 126 Figure D.7 Strategy and plan ................................ ................................ ................................ ... 127 List of Tables Table 1 Abbreviation List ................................ ................................ ................................ ............ 9 Table 2 Primary life cycle processes ACQ process group ................................ ...................... 13 Table 3 Primary life cycle processes SPL process group ................................ ....................... 13 Table 4 Primary life cycle process es SYS process group ................................ ...................... 13 Table 5 Primary life cycle processes SWE process group ................................ ..................... 14 Table 6 Supporting life cycle processes - SUP process group ................................ .................. 14 Table 7 Organizational life cycle processes - MAN process group ................................ ............ 14 Table 8 Organizational life cycle processes - PIM process group ................................ ............. 15 Table 9 Organizational life cycle processes - REU process group ................................ ............ 15 Table 10 Process cap ability levels according to ISOIEC 33020 ................................ ............... 16 Table 11 Process attributes according to ISOIEC 33020 ................................ ......................... 16 Table 12 Rating scale according to ISOIEC 33020 ................................ ................................ .. 17 Table 13 Rating scale percentage values according to ISOIEC 33020 ................................ .... 17 Table 14 Refinement of rating scale according to ISOIEC 33020 ................................ ............ 17 Table 15 Refined rat ing scale percentage values according to ISOIEC 33020 ........................ 18 Table 16 Process capability level model according to ISOIEC 33020 ................................ ...... 20 Table 17 Template for the process description ................................ ................................ ......... 24 Table B.1 Structure of WPC tables ................................ ................................ ........................... 94 Table B.2 Work product characteristi cs ................................ ................................ .................... 94 Table C.1 Terminology ................................ ................................ ................................ ........... 119 Table E.1 Reference standards ................................ ................................ .............................. 128 VDA Quality Management Center 8 1. Introduction 1.1. Scope Process assessment is a disciplined evaluation of an organizational units processes against a process assessment model . The Automotive SPICE process assessment model (PAM) is intended for use when performing conformant assessments of the process capability on the development of embedded automotive systems. It was developed in accordance with the requirements of ISOIEC 33004. Automotive SPICE has its own process refere nce model (PRM) , which was developed based on the Automotive SPICE process reference model 4.5 . It was further developed and tailored considering the specific needs of the automotive industry. If processes beyond the scope of Automotive SPICE are needed, a ppropriate processes from other process reference models such as ISOIEC 12207 or ISOIEC 15288 may be added based on the business needs of the organization . The PRM is incorporated in this document and is used in conjunction with the Automotive SPICE process assessment model when performing an assessment. This Automotive SPICE process assessment model contains a set of indicators to be considered when interpreting the intent of the Automotive SPICE process reference m odel. These indicators may also be used when implementing a process improvement program subsequent to an assessment. VDA Quality Management Center 9 1.2. Terminology Automotive SPICE follows the following preceden ce for use of terminology: a) ISOIEC 33001 for assessment related terminology b) ISOIECIEEE 24765 and ISOIECIEEE 29119 terminology (as contained in Annex C) c) Terms introduced by Automotive SPICE (as contained in Annex C) 1.3. Abbreviations AS Automotive SPICE BP Base Practice CAN Controller Area Network CASE Computer -Aided Software Engineering, CCB Change Control Board CFP Call For Proposals CPU Central Processing Unit ECU Electronic Control Unit EEPROM Electrically Erasable Programmable Read-Only Memory GP Generic Practice GR Generic Resource IEC International Electrotechnical Commission IEEE Institute of Electrical and Electronics Engineers IO Input Output ISO International Organization for Standardization ITT Invitation To Tender LIN Local Interconnect Network MISRA Motor Industry Software Reliability Association MOST Media Oriented Systems Transport PA Process Attribute PAM Process Assessment Model PRM Process Reference Model PWM Pulse Width Modulation RAM Random Access Memory ROM Read Only Memory SPICE Software Process Improvement and Capability d Etermination SUG Spice User Group USB Universal Serial Bus WP Work Product WPC Work Product Characteristic Table 1 Abbreviation List 2. Statement of compliance The Automotive SPICE process assessment model and process reference model is conformant with the IS OIEC 33004 , and can be used as the basis for conducting an assessment of process capability. VDA Quality Management Center 10 ISOIEC 33020 is used as an",
          "and ISOIECIEEE 29119 terminology (as contained in Annex C) c) Terms introduced by Automotive SPICE (as contained in Annex C) 1.3. Abbreviations AS Automotive SPICE BP Base Practice CAN Controller Area Network CASE Computer -Aided Software Engineering, CCB Change Control Board CFP Call For Proposals CPU Central Processing Unit ECU Electronic Control Unit EEPROM Electrically Erasable Programmable Read-Only Memory GP Generic Practice GR Generic Resource IEC International Electrotechnical Commission IEEE Institute of Electrical and Electronics Engineers IO Input Output ISO International Organization for Standardization ITT Invitation To Tender LIN Local Interconnect Network MISRA Motor Industry Software Reliability Association MOST Media Oriented Systems Transport PA Process Attribute PAM Process Assessment Model PRM Process Reference Model PWM Pulse Width Modulation RAM Random Access Memory ROM Read Only Memory SPICE Software Process Improvement and Capability d Etermination SUG Spice User Group USB Universal Serial Bus WP Work Product WPC Work Product Characteristic Table 1 Abbreviation List 2. Statement of compliance The Automotive SPICE process assessment model and process reference model is conformant with the IS OIEC 33004 , and can be used as the basis for conducting an assessment of process capability. VDA Quality Management Center 10 ISOIEC 33020 is used as an ISOIEC 33003 compliant Measurement Framework. A statement of compliance of the process assessment model and process reference model with the requirements of ISOIEC 33004 is provided in Annex A. VDA Quality Management Center 11 3. Process capability determination The concept of process capability determination by using a process assessment model is based on a two -dimensional framework. The first dimension is provided by processes defined in a process reference model (process dimension). The second dimension consists of capability levels that are further subdivided into process attributes (capability dimension). The pr ocess attributes provide the measurable characteristics of process capability. The process assessment model selects processes from a process reference model and supplements with indicators. These indicators support the collection of objective evidence whic h enable an assessor to assign ratings for processes according to the capability dimension. The relationship is shown in Figure 1: Process1Measurement framework (ISOIEC 33020) Capability levels Process attributes Rating Scale Rating method Aggregation method Process capability level model Process2 Process3 Process4 ...Process assessment model (Automotive SPICE) Process capability indicators Process performance indicators Process reference model (Automotive SPICE) Domain and scopes Process purposes Process outcomes Figure 1 Process assessment model relationship VDA Quality Management Center 12 3.1. Process reference m odel Processes are grouped by process category and at a second level into process groups according to the type of activity they address. There are 3 p rocess categories: Primary life cycle processes , Organizational life cycle processes and Supporting life cycle processes . Each process is described in terms of a purpose statement. The purpose statement contains the unique functional objectives of the process when performed in a particular environment. For each purpose statement a list of speci fic outcomes is associated, as a list of expected positive results of the process performance. For the process dimension, the Automotive SPICE process reference model provides the set of processes shown in Figure 2. Management Process Group (MAN) Supporting Process Group (SUP)Acquisition Process Group (ACQ) Supply Process Group (SPL)ACQ.4 Supplier Monitoring ACQ.11 Technical Requirements ACQ.12 Legal and Administrative Requirements ACQ.13 Project Requirements ACQ.14 Request for Proposals ACQ.15 Supplier Qualification SPL.1 Supplier Tendering SPL.2 Product ReleaseSUP.1 Quality AssuranceSUP.2 VerificationSUP.4 Joint ReviewSUP.7 Documentation SUP.8 Configuration ManagementSUP.9 Problem Resolution ManagementSUP.10 Change Request ManagementMAN.3 Project Management MAN.5 Risk Management MAN.6 MeasurementACQ.3 Contract Agreement Process Improvement Process Group (PIM) PIM.3 Process ImprovementReuse Process Group (REU) REU.2 Reuse Program ManagementSystem Engineering Process Group (SYS) SYS.1 Requirements Elicitation SYS.2 System Requirements Analysis SYS.3 System Architectural DesignSYS.4 System Integration and Integration TestSYS.5 System Qualification Test Software Engineering Process Group (SWE) SWE.1 Software Requirements Analysis SWE.2 Software Architectural Design SWE.3 Software Detailed Design and Unit ConstructionSWE.4 Software Unit VerificationSWE.5 Software Integration and Integration TestSWE.6 Software Qualification Test Primary Life Cycle Processes Supporting Life Cycle Processes Organizational Life Cycle Processes Figure 2 Automotive SPICE process reference model - Overview VDA Quality Management Center 13 3.1.1. Primary life cycle processes category The p rimary life cycle processes category consists of processes that may be used by the customer when acquiring products from a supplier, and by the supplier when responding and delivering products to the customer including the engineering processes needed for specification, design, deve lopment, integration and testing. The primary life cycle processes category consists of the following groups: the Acquisition p rocess group; the Supply process group; the System engineering process group; the Sof tware engineering process group. The Acqui sition process group (ACQ) consists of processes that are performed by the customer, or by the supplier when acting as a customer for its own suppliers, in order to acquire a product andor service. ACQ.3 Contract Agreement ACQ.4 Supplier Monitoring ACQ.11 Technical Requirements ACQ.12 Legal and Administrative Requirements ACQ.13 Project Requirements ACQ.14 Request for Proposals ACQ.15 Supplier Qualification Table 2 Primary life cycle processes ACQ process group The Supply process group (SPL) consists of processes performed by the supplier in order to supply a product andor a service. SPL.1 Supplier Tendering SPL.2 Product Release Table 3 Primary life cycle processes SPL process group The System Engineering process group (SYS) consists of processes addressing the elicitation and management of customer and internal requirements, the definition of the system architecture and the integration and testing on the system level. SYS.1 Requirement s Elicitation SYS.2 System Requirements Analysis SYS.3 System Architectural Design SYS.4 System Integration and Integration Test SYS.5 System Qualification Test Table 4 Primary life cycle processes SYS process group The Software Engineering process group (SWE) consists of processes addressing the management of software requirements derived from the system requirements, the development of the VDA Quality Management Center 14 corresponding software architecture and design as well as the implementation, integration and testing of the software. SWE.1 Software Requirements Analysis SWE.2 Software Architectural Design SWE.3 Software Detailed Design and Unit Construction SWE.4 Software Unit Verification SWE.5 Software Integration and Integration",
          "BSW_00348, SRS_BSW_00353, SRS_BSW_00361, SRS_BSW_00439, SRS_- BSW_00449, SRS_BSW_00308, SRS_BSW_00309, SRS_BSW_00330, SRS_- BSW_00010, SRS_BSW_00341, SRS_BSW_00334) 210 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager",
          "Specification of ECU State Manager AUTOSAR CP R20-11 Document TitleSpecification of ECU State Manager Document Owner AUTOSAR Document Responsibility AUTOSAR Document Identification No 78 Document Status published Part of AUTOSAR Standard Classic Platform Part of Standard Release R20-11 Document Change History Date Release Changed by Description 2020-11-30 R20-11AUTOSAR Release ManagementCorrected broken chapter structure EcuM_UserType handling improved Minor content changes, clarifications (multi-core, configuration, values) 2019-11-28 R19-11AUTOSAR Release ManagementNo content changes Changed Document Status from Final to published 2018-10-31 4.4.0AUTOSAR Release ManagementReworked BswM interface through EcuM_GoDownHaltPoll Removed EcuM fixed version references 2017-12-08 4.3.1AUTOSAR Release ManagementAdapt API Can_CheckWakeup Removed ConfigPtr parameter Removed Default error Removed unused DIO driver EcuM AUTOSAR service configure on service partition only 2016-11-30 4.3.0AUTOSAR Release ManagementPartial Network Cluster Support Initialization BSW scheduler slipt Added a driver initialization list Removed EcuM_StateType 1 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 2015-07-31 4.2.2AUTOSAR Release ManagementReworked slave core poll sequence Reviewed multicore shutdown synchronization Reclassified error types Editorial changes 2014-10-31 4.2.1AUTOSAR Release ManagementAdded switch configuration Defined initialization order for InitListZeroInitListOne Definition of the name pattern of c-init-data struct corrected Type conflicts solved Editorial changes 2014-03-31 4.1.3AUTOSAR Release ManagementEcuM errors reworked Inconsistencies between APIs and Interfaces resolved Type conflicts solved Editorial changes 2013-10-31 4.1.2AUTOSAR Release ManagementAdded API table for service interfaces Fixed traceability topics General clean-up of requirements (reviewed different interfaces, operations, descriptions and figures). Editorial changes 2 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 2013-03-15 4.1.1AUTOSAR AdministrationSpecified reset mode to use in case of pending wakeup events during shutdown Added callout for Reset Loop Detection Extended specification of parameter time of function EcuM_GetMostRecentShutdown Improved configuration description Added new APIs to enable asynchronous Trcv handling for CANFR Wakeup Adaption of EcuM Flex to support BSW modules distributed over multiple partitions Reclassified which Production Errors are Extended Production Errors Added possible error to operations of ClientServer-Interfaces, where no errors where defined Enhancement of configuration to initialize BSW modules by the EcuM Flex 2011-12-22 4.0.3AUTOSAR AdministrationFixed interoperability problems between EcuM and BswM Terminology of ECU State Manager Flexible more consistently described Modification of sleep sequences to minimize misses of wakeup interrupts 2010-09-30 3.1.5AUTOSAR AdministrationUpdated pseudo code for AUTOSAR Services Update startup procedure for multi core systems 2010-02-02 3.1.4AUTOSAR AdministrationRemoved state machine to accommodate mode-dependent scheduling Added Multi-Core support Added Alarm Clock feature Revised disclaimer 2008-08-13 3.1.1AUTOSAR AdministrationLegal disclaimer revised 3 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 2007-12-21 3.0.1AUTOSAR AdministrationFixed Wakeup mechanisms Included optional triggering of Watchdog Manager during Startup, Shutdown, and Sleep Extended startup sequence to have more flexibility and to directly initialize all other BSW modules Generated APIs from BSW UML model Generated configuration from Meta Model Document meta information extended Small layout adaptations made 2007-01-24 2.1.15AUTOSAR AdministrationCorrected startup flow and wakeup concept. Added specification for AUTOSAR ports. Modified configuration for compliance with variant management. Added new API services. Legal disclaimer revised Release Notes added Advice for users revised Revision Information added 2006-05-16 2.0AUTOSAR Administration Initial Release 4 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 Disclaimer This work (specification andor software implementation) and the material contained in it, as released by AUTOSAR, is for the purpose of information only. AUTOSAR and the companies that have contributed to it shall not be liable for any use of the work. The material contained in this work is protected by copyright and other types of intel- lectual property rights. The commercial exploitation of the material contained in this work requires a license to such intellectual property rights. This work may be utilized or reproduced without any modification, in any form or by any means, for informational purposes only. For any other purpose, no part of the work may be utilized or reproduced, in any form or by any means, without permission in writing from the publisher. The work has been developed for automotive applications only. It has neither been developed, nor tested for non-automotive applications. The word AUTOSAR and the AUTOSAR logo are registered trademarks. 5 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 Table of Contents 1 Introduction and Functional Overview 13 1.1 Backwards Compatibility to Previous ECU Manager Module Versions . 14 2 Definitions and Abbreviations 15 2.1 Definitions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 15 2.2 Abbreviations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 15 3 Related documentation 17 3.1 Input documents related standards and norms . . . . . . . . . . . . 17 3.2 Related specification . . . . . . . . . . . . . . . . . . . . . . . . . . . . 17 4 Constraints and Assumptions 18 4.1 Limitations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 18 4.2 Hardware Requirements . . . . . . . . . . . . . . . . . . . . . . . . . . 18 4.3 Applicability to car domains . . . . . . . . . . . . . . . . . . . . . . . . 18 5 Dependencies to other modules 19 5.1 SPAL Modules . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 19 5.1.1 MCU Driver . . . . . . . . . .",
          "are finished processing, the cores must be synchronized before entering SHUTDOWN. The BswM (which is distributed over all partitions) ascertains that the ECU should be shut down and synchronizes with each BwsM in the ECU. All BswMs induce de- initialization of all the partitions BSWs, SWCs and CDDs and send appropriate signals to the other BswMs to indicate their readiness to shut down. 78 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 For a shutdown of the ECU, the BswM (which lies in the same partition of the master EcuM) ultimately calls GoOff on the master core which distributes that request to all slave cores. The master EcuM de-initializes the BswM, and the SchM. The EcuMs on the slave cores de-initialize their SchM and BswM and then send a signal to indicate that the core is ready for ShutdownOS (again, see section section 7.9.3 Master Core - Slave Core Signalling for details). The master EcuM waits for the signal from each slave core EcuM and then initiates shutdown as usual on the master core (the master EcuM calls ShutdownAllCores , and the ECU is put to bed with the global shutdown hook) 79 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 7.9.6.1 Master Core SHUTDOWN module EcuMmodule SchMmodule BswMmodule McOsIntegration Code opt Pending wakeup events?loop over every BswM running in this core loop FOR all configured cores EcuM_OnGoOffOne() ShutdownAllCores(StatusType)EcuM_GetPendingWakeupEvents(EcuM_WakeupSourceType)BswM_Deinit() WaitEvent(Mask)SchM_Deinit()GetCoreID(CoreIdType) EcuM_SelectShutdownTarget(Std_ReturnType, EcuM_ShutdownTargetType, EcuM_ShutdownModeType) Figure 7.23: Master Core OffPreOS Sequence 80 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 SWS_EcuM_04020 d Integration Code module EcuMmodule McOs alt Shutdown Target Reset OffGetCoreID(CoreIdType) EcuM_AL_SwitchOff()EcuM_AL_Reset(EcuM_ResetType)EcuM_OnGoOffTwo() Figure 7.24: Master Core OffPostOS Sequencec () 81 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 7.9.6.2 Slave Core SHUTDOWN module EcuMmodule McOsmodule :SchMIntegration Code module BswM loop over every BswM running in this core SetEvent(TaskId, Mask)GetCoreID(CoreIdType) SchM_Deinit()BswM_Deinit()EcuM_OnGoOffOne() Figure 7.25: Slave Core OffPreOS Sequence SWS_EcuM_04022 d 82 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 module EcuMmodule McOsIntegration Code EcuM_OnGoOffTwo()GetCoreID(CoreIdType) Figure 7.26: Slave Core OffPostOS Sequencec () 7.9.7 SLEEP Phase When the shutdown target Sleep is requested, all cores are put to sleep simultaneously. The MCU must issue a halt for each core. As task timing and priority are local to a core in the OS, neither the scheduler nor the RTE must be synchronized after a halt. Because the master core could issue the MCU halt before all slave cores are finished processing, the cores must be synchronized before entering GoHalt. The BswMs ascertain that sleep should be initiated and distribute an appropriate ECU mode to each core. The BSWs, SWCs and CDDs on the slave cores must be informed by their partition local BswM, de-initialize appropriately and send appropriate mode requests to the BswM to indicate their readiness. If the ECU is put to sleep, the halts must be synchronized so that all slave cores are halted before the master core computes the checksum. The ECU Manager module on the master core uses the same signal mechanism as for synchronizing cores on Go Off. Similarly, the ECU Manager module on the master core must validate the checksum before releasing the slave cores from the halt state 83 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 7.9.7.1 Master Core SLEEP SWS_EcuM_04023 d module EcuMmodule OsIntegration Code module :BswM GetCoreID(CoreIdType) GetResource(RES_AUTOSAR_ECUM_core)EcuM_EnableWakeupSources(EcuM_WakeupSourceType)BswM_EcuM_CurrentWakeup(sources, ECUM_WKSTATUS_NONE ) Figure 7.27: Master Core GoSleep Sequencec () SWS_EcuM_04024 d 84 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 Integration Code module :BswMPeripheral Wakeup Sourcemodule Mcumodule EcuMmodule Wakeup Sourcemodule Os HALT opt RAM check failed alt Validation Needed Yes Noalt AlarmClock Service Present EcuM_AlarmClock only pending event AND Alarm not e xpired EcuM_GenerateRamHash() EcuM_CheckRamHash(uint8)Return from interrupt()Wait for all SlaveCores to be ready to sleep() EcuM_ErrorHook(uint16)Mcu_SetMode()EcuM_SetWakeupEvent(EcuM_WakeupSourceType)Mcu_SetMode(Mcu_ModeType) Signal all SlaveCores to continue()DisableAllInterrupts()Module_CheckWakeup() BswM_EcuM_CurrentWakeup(Sources, ECUM_WKSTATUS_VALIDATED)Mcu_SetMode(Mcu_ModeType)Interrupt() EcuM_GenerateRamHash()EcuM_CheckWakeup(EcuM_WakeupSourceType) EnableAllInterrupts()DisableAllInterrupts() BswM_EcuM_CurrentWakeup(sources, ECUM_WKSTATUS_PENDING)Activate PLL() Figure 7.28: Master Core Halt Sequence 85 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 c(SRS_ModeMgm_09239) SWS_EcuM_04025 d module EcuMmodule :BswMIntegration Code module Mcumodule Wakeup Sourcemodule Os loop WHILE no pendingvalidated events loop FOR all wakeup sources that need polling opt Wakeup detected alt Yes No ! EnableAllInterrupts() Signal SlaveCores to continue()EcuM_SetWakeupEvent(EcuM_WakeupSourceType) EcuM_GetPendingWakeupEvents(EcuM_WakeupSourceType)EcuM_SleepActivity() Module_CheckWakeup()Mcu_SetMode (Mcu_ModeType) BswMEcuM_CurrentWakeup(sources, ECUM_WKSTATUS_VALIDATED)DisableAllInterrupts() BswM_EcuM_CurrentWakeup(sources, ECUM_WKSTATUS_PENDING)EcuM_CheckWakeup(EcuM_WakeupSourceType) Figure 7.29: Master Core Poll Sequencec () SWS_EcuM_04026 d 86 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 module Mcumodule Osmodule EcuMIntegration Code Mcu_SetMode(Mcu_ModeType) EcuM_GetPendingWakeupEvents(EcuM_WakeupSourceType) ReleaseResource(RES_AUTOSAR_ECUM_core)EcuM_DisableWakeupSources(EcuM_WakeupSourceType)EnableAllInterrupts()DisableAllInterrupts() EcuM_AL_DriverRestart() Figure 7.30: Master Core WakeupRestart Sequencec () 7.9.7.2 Slave Core SLEEP SWS_EcuM_04027 d 87 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 module EcuMmodule Osmodule :BswMIntegration Code GetCoreID(CoreIdType) EcuM_EnableWakeupSources(EcuM_WakeupSourceType) GetResource(RES_AUTOSAR_ECUM_core)BswM_EcuM_CurrentWakeup(sources, ECUM_WKSTATUS_NONE ) Figure 7.31: Slave Core GoSleep Sequencec () SWS_EcuM_04028 d 88 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 Integration Code module Wakeup Sourcemodule EcuMmodule McuPeripheral Wakeup Sourcemodule Osmodule :BswM HALT alt Validation Needed Yes NoMcu_SetMode()EcuM_SetWakeupEvent(EcuM_WakeupSourceType)Interrupt()Signal MasterCore that Slave is ready to sleep() Return from interrupt()EcuM_CheckWakeup(EcuM_WakeupSourceType) BswM_EcuM_CurrentState(ECUM_WKSTATUS_PENDING) Wait for MasterCore to continue()DisableAllInterrupts() BswM_EcuM_CurrentWakeup(Sources, ECUM_WKSTATUS_VALI DATED)Module_CheckWakeup() EnableAllInterrupts()Mcu_SetMode(Mcu_ModeType) Figure 7.32: Slave Core Halt Sequencec () SWS_EcuM_04029 d 89 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 module EcuMmodule Wakeup Sourcemodule McuIntegration Code module Osmodule BswM loop WHILE no pendingvalidated events loop FOR all wakeup sources that need polling opt Wakeup detected alt Yes No ! Mcu_SetMode(Mcu_ModeType) Wait for signal from MasterCore to continue()EcuM_SetWakeupEvent(EcuM_WakeupSourceType)Module_CheckWakeup() BswM_EcuM_CurrentWakeup(sources, ECUM_WKSTATUS_PEND ING)EcuM_GetPendingWakeupEvents(EcuM_WakeupSourceType)EnableAllInterrupts() EcuM_CheckWakeup(EcuM_WakeupSourceType)DisableAllInterrupts() BswM_EcuM_CurrentWakeup(sources, ECUM_WKSTATUS_VALI DATED)EcuM_SleepActivity() Figure 7.33: Slave Core Poll Sequencec () SWS_EcuM_04030 d 90 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 module Mcumodule Osmodule EcuMIntegration Code Mcu_SetMode(Mcu_ModeType)DisableAllInterrupts() ReleaseResource(RES_AUTOSAR_ECUM_core)EcuM_DisableWakeupSources(EcuM_WakeupSourceType)EnableAllInterrupts() Figure 7.34: Slave Core WakeupRestart Sequencec () 7.9.8 Runnables and Entry points 7.9.8.1 Internal behavior SWS_EcuM_03018 dThe definition of the internal behavior of the the ECU Manager module shall be as follows. This detailed description is only needed for the configura- tion",
          "of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 module Osmodule Mcumodule EcuMIntegration Code opt Configuration data inconsistent EcuM_LoopDetection()EcuM_AL_DriverInitOne()Check consistency of configuration data()EcuM_AL_DriverInitZero() EcuM_DeterminePbConfiguration(const EcuM_ConfigType) StartOS(ECUM_DEFAULT_APP_MODE)Mcu_GetResetReason()EcuM_ErrorHook(ECUM_E_CONFIGURATION_DATA_INCONSISTEN T) Mcu_GetResetReason(Mcu_ResetType) EcuM_SelectShutdownTarget(Std_ReturnType, EcuM_ShutdownTargetType, EcuM_ShutdownModeType)Map reset reason to wakeup source() Figure 7.4: StartPreOS Sequence 37 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 The StartPreOS Sequence is intended to prepare the ECU to initialize the OS and should be kept as short as possible. Drivers should be initialised in the UP phase when possible and the callouts should also be kept short. Interrupts should not be used during this sequence. If interrupts have to be used, only category I interrupts are allowed in the StartPreOS Sequence 13. Initialization of drivers and hardware abstraction modules is not strictly defined by the ECU Manager. Two callouts EcuM_AL_DriverInitZero (see SWS_EcuM_02905 ) and EcuM_AL_DriverInitOne (see SWS_EcuM_02907 ) are provided to define the init blocks 0 and I. These blocks contain the initialization activities associated with the StartPreOS sequence. MCU_Init does not provide complete MCU initialization. Additionally, hardware depen- dent steps have to be executed and must be defined at system design time. These steps are supposed to be taken within the EcuM_AL_DriverInitZero (seeEcuM_- AL_DriverInitZero , SWS_EcuM_02905 ) or EcuM_AL_DriverInitOne call- outs (see EcuM_AL_DriverInitOne , SWS_EcuM_02907 ). Details can be found in the Specification of MCU Driver 10. SWS_EcuM_02181 dThe ECU Manager module shall call EcuM_GetValidated- WakeupEvents with the configured default shutdown target ( EcuMDefaultShut- downTarget ).c() See section 7.7 Shutdown Targets. SWS_EcuM_02603 dThe StartPreOS Sequence shall initialize all basic software modules that are needed to start the OS. c() 7.3.3 Activities in the StartPostOS Sequence StartPostOS Sequence Initialization Activity Comment Opt. Start BSW Scheduler no Init BSW Mode Manager no Init BSW SchedulerInitialize the semaphores for critical sections used by BSW modulesno Start Scheduler Timing Start periodical events for BSWSWCsno Table 7.2: StartPostOS Sequence Note to column Opt. : Optional activities can be switched on or off by configuration. See section 10.1 Common Containers and configuration parameters for details. SWS_EcuM_02932 dWhen activated through the EcuM_StartupTwo (see SWS_EcuM_02838 ) function, the ECU Manager module shall perform the actions in StartPostOS Sequence (see table 7.2). c(SRS_ModeMgm_09113) 3Category II interrupts require a running OS while category I interrupts do not. AUTOSAR OS re- quires each interrupt vector to be exclusively put into one category. 38 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 module SchMmodule EcuMmodule BswM SchM_Start(): Std_ReturnType SchM_StartTiming(const SchM_ConfigType)SchM_Init(const SchM_ConfigType)BswM_Init(const BswM_ConfigType ) Figure 7.5: StartPostOS Sequence 7.3.4 Checking Configuration Consistency 7.3.4.1 The Necessity for Checking Configuration Consistency in the ECU Man- ager In an AUTOSAR ECU several configuration parameters are set and put into the ECU at different times. Pre-compile parameters are set, inserted into the generated source code and compiled into object code. When the source code has been compiled, link- time parameters are set, compiled, and linked with the previously configured object code into an image that is put into the ECU. Finally, post-build parameters are set, compiled, linked, and put into the ECU at a different time. All these parameters must match to obtain a stable ECU. 39 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 Figure 7.6: BSW Configuration Steps The configuration tool can check the consistency of configuration time parameters it- self. The compiler may detect parameter errors at compilation time and the linker may find additional errors at link time. Unfortunately, finding configuration errors in post- build parameters is very difficult. This can only be achieved by checking that the pre-compile and link-time parameter settings used when compiling the code are exactly the same as the pre-compile and link-time parameter settings used when configuring and com- piling the post-build parameters. This can only be done at run-time. Explanation for SWS_EcuM_02796: The ECU Manager module checks the consis- tency once before initializing the first BSW module to avoid multiple checks scattered over the different BSW modules. This also implies that: SWS_EcuM_02796 dThe ECU Manager module shall not only check the consistency of its own parameters but of all post-build configurable BSW modules before initializing the first BSW module. c() The ECU Manager Configuration Tool must compute a hash value over all pre-compile and link-time configuration parameters of all BSW modules and store the value in the link-time ECUM_CONFIGCONSISTENCY_HASH (seeEcuMConfigConsistencyHash ) configuration parameter. The hash value is necessary for two reasons. First, the pre- compile and link-time parameters are not accessible at run-time. Second, the check 40 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 must be very efficient at run-time. Comparing hundreds of parameters would cause an unacceptable delay in the ECU startup process. The ECU Manager module Configuration Tool must in turn put the computed ECUM_ CONFIGCONSISTENCY_HASH value into the field in the EcuM_ConfigType structure which contains the root of all post-build configuration parameters. SWS_EcuM_02798 dThe ECU Manager module shall check in EcuM_Init (see SWS_EcuM_02811 ) that the field in the structure is equal to the value of ECUM_ CONFIGCONSISTENCY_HASH .c() By computing hash values at configuration time and comparing them at run-time the EcuM code can be very efficient and is furthermore independent of a particular hash computation algorithm. This allows the use of complex hash computation algorithms, e.g. cryptographically strong hash functions. Note that the same hash algorithm can be used to produce the value for the post-build configuration identifier in the EcuM_ConfigType structure. Then the hash algorithm is applied to the post-build parameters instead of the pre-compile and link-time param- eters. SWS_EcuM_02799 dThe hash computation algorithm used to compute a hash value over all pre-compile and link-time configuration parameters of all BSW modules shall always produce the same hash value for the same set of configuration data regardless of the order of configuration parameters in the XML files. c() 7.3.4.2 Example Hash Computation Algorithm Note: This chapter is not normative. It describes one possible way to compute hash values. A simple",
          "function defined in a common API in the Basis-SWSWS_EcuM_NA_00000 SRS_BSW_00172 The scheduling strategy that is built inside the Basic Software Modules shall be compatible with the strategy used in the systemSWS_EcuM_02836 SRS_BSW_00307 Global variables naming convention SWS_EcuM_NA_00000 SRS_BSW_00308 AUTOSAR Basic Software Modules shall not define global data in their header files, but in the C fileSWS_EcuM_NA_00000 SRS_BSW_00309 All AUTOSAR Basic Software Modules shall indicate all global data with read-only purposes by explicitly assigning the const keywordSWS_EcuM_NA_00000 SRS_BSW_00314 All internal driver modules shall separate the interrupt frame definition from the service routineSWS_EcuM_NA_00000 5 23 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 4 Requirement Description Satisfied by SRS_BSW_00323 All AUTOSAR Basic Software Modules shall check passed API parameters for validitySWS_EcuM_03009 SRS_BSW_00325 The runtime of interrupt service routines and functions that are running in interrupt context shall be kept shortSWS_EcuM_NA_00000 SRS_BSW_00327 Error values naming convention SWS_EcuM_04032 SRS_BSW_00330 It shall be allowed to use macros instead of functions where source code is used and runtime is criticalSWS_EcuM_NA_00000 SRS_BSW_00331 All Basic Software Modules shall strictly separate error and status informationSWS_EcuM_91005 SRS_BSW_00333 For each callback function it shall be specified if it is called from interrupt context or notSWS_EcuM_02171 SWS_EcuM_02345 SRS_BSW_00334 All Basic Software Modules shall provide an XML file that contains the meta dataSWS_EcuM_NA_00000 SRS_BSW_00337 Classification of development errors SWS_EcuM_04032 SRS_BSW_00339 Reporting of production relevant error statusSWS_EcuM_02987 SRS_BSW_00341 Module documentation shall contains all needed informationsSWS_EcuM_NA_00000 SRS_BSW_00347 A Naming seperation of different instances of BSW drivers shall be in placeSWS_EcuM_NA_00000 SRS_BSW_00348 All AUTOSAR standard types and constants shall be placed and organized in a standard type header fileSWS_EcuM_NA_00000 SRS_BSW_00350 All AUTOSAR Basic Software Modules shall allow the enabling disabling of detection and reporting of development errors.SWS_EcuM_04032 SRS_BSW_00353 All integer type definitions of target and compiler specific scope shall be placed and organized in a single type headerSWS_EcuM_NA_00000 SRS_BSW_00358 The return type of init() functions implemented by AUTOSAR Basic Software Modules shall be voidSWS_EcuM_02811 SRS_BSW_00359 All AUTOSAR Basic Software Modules callback functions shall avoid return types other than void if possibleSWS_EcuM_02826 SWS_EcuM_02829 SRS_BSW_00360 AUTOSAR Basic Software Modules callback functions are allowed to have parametersSWS_EcuM_02826 SWS_EcuM_02829 SRS_BSW_00361 All mappings of not standardized keywords of compiler specific scope shall be placed and organized in a compiler specific type and keyword headerSWS_EcuM_NA_00000 5 24 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 4 Requirement Description Satisfied by SRS_BSW_00373 The main processing function of each AUTOSAR Basic Software Module shall be named according the defined conventionSWS_EcuM_02837 SRS_BSW_00385 List possible error notifications SWS_EcuM_04032 SRS_BSW_00406 A static status variable denoting if a BSW module is initialized shall be initialized with value 0 before any APIs of the BSW module is calledSWS_EcuM_NA_00000 SRS_BSW_00407 Each BSW module shall provide a function to read out the version information of a dedicated module implementationSWS_EcuM_02813 SRS_BSW_00410 Compiler switches shall have defined valuesSWS_EcuM_NA_00000 SRS_BSW_00411 All AUTOSAR Basic Software Modules shall apply a naming rule for enablingdisabling the existence of the APISWS_EcuM_02813 SRS_BSW_00413 An index-based accessing of the instances of BSW modules shall be doneSWS_EcuM_NA_00000 SRS_BSW_00414 Init functions shall have a pointer to a configuration structure as single parameterSWS_EcuM_02811 SRS_BSW_00415 Interfaces which are provided exclusively for one module shall be separated into a dedicated header fileSWS_EcuM_NA_00000 SRS_BSW_00416 The sequence of modules to be initialized shall be configurableSWS_EcuM_02559 SRS_BSW_00417 Software which is not part of the SW-C shall report error events only after the DEM is fully operational.SWS_EcuM_NA_00000 SRS_BSW_00422 Pre-de-bouncing of error status information is done within the DEMSWS_EcuM_NA_00000 SRS_BSW_00425 The BSW module description template shall provide means to model the defined trigger conditions of schedulable objectsSWS_EcuM_02837 SRS_BSW_00426 BSW Modules shall ensure data consistency of data which is shared between BSW modulesSWS_EcuM_NA_00000 SRS_BSW_00427 ISR functions shall be defined and documented in the BSW module description templateSWS_EcuM_NA_00000 SRS_BSW_00432 Modules should have separate main processing functions for readreceive and writetransmit data pathSWS_EcuM_NA_00000 SRS_BSW_00437 Memory mapping shall provide the possibility to define RAM segments which are not to be initialized during startupSWS_EcuM_NA_00000 SRS_BSW_00439 Enable BSW modules to handle interruptsSWS_EcuM_NA_00000 5 25 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 4 Requirement Description Satisfied by SRS_BSW_00440 The callback function invocation by the BSW module shall follow the signature provided by RTE to invoke servers via Rte_Call APISWS_EcuM_02826 SWS_EcuM_02829 SRS_BSW_00449 BSW Service APIs used by Autosar Application Software shall return a Std_ReturnTypeSWS_EcuM_NA_00000 SRS_BSW_00450 A Main function of a un-initialized module shall return immediatelySWS_EcuM_NA_00000 SRS_BSW_00453 BSW Modules shall be harmonized SWS_EcuM_NA_00000 SRS_ModeMgm_- 09072ECU shutdown shall be forced SWS_EcuM_03022 SRS_ModeMgm_- 09098Storing the wake-up reasons shall be availableSWS_EcuM_02826 SRS_ModeMgm_- 09100Selection of wake-up sources shall be configurableSWS_EcuM_02389 SRS_ModeMgm_- 09104ECU State Manager shall take over control after OS shutdownSWS_EcuM_02952 SWS_EcuM_02953 SRS_ModeMgm_- 09113Initialization of Basic Software modules shall be doneSWS_EcuM_02932 SRS_ModeMgm_- 09114Startinginvoking the shutdown process shall be providedSWS_EcuM_00624 SWS_EcuM_02185 SWS_EcuM_02585 SWS_EcuM_02812 SWS_EcuM_02822 SRS_ModeMgm_- 09116Requesting and releasing the RUN state shall be providedSWS_EcuM_04115 SWS_EcuM_04116 SWS_EcuM_04117 SWS_EcuM_04118 SWS_EcuM_04119 SWS_EcuM_04120 SWS_EcuM_04121 SWS_EcuM_04123 SWS_EcuM_04125 SWS_EcuM_04126 SWS_EcuM_04127 SWS_EcuM_04128 SWS_EcuM_04129 SWS_EcuM_04130 SWS_EcuM_04132 SRS_ModeMgm_- 09126An API for querying the wake-up reason shall be providedSWS_EcuM_02827 SWS_EcuM_02828 SWS_EcuM_02830 SWS_EcuM_02831 SRS_ModeMgm_- 09127The ECU State Manager shall de-initialize Basic Software modules where appropriate during the shutdown processSWS_EcuM_03021 SRS_ModeMgm_- 09128Several shutdown targets shall be supportedSWS_EcuM_02822 SWS_EcuM_02824 SWS_EcuM_02825 SRS_ModeMgm_- 09136The ECU State Manager shall be the receiver of all wake-up eventsSWS_EcuM_04091 SRS_ModeMgm_- 09186Alarm Clock shall be active while the ECU is poweredSWS_EcuM_04054 SWS_EcuM_04055 SWS_EcuM_04056 SWS_EcuM_04057 SWS_EcuM_04058 SWS_EcuM_04059 SWS_EcuM_04060 SRS_ModeMgm_- 09187In Case of wakeup, all the alarm clock shall be canceledSWS_EcuM_04009 SRS_ModeMgm_- 09188In Case of startup, all the alarm clock shall be canceledSWS_EcuM_04010 SRS_ModeMgm_- 09190The alarm clock service shall allow setting an alarm relative to the current time using a time resolution of secondsSWS_EcuM_04054 5 26 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 4 Requirement Description Satisfied by SRS_ModeMgm_- 09194The alarm clock service shall allow setting the clockSWS_EcuM_04064 SRS_ModeMgm_- 09199The alarm clock service shall allow setting an alarm absolute by using an absolute time with a resolution of secondsSWS_EcuM_04057 SRS_ModeMgm_- 09234The EcuM shall handle the initialization of Basic Software modulesSWS_EcuM_02559",
          "BSW_00348, SRS_BSW_00353, SRS_BSW_00361, SRS_BSW_00439, SRS_- BSW_00449, SRS_BSW_00308, SRS_BSW_00309, SRS_BSW_00330, SRS_- BSW_00010, SRS_BSW_00341, SRS_BSW_00334) 210 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager",
          "Slave Core GoSleep Sequencec () SWS_EcuM_04028 d 88 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 Integration Code module Wakeup Sourcemodule EcuMmodule McuPeripheral Wakeup Sourcemodule Osmodule :BswM HALT alt Validation Needed Yes NoMcu_SetMode()EcuM_SetWakeupEvent(EcuM_WakeupSourceType)Interrupt()Signal MasterCore that Slave is ready to sleep() Return from interrupt()EcuM_CheckWakeup(EcuM_WakeupSourceType) BswM_EcuM_CurrentState(ECUM_WKSTATUS_PENDING) Wait for MasterCore to continue()DisableAllInterrupts() BswM_EcuM_CurrentWakeup(Sources, ECUM_WKSTATUS_VALI DATED)Module_CheckWakeup() EnableAllInterrupts()Mcu_SetMode(Mcu_ModeType) Figure 7.32: Slave Core Halt Sequencec () SWS_EcuM_04029 d 89 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 module EcuMmodule Wakeup Sourcemodule McuIntegration Code module Osmodule BswM loop WHILE no pendingvalidated events loop FOR all wakeup sources that need polling opt Wakeup detected alt Yes No ! Mcu_SetMode(Mcu_ModeType) Wait for signal from MasterCore to continue()EcuM_SetWakeupEvent(EcuM_WakeupSourceType)Module_CheckWakeup() BswM_EcuM_CurrentWakeup(sources, ECUM_WKSTATUS_PEND ING)EcuM_GetPendingWakeupEvents(EcuM_WakeupSourceType)EnableAllInterrupts() EcuM_CheckWakeup(EcuM_WakeupSourceType)DisableAllInterrupts() BswM_EcuM_CurrentWakeup(sources, ECUM_WKSTATUS_VALI DATED)EcuM_SleepActivity() Figure 7.33: Slave Core Poll Sequencec () SWS_EcuM_04030 d 90 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 module Mcumodule Osmodule EcuMIntegration Code Mcu_SetMode(Mcu_ModeType)DisableAllInterrupts() ReleaseResource(RES_AUTOSAR_ECUM_core)EcuM_DisableWakeupSources(EcuM_WakeupSourceType)EnableAllInterrupts() Figure 7.34: Slave Core WakeupRestart Sequencec () 7.9.8 Runnables and Entry points 7.9.8.1 Internal behavior SWS_EcuM_03018 dThe definition of the internal behavior of the the ECU Manager module shall be as follows. This detailed description is only needed for the configura- tion of the local RTE. InternalBehavior EcuStateManager Runnable entities of the EcuStateManager RunnableEntity SelectShutdownTarget symbol EcuM_SelectShutdownTarget canbeInvokedConcurrently TRUE RunnableEntity GetShutdownTarget 91 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 symbol EcuM_GetShutdownTarget canbeInvokedConcurrently TRUE RunnableEntity GetLastShutdownTarget symbol EcuM_GetLastShutdownTarget canbeInvokedConcurrently TRUE RunnableEntity SelectShutdownCause symbol EcuM_SelectShutdownCause canbeInvokedConcurrently TRUE RunnableEntity GetShutdownCause symbol EcuM_GetShutdownCause canbeInvokedConcurrently TRUE RunnableEntity SelectBootTarget symbol EcuM_SelectBootTarget canbeInvokedConcurrently TRUE RunnableEntity GetBootTarget symbol EcuM_GetBootTarget canbeInvokedConcurrently TRUE RunnableEntity SetRelWakeupAlarm symbol EcuM_SetRelWakeupAlarm canbeInvokedConcurrently TRUE RunnableEntity SetAbsWakeupAlarm symbol EcuM_SetAbsWakeupAlarm canbeInvokedConcurrently TRUE RunnableEntity AbortWakeupAlarm symbol EcuM_AbortWakeupAlarm canbeInvokedConcurrently TRUE RunnableEntity GetCurrentTime symbol EcuM_GetCurrentTime canbeInvokedConcurrently TRUE RunnableEntity GetWakeupTime symbol EcuM_GetWakeupTime canbeInvokedConcurrently TRUE RunnableEntity SetClock symbol EcuM_SetClock canbeInvokedConcurrently TRUE RunnableEntity RequestRUN symbol EcuM_RequestRUN canbeInvokedConcurrently TRUE RunnableEntity ReleaseRUN symbol EcuM_ReleaseRUN canbeInvokedConcurrently TRUE RunnableEntity RequestPOSTRUN symbol EcuM_RequestPOST_RUN canbeInvokedConcurrently TRUE RunnableEntity ReleasePOSTRUN symbol EcuM_ReleasePOST_RUN canbeInvokedConcurrently TRUE Port present for each user. There are NU users SR000.RequestRUN - RequestRUN SR000.ReleaseRUN - ReleaseRUN SR000.RequestPOSTRUN - RequestPOSTRUN SR000.ReleasePOSTRUN - RequestPOSTRUN PortArgument portSR000, value.typeEcuM_UserType, value.valueEcuMUser0.User 92 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 (...) SRnnn.RequestRUN - RequestRUN SRnnn.ReleaseRUN - ReleaseRUN SRnnn.RequestPOSTRUN - RequestPOSTRUN SRnnn.ReleasePOSTRUN - RequestPOSTRUN PortArgument portSRnnn, value.typeEcuM_UserType, value.valueEcuMUsernnn.User shutDownTarget.SelectShutdownTarget - SelectShutdownTarget shutDownTarget.GetShutdownTarget - GetShutdownTarget shutDownTarget.GetLastShutdownTarget - GetLastShutdownTarget shutDownTarget.SelectShutdownCause - SelectShutdownCause shutDownTarget.GetShutdownCause - GetShutdownCause bootTarget.SelectBootTarget - SelectBootTarget bootTarget.GetBootTarget - GetBootTarget alarmClock.SetRelWakeupAlarm- SetRelWakeupAlarm alarmClock.SetAbsWakeupAlarm - SetAbsWakeupAlarm alarmClock.AbortWakeupAlarm - AbortWakeupAlarm alarmClock.GetCurrentTime - GetCurrentTime alarmClock.GetWakeupTime - GetWakeupTime alarmClock.SetClock - SetClock ; c() 7.10 EcuM Mode Handling The ECU State Manager provides interfaces for SW-Cs to request and release the modes RUN and POST_RUN optionally. EcuMFlex arbitrates the requests and releases made by SW-Cs and propagates the result to BswM. The cooperation between EcuM and BswM is necessary as only the BswM can decide when a transition to a different mode can be made. Due to the fact that the EcuM does not have an own state machine, the EcuM relies on the state transitions made by BswM. Therefore the EcuM does not request a state. Furthermore it notifies the BswM about the current arbitration of all requests. And the BswM is notified when the RTE has executed all Runnables belonging to a certain mode. ArchitecturalComponentsofECUModeHandling 93 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 Figure 7.35: Architectural Components of ECU Mode Handling Figure 7.35 illustrates the architectural components of ECU Mode Handling. SWS_EcuM_04115 dECU Mode Handling shall be applied when EcuMModeHan- dling is configured to true. c(SRS_ModeMgm_09116) SWS_EcuM_04116 dWhen the BswM sets a state of the EcuM by EcuM_SetState , the EcuM shall indicate the corresponding mode to the RTE. c(SRS_ModeMgm_09116) SWS_EcuM_04117 dWhen the last RUN request has been released, ECU State Manager module shall indicate this to BswM using the API BswM_EcuM_- RequestedState(ECUM_STATE_APP_RUN, ECUM_RUNSTATUS_RELEASED) .c (SRS_ModeMgm_09116) If a SW-C needs post run activity during POST_RUN (e.g. shutdown preparation), then it must request POST_RUN before releasing the RUN request. Otherwise it is not guaranteed that this SW-C will get a chance to run its POST_RUN code. SWS_EcuM_04118 dWhen the ECU State Manager is not in the state which is re- quested by a SWC, it shall inform BswM about requested states using the BswM_- EcuM_RequestedState API.c(SRS_ModeMgm_09116) POST_RUN state provides a post run phase for SW-Cs and allows them to save im- portant data or switch off peripherals. SWS_EcuM_04144 dWhen the first RUN or POST_RUN request has been received, ECU State Manager module shall indicate this to BswM using BswM_EcuM_Request- edState(ECUM_STATE_APP_RUN, ECUM_RUNSTATUS_REQUESTED) .c() SWS_EcuM_04119 dWhen the last POST_RUN request has been released, ECU State Manager module shall indicate this to BswM using the API BswM_EcuM_Re- questedState(ECUM_STATE_APP_POST_RUN, ECUM_RUNSTATUS_RELEASED) .c (SRS_ModeMgm_09116) 94 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 Hint: To prevent, that the mode machine instance of ECU Mode lags behind and the states EcuM and the RTE get out of phase, the EcuM can use acknowledgement feed- back for the mode switch notification. Note that EcuM only requests Modes from and to RUN and POST_RUN, the SLEEP Mode has to be set by BswM, as the EcuM has no information about when this Mode can be entered. State Description STARTUPInitial value. Set by Rte when Rte_Start() has been called. RUNAs soon as all necesseray BSW modules are inistialized, BswM switches to this Mode. POST_RUNEcuM requests POST_RUN, when no RUN requests are available. SLEEPEcuM requests SLEEP Mode when no RUN and POST_RUN requests are available and Shut- down Target is set to SLEEP . SHUTDOWNEcuM requests SHUTDOWN Mode when no RUN and POST_ RUN requests are available and Shutdown Target is set to SHUT - DOWN. Table 7.8: EcuM Modes SWS_EcuM_04143 dEcuM shall notify BswM about the current State by calling the in- terface BswM_EcuM_CurrentState(EcuM_StateType State) . A new state shall be set by EcuM when RTE has given its feedback via the acknowledgement port. c() 7.11 Advanced Topics 7.11.1 Relation to Bootloader The Bootloader is",
          "Specification of ECU State Manager AUTOSAR CP R20-11 Document TitleSpecification of ECU State Manager Document Owner AUTOSAR Document Responsibility AUTOSAR Document Identification No 78 Document Status published Part of AUTOSAR Standard Classic Platform Part of Standard Release R20-11 Document Change History Date Release Changed by Description 2020-11-30 R20-11AUTOSAR Release ManagementCorrected broken chapter structure EcuM_UserType handling improved Minor content changes, clarifications (multi-core, configuration, values) 2019-11-28 R19-11AUTOSAR Release ManagementNo content changes Changed Document Status from Final to published 2018-10-31 4.4.0AUTOSAR Release ManagementReworked BswM interface through EcuM_GoDownHaltPoll Removed EcuM fixed version references 2017-12-08 4.3.1AUTOSAR Release ManagementAdapt API Can_CheckWakeup Removed ConfigPtr parameter Removed Default error Removed unused DIO driver EcuM AUTOSAR service configure on service partition only 2016-11-30 4.3.0AUTOSAR Release ManagementPartial Network Cluster Support Initialization BSW scheduler slipt Added a driver initialization list Removed EcuM_StateType 1 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 2015-07-31 4.2.2AUTOSAR Release ManagementReworked slave core poll sequence Reviewed multicore shutdown synchronization Reclassified error types Editorial changes 2014-10-31 4.2.1AUTOSAR Release ManagementAdded switch configuration Defined initialization order for InitListZeroInitListOne Definition of the name pattern of c-init-data struct corrected Type conflicts solved Editorial changes 2014-03-31 4.1.3AUTOSAR Release ManagementEcuM errors reworked Inconsistencies between APIs and Interfaces resolved Type conflicts solved Editorial changes 2013-10-31 4.1.2AUTOSAR Release ManagementAdded API table for service interfaces Fixed traceability topics General clean-up of requirements (reviewed different interfaces, operations, descriptions and figures). Editorial changes 2 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 2013-03-15 4.1.1AUTOSAR AdministrationSpecified reset mode to use in case of pending wakeup events during shutdown Added callout for Reset Loop Detection Extended specification of parameter time of function EcuM_GetMostRecentShutdown Improved configuration description Added new APIs to enable asynchronous Trcv handling for CANFR Wakeup Adaption of EcuM Flex to support BSW modules distributed over multiple partitions Reclassified which Production Errors are Extended Production Errors Added possible error to operations of ClientServer-Interfaces, where no errors where defined Enhancement of configuration to initialize BSW modules by the EcuM Flex 2011-12-22 4.0.3AUTOSAR AdministrationFixed interoperability problems between EcuM and BswM Terminology of ECU State Manager Flexible more consistently described Modification of sleep sequences to minimize misses of wakeup interrupts 2010-09-30 3.1.5AUTOSAR AdministrationUpdated pseudo code for AUTOSAR Services Update startup procedure for multi core systems 2010-02-02 3.1.4AUTOSAR AdministrationRemoved state machine to accommodate mode-dependent scheduling Added Multi-Core support Added Alarm Clock feature Revised disclaimer 2008-08-13 3.1.1AUTOSAR AdministrationLegal disclaimer revised 3 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 2007-12-21 3.0.1AUTOSAR AdministrationFixed Wakeup mechanisms Included optional triggering of Watchdog Manager during Startup, Shutdown, and Sleep Extended startup sequence to have more flexibility and to directly initialize all other BSW modules Generated APIs from BSW UML model Generated configuration from Meta Model Document meta information extended Small layout adaptations made 2007-01-24 2.1.15AUTOSAR AdministrationCorrected startup flow and wakeup concept. Added specification for AUTOSAR ports. Modified configuration for compliance with variant management. Added new API services. Legal disclaimer revised Release Notes added Advice for users revised Revision Information added 2006-05-16 2.0AUTOSAR Administration Initial Release 4 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 Disclaimer This work (specification andor software implementation) and the material contained in it, as released by AUTOSAR, is for the purpose of information only. AUTOSAR and the companies that have contributed to it shall not be liable for any use of the work. The material contained in this work is protected by copyright and other types of intel- lectual property rights. The commercial exploitation of the material contained in this work requires a license to such intellectual property rights. This work may be utilized or reproduced without any modification, in any form or by any means, for informational purposes only. For any other purpose, no part of the work may be utilized or reproduced, in any form or by any means, without permission in writing from the publisher. The work has been developed for automotive applications only. It has neither been developed, nor tested for non-automotive applications. The word AUTOSAR and the AUTOSAR logo are registered trademarks. 5 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 Table of Contents 1 Introduction and Functional Overview 13 1.1 Backwards Compatibility to Previous ECU Manager Module Versions . 14 2 Definitions and Abbreviations 15 2.1 Definitions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 15 2.2 Abbreviations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 15 3 Related documentation 17 3.1 Input documents related standards and norms . . . . . . . . . . . . 17 3.2 Related specification . . . . . . . . . . . . . . . . . . . . . . . . . . . . 17 4 Constraints and Assumptions 18 4.1 Limitations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 18 4.2 Hardware Requirements . . . . . . . . . . . . . . . . . . . . . . . . . . 18 4.3 Applicability to car domains . . . . . . . . . . . . . . . . . . . . . . . . 18 5 Dependencies to other modules 19 5.1 SPAL Modules . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 19 5.1.1 MCU Driver . . . . . . . . . .",
          "Operation successful Possible Errors 1 E_NOT_OK Operation failed Operation ReleasePOSTRUN Comment Variation Possible Errors E_OK E_NOT_OK Operation ReleaseRUN Comment Variation Possible Errors E_OK E_NOT_OK Operation RequestPOSTRUN Comment Variation Possible Errors E_OK E_NOT_OK 149 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 Operation RequestRUN Comment Variation Possible Errors E_OK E_NOT_OK c() 8.8.6 Port Interface for EcuM_CurrentMode Interface 8.8.6.1 General Approach SWS_EcuM_04132 dThe mode port of the ECU State Manager module shall declare the following modes: STARTUP RUN POST_RUN SLEEP SHUTDOWN c(SRS_ModeMgm_09116) This definition is a simplified view of ECU Modes that applications do need to know. It does not restrict or limit in any way how application modes could be defined. Applica- tions modes are completely handled by the application itself. SWS_EcuM_04133 dMode changes shall be notified to SW-Cs through the RTE mode ports when the mode change occurs. This specification assumes that the port name is currentMode and that the direct API of RTE will be used. Under these conditions mode changes signaled by invoking Rte_StatusType Rte_Switch_currentMode_currentMode( Rte_ModeType_EcuM_Mode mode) where mode is the new mode to be notified. The value range is specified by the previ- ous requirement. The return value shall be ignored. A SW-C which wants to be notified of mode changes should require the mode switch interface EcuM_CurrentMode. c() 150 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 8.8.6.2 Data Types The mode declaration group EcuM_Mode represents the modes of the ECU State Manager module that will be notified to the SW-Cs. ModeDeclarationGroup EcuM_Mode STARTUP , RUN, POST_RUN, SLEEP , SHUTDOWN initialMode STARTUP ; SWS_EcuM_04107 d Name EcuM_Mode Kind ModeDeclarationGroup Category ALPHABETIC_ORDER Initial mode STARTUP On transition value POST_RUN RUN SHUTDOWN SLEEP Modes STARTUP Description c() 8.8.6.3 Service Interfaces SWS_EcuM_04108 d Name EcuM_CurrentMode Comment Interface to read the current ECU mode IsService true Variation ModeGroup currentMode EcuM_Mode c() 8.8.7 Definition of the ECU Manager Service This section provides guidance on the definition of the ECU Manager module Service. Note that these definitions can only be completed during ECU configuration (since certain ECU Manager module configuration parameters determine the number of ports 151 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 provided by the ECU Manager module service). Also note a SW-Cs implementation does not depend on these definitions. In an AUTOSAR system, there are ports both above and below the RTE. The ECU Manager module service description defines ports provided to the RTE and the de- scriptions of every SW-C that uses this service must contain service ports which required these ECU Manager module ports from the RTE. The EcuM provides the following ports: SWS_EcuM_04111 d Name ShutdownTarget_UserName Kind ProvidedPort Interface EcuM_ShutdownTarget Description Provides an interface to SW-Cs to select a new shutdown target and query the current shutdown target. Variation UserName ecuc(EcuMEcuMConfigurationEcuMFlexConfigurationEcuMFlexUserConfigEcu MFlexUser.SHORT -NAME) c() SWS_EcuM_04110 d Name BootTarget_UserName Kind ProvidedPort Interface EcuM_BootTarget Description Provides an interface to SW-Cs to select a new boot target and query the current boot target. Variation UserName ecuc(EcuMEcuMConfigurationEcuMFlexConfigurationEcuMFlexUserConfigEcu MFlexUser.SHORT -NAME) c() SWS_EcuM_03017 d Name AlarmClock_UserName Kind ProvidedPort Interface EcuM_AlarmClock Description Provides to SW-Cs an alarm clock. The EcuM_AlarmClock port uses port-defined argument values to identify the user that manages its alarm clock. Type EcuM_UserType Port Defined Argument Value(s)Value ecuc(EcuMEcuMConfigurationEcuMFlexConfigurationEcuMFlexUser ConfigEcuMFlexUser.value) Variation ecuc(EcuMEcuMFlexGeneralEcuMAlarmClockPresent) true UserName ecuc(EcuMEcuMConfigurationEcuMFlexConfigurationEcuMAlarm Clock.SHORT -NAME) c() SWS_EcuM_04113 d 152 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 Name time Kind ProvidedPort Interface EcuM_Time Description Provides the EcuMs time service to SWCs Variation c() SWS_EcuM_04135 d Name StateRequest_UserName Kind ProvidedPort Interface EcuM_StateRequest Description Provides an interface to SW-Cs to request state changes of the ECU state. The port uses port-defined argument values to identify the user. Type EcuM_UserType Port Defined Argument Value(s)Value ecuc(EcuMEcuMConfigurationEcuMFlexConfigurationEcuMFlexUser ConfigEcuMFlexUser.value) Variation UserName ecuc(EcuMEcuMConfigurationEcuMFlexConfigurationEcuMFlexUserConfigEcu MFlexUser.SHORT -NAME) c() SWS_EcuM_04112 d Name currentMode Kind ProvidedPort Interface EcuM_CurrentMode Description Variation c() The EcuM provides the following types: SWS_EcuM_91004 d Name EcuM_UserType Kind Type Derived from uint8 Description Unique value for each user. Variation Available via Rte_EcuM_Type.h c() SWS_EcuM_04102 d 153 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 Name EcuM_TimeType Kind Type Derived from uint32 Description This data type represents the time of the ECU Manager module. Variation Available via Rte_EcuM_Type.h c() d Name EcuM_BootTargetType Kind Type Derived from uint8 ECUM_BOOT_TARGET_APP 0 The ECU will boot into the application ECUM_BOOT_TARGET_OEM_ BOOTLOADER1 The ECU will boot into the OEM bootloaderRange ECUM_BOOT_TARGET_SYS_ BOOTLOADER2 The ECU will boot into the system supplier bootloader Description This type represents the boot targets the ECU Manager module can be configured with. The default boot target is ECUM_BOOT_TARGET_OEM_BOOTLOADER. Variation Available via Rte_EcuM_Type.h c() SWS_EcuM_04045 d Name EcuM_ShutdownCauseType Kind Type Derived from uint8 ECUM_CAUSE_UNKNOWN 0 No cause was set. ECUM_CAUSE_ECU_STATE 1 ECU state machine entered a state for shutdown ECUM_CAUSE_WDGM 2 Watchdog Manager detected a failureRange ECUM_CAUSE_DCM 3 Diagnostic Communication Manager requests a shutdown due to a service request Description This type describes the cause for a shutdown by the ECU State Manager. It can be extended by configuration. Variation Available via Rte_EcuM_Type.h c() SWS_EcuM_04101 d 154 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 Name EcuM_ShutdownModeType Kind Type Derived from uint16 ecuc(EcuMEcuMConfiguration EcuMFlexConfigurationEcu MResetMode.SHORT -NAME)256 ecuc(EcuMEcu MConfigurationEcu MFlexConfiguration EcuMResetMode.Ecu MResetModeId)Configured Reset Modes Range ecuc(EcuMEcuMConfiguration EcuMCommonConfigurationEcu MSleepMode.SHORT -NAME)ecuc(EcuM Ecu MConfigurationEcu MCommon ConfigurationEcu MSleepMode.Ecu MSleepModeId)Configured Sleep Modes Description This data type represents the modes of the ECU Manager module. Variation Available via Rte_EcuM_Type.h c() SWS_EcuM_04136 d Name EcuM_ShutdownTargetType Kind Type Derived from uint8 ECUM_SHUTDOWN_TARGET_ SLEEP0x0 ECUM_SHUTDOWN_TARGET_ RESET0x1 Range ECUM_SHUTDOWN_TARGET_ OFF0x2 Description Variation Available via Rte_EcuM_Type.h c() SWS_EcuM_04094 dIn the case of a MultiCore ECU, the EcuM AUTOSAR service (Standardized AUTOSAR Interfaces) may be offered on one or more cores. c() Although the EcuM service interfaces are available on every core (see section 7.9 Multi Core for details), the EcuC allows the provided ports to be bound to the interface on a particular partition, and therefore to a particular core (see the Specification",
          "execution control and will carry out GO OFF II activities. Available via EcuM.h c(SRS_ModeMgm_09114) 106 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 8.3.3 State Management 8.3.3.1 EcuM_ SetState SWS_EcuM_04122 d Service Name EcuM_SetState Syntaxvoid EcuM_SetState ( EcuM_StateType state ) Service ID hex 0x2b SyncAsync Synchronous Reentrancy Reentrant Parameters (in) state State indicated by BswM. Parameters (inout) None Parameters (out) None Return value None Description Function called by BswM to notify about State Switch. Available via EcuM.h c() SWS_EcuM_04123 dThe EcuM_SetState function shall set the EcuM State to the value of the State parameter. If the State parameter is not a valid value, the EcuM_SetState function shall not change the State and if Development Error Reporting is turned on, the EcuM_SetState function shall additionally send an ECUM_E_STATE_PAR_OUT_OF_RANGE error message to the DET module.c(SRS_ModeMgm_09116) 8.3.3.2 EcuM_RequestRUN SWS_EcuM_04124 d Service Name EcuM_RequestRUN SyntaxStd_ReturnType EcuM_RequestRUN ( EcuM_UserType user ) Service ID hex 0x03 SyncAsync Synchronous Reentrancy Reentrant Parameters (in) user ID of the entity requesting the RUN state. Parameters (inout) None Parameters (out) None 5 107 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 4 Return value Std_ReturnType E_OK: The request was accepted by EcuM. E_NOT_OK: The request was not accepted by EcuM Description Places a request for the RUN state. Requests can be placed by every user made known to the state manager at configuration time. Available via EcuM.h c() SWS_EcuM_04125 dRequests of EcuM_RequestRUN cannot be nested, i.e. one user can only place one request but not more. Additional or duplicate user requests by the same user shall be reported to DET. Of course the DET will only be notified under development conditions. c(SRS_ModeMgm_09116) SWS_EcuM_04126 dAn implementation must track requests for each user known on the ECU. Run requests are specific to the user. c(SRS_ModeMgm_09116) SWS_EcuM_03024 dIf development error detection is enabled and there are multiple requests by the same user detected by EcuM_RequestRUN the function shall report ECUM_E_MULTIPLE_RUN_REQUESTS to Det.c() 8.3.3.3 EcuM_ReleaseRUN SWS_EcuM_04127 d Service Name EcuM_ReleaseRUN SyntaxStd_ReturnType EcuM_ReleaseRUN ( EcuM_UserType user ) Service ID hex 0x04 SyncAsync Synchronous Reentrancy Reentrant Parameters (in) user ID of the entity releasing the RUN state. Parameters (inout) None Parameters (out) None Return value Std_ReturnType E_OK: The release request was accepted by EcuM E_NOT_OK: The release request was not accepted by EcuM Description Releases a RUN request previously done with a call to EcuM_RequestRUN. The service is intended for implementing AUTOSAR ports. Available via EcuM.h c(SRS_ModeMgm_09116) SWS_EcuM_03023 dIf development error detection is enabled and EcuM_Re- leaseRUN did not find a previous matching request for the provided user, then the function shall report ECUM_E_MISMATCHED_RUN_RELEASE to Det.c() Configuration of EcuM_ReleaseRUN: Refer to EcuM_UserType for more information about user IDs and their generation. 108 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 8.3.3.4 EcuM_RequestPOST_RUN SWS_EcuM_04128 d Service Name EcuM_RequestPOST_RUN SyntaxStd_ReturnType EcuM_RequestPOST_RUN ( EcuM_UserType user ) Service ID hex 0x0a SyncAsync Synchronous Reentrancy Reentrant Parameters (in) user ID of the entity requesting the POST RUN state. Parameters (inout) None Parameters (out) None Return value Std_ReturnType E_OK: The request was accepted by EcuM E_NOT_OK: The request was not accepted by EcuM Description Places a request for the POST RUN state. Requests can be placed by every user made known to the state manager at configuration time. Requests for RUN and POST RUN must be tracked independently (in other words: two independent variables). The service is intended for implementing AUTOSAR ports. Available via EcuM.h c(SRS_ModeMgm_09116) SWS_EcuM_03025 dIf development error detection is enabled and there are multiple requests by the same user detected by EcuM_RequestPOST_RUN the function shall report ECUM_E_MULTIPLE_RUN_REQUESTS to Det.c() All requirements of 8.3.3.2 EcuM_RequestRUN apply accordingly to the function Ecu M_RequestPOST_RUN. Configuration of EcuM_RequestPOST_RUN: Refer to EcuM_UserType for more infor- mation about user IDs and their generation. 8.3.3.5 EcuM_ReleasePOST_RUN SWS_EcuM_04129 d Service Name EcuM_ReleasePOST_RUN SyntaxStd_ReturnType EcuM_ReleasePOST_RUN ( EcuM_UserType user ) Service ID hex 0x0b SyncAsync Synchronous Reentrancy Reentrant 5 109 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 4 Parameters (in) user ID of the entity releasing the POST RUN state. Parameters (inout) None Parameters (out) None Return value Std_ReturnType E_OK: The release request was accepted by EcuM E_NOT_OK: The release request was not accepted by EcuM Description Releases a POST RUN request previously done with a call to EcuM_RequestPOST_RUN. The service is intended for implementing AUTOSAR ports. Available via EcuM.h c(SRS_ModeMgm_09116) SWS_EcuM_03026 dIf development error detection is enabled and EcuM_Release- POST_RUN did not find a previous matching request for the provided user, then the function shall report ECUM_E_MISMATCHED_RUN_RELEASE to Det.c() Configuration of EcuM_ReleasePOST_RUN: Refer to EcuM_UserType for more infor- mation about user IDs and their generation. 8.3.4 Shutdown Management 8.3.4.1 EcuM_SelectShutdownTarget SWS_EcuM_02822 d Service Name EcuM_SelectShutdownTarget SyntaxStd_ReturnType EcuM_SelectShutdownTarget ( EcuM_ShutdownTargetType shutdownTarget, EcuM_ShutdownModeType shutdownMode ) Service ID hex 0x06 SyncAsync Synchronous Reentrancy Reentrant shutdownTarget The selected shutdown target. Parameters (in) shutdownMode The identfier of a sleep mode (if target is ECUM_SHUTDOWN_ TARGET_SLEEP) or a reset mechanism (if target is ECUM_ SHUTDOWN_TARGET_RESET) as defined by configuration. Parameters (inout) None Parameters (out) None Return value Std_ReturnType E_OK: The new shutdown target was set E_NOT_OK: The new shutdown target was not set Description EcuM_SelectShutdownTarget selects the shutdown target. EcuM_SelectShutdownTarget is part of the ECU Manager Module port interface. Available via EcuM.h c(SRS_ModeMgm_09114, SRS_ModeMgm_09128, SRS_ModeMgm_09235) 110 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 SWS_EcuM_00624 dThe EcuM_SelectShutdownTarget function shall set the shut- down target to the value of the shutdownTarget parameter. c(SRS_ModeMgm_09114, SRS_ModeMgm_09235) SWS_EcuM_02185 dThe parameter mode of the function EcuM_SelectShutdown Target shall be the identifier of a sleep or reset mode. The mode parameter shall only be used if the target parameter equals ECUM_SHUTDOWN_TARGET_SLEEP or ECUM_SHUTDOWN_TARGET_RESET. In all other cases, it shall be ignored. Only sleep or reset modes that are defined at configuration time and are stored in the Ecu MCommonConfiguration container (see ECUC_EcuM_00181) are allowed as parame- ters.c(SRS_ModeMgm_09114) SWS_EcuM_02585 dEcuM_SelectShutdownTarget shall not initiate any setup activi- ties but only store",
          "Quality Management in the Automotive Industry Automotive SPICE Process Reference Model Process Assessment Model Version 3. 1 Title: Automotive SPICE Process Assessment Reference Model Author(s): VDA QMC Working Group 13 Automotive SIG Version: 3.1 Date: 2017-11-01 Status: PUBLISHED Confidentiality: Public Revision ID: 656 VDA Quality Management Center 2 Copyright n otice This document is a revision of the Automotive SPICE process assessment model 2.5 and the process reference model 4.5, which has been developed under the Automotive SPICE initiative by consensus of the car manufacturers within the Automotive Special Interest Group (SIG), a joint special interest group of Automotive OEM, the Procurement Forum and t he SPICE User Group. It has been revised by the Working Group 13 of the Quality Management Center (QMC) in the German Association of the Automotive Industry with the representation of members of the Automotive Specia l Interest Group, and with the agreement of the SPICE User Group. This agreement is based on a validation of the Automotive SPICE 3.0 version regarding any ISO copyright infringement and the st atements given from VDA QMC to t he S PICE User Group regarding t he current and future development of Automotive SPICE. This document reproduces relevant material from: ISOIEC 33020:2015 Information technology -- Process assessment -- Process measurement framework for assessment of process capability ISOIEC 33020 :2015 provides the following copyright release statement : Users of this International Standard may reproduce subclauses 5.2, 5.3, 5.4 and 5.6 as part of any process assessment model or maturity model so that it can be used for its intended purpose. ISOIEC 1 5504 -5:2006 Information Technology Process assessment Part 5: An exemplar Process Assessment Model ISOIEC 15504 -5:2006 provides the following copyright release statement : Users of this part of ISOIEC 15504 may freely reproduce the detailed descri ptions contained in the exemplar assessment model as part of any tool or other material to support the performance of process assessments, so that it can be used for its intended purpose. Relevant material from one of the mentioned standards is incorporated under the copyright release notice . Acknowledgemen t The VDA, the VDA QMC and the Working Group 13 explicitly acknowledge the high quality work carried out by the members of the Automoti ve Special Interest Group. We would like to thank all involved people, who have contributed to the development and publication of Automotive SPICE. VDA Quality Management Center 3 Derivative w orks You may not alter, transform, or build upon this work without the prior consent of both the SPICE User Group and the VDA Quality Management Center . Such consent may be given provided ISO copyright is not infringed. The detailed descriptions contained in this document may be incorporated as part of any tool or other material to support the perf ormance of process assessments, so that this process assessment model can be used for its intended purpose, provided that any such material is not offered for sale. All distribution of derivative works shall be made at no cost to the recipient. Distribution The Automotive SPICE process a ssessment model may only be obtained by download from the www.automotivespice.com web site. It is not permitted for the recipient to further distribute the document. Change r equests Any problems or change requests should be reported through the defined mechanism at the www.automotivespice.com web site. Trademark Automotive SPICE is a registered trademark of the Verband der Automobilindustrie e.V. (VDA) For further information about Automotive SPICE visit www.automotivespice.com . VDA Quality Management Center 4 Document history Version Date By Notes 2.0 2005 -05-04 AutoSIG SUG DRAFT RELEASE, pending final editorial review 2.1 2005 -06-24 AutoSIG SUG Editorial review comments implemented Updated to reflect changes in FDIS 15504 -5 2.2 2005 -08-21 AutoSIG SUG Final checks implemented: FORMAL RELEASE 2.3 2007 -05-05 AutoSIG SUG Revision following CCB: FORMAL RELEASE 2.4 2008 -08-01 AutoSIG SUG Revision following CCB: FORMAL RELEASE 2.5 2010 -05-10 AutoSIG SUG Revision following CCB: FORMAL RELEASE 3.0 2015 -07-16 VDA QMC WG13 Changes: See release notes 3.1 2017-11-01 VDA QMC WG13 Changes: See www.automotivespice.com Release n otes Version 3.0 of the process assessment model incorporates the following major changes : Chapter 1 Editorial adaption to ISOIEC 330xx series, Notes regarding combined PRMPAM in this document Chapter 2 Adaption to ISOIEC 330xx series Chapter 3 Text optimized for better understanding and adapted to ISOIEC 330xx series . Chapter 4 Renaming ENG to SYS SWE, Structure of old ENG Processes changed, Rework of AS 4.5 process reference model and AS 2.5 process performance indicators focusing on a set of highly significant processes assessed within the automotive industry ( VDA Scope). Chapter 5 Adaption based on AS 2.5 to the measurement f ramework of ISOIEC 33020 Annex A Conformity statement adapted to ISOIEC 33004 Annex B Modifications on work produ ct characteristics according to the changes in chapter 4. Annex C Update to recent standards. Introduction of specific terms used in AS 3.0 Annex D Added the major concepts used for AS 3.0 , incorporated Annex E of AS 2.5 Annex E Updated references to other standards Version 3.1 of the process assessment model incorporates minor changes. Please refer to www.automotivespice.com for a detailed change log. VDA Quality Management Center 5 Table of contents Copyright notice ................................ ................................ ................................ .............................. 2 Acknowledgement ................................ ................................ ................................ ........................... 2 Derivative works ................................ ................................ ................................ .............................. 3 Distribution ................................ ................................ ................................ ................................ ...... 3 Change requests ................................ ................................ ................................ ............................. 3 Trademark ................................ ................................ ................................ ................................ ...... 3 Document history ................................ ................................ ................................ ............................ 4 Release notes ................................ ................................ ................................ ................................ . 4 Table of contents ................................ ................................ ................................ ............................ 5 List of Figures ................................ ................................ ................................ ................................ . 7 List of Tables ................................ ................................ ................................ ................................ .. 7 1. Introduction ................................ ................................ ................................ .............................. 8 1.1. Scope ................................ ................................ ................................ .............................. 8 1.2. Terminology ................................ ................................ ................................ ..................... 9 1.3. Abbrevi ations ................................ ................................ ................................ ................... 9 2. Statement of compliance ................................ ................................ ................................ .......... 9 3. Process capability determination ................................ ................................ ............................",
          "a process execution: - key elements to be represented in the work product VDA Quality Management Center 119 Annex C Terminology Annex C lists the applicable terminology references from ISOIECIEEE 24765 and ISOIECIEEE 29119. It also provide s terms which are specifically defined within Automotive SPICE. Some of these definitions are based on ISOIECIEEE 24765. Table C.1 Terminology Term Origin Description Acceptance testing ISOIECIEEE 24765 Formal testing conducted to enable a user, customer, or authorized entity to determine whether to accept a system or component. Application parameter Automotive SPICE V3.1 An application parameter is a parameter containing data applied to the system or software functions, behavior or properties. T he notion of application parameter is expressed in two ways: firstly, the logical specification (including name, description, unit, value domain or threshold values or characteristic curves, respectively), and, secondly, the actual quantitative data value it receives by means of data application. Architecture element Automotive SPICE V3.1 Result of the decomposition of the architecture on system and software level: The system is decomposed into elements of the system architecture across appropriate hierarchical levels. The software is decomposed into elements of the software architecture across appropriate hierarchical levels down to the software components (the lowest level elements of the software architecture). Baseline ISOIECIEEE 24765 A speci fication or product that has been formally reviewed and agreed upon, that thereafter serves as the basis for further development, and can be changed only through formal change control procedures. Black -box testing Automotive SPICE V3.1 Method of requireme nt testing where tests are developed without knowledge of the internal structure and mechanisms of the tested item. Code review Automotive SPICE V3.1 A check of the code by one or more qualified persons to determine its suitability for its intended use an d identify discrepancies from specifications and standards. Coding ISOIECIEEE 24765 The transforming of logic and data from design specifications (design descriptions) into programming language. Consistency Automotive SPICE V3.1 Consistency addresses content and semantics and ensures that work products are not in contradiction to each other. Consistency is supported by bidirectional traceability. Defect FAULT Dynamic analysis ISOIECIEEE 24765 A process of evaluating a system or component based on its behavior during execution. Element Automotive SPICE V3.1 Elements are all structural objects on architectural and design level on the left side of the V. Such elements can be further decomposed into more fine -grained sub -elements of the architecture or design across appropriate hierarchical levels. Error ISOIECIEEE 24765 The difference between a computed, observed, or measured value or condition and the true, specified, or theoretically correct value or condition. VDA Quality Management Center 120 Fault ISOIECIEEE 24765 A manifestation of an error in software. Functional requirement ISOIECIEEE 24765 A statement that identifies what a product or process must accomplish to produce required behavior andor results. Functional specification ISOIECIEEE 24765 A document that specifies the functions that a system or component must perform. Often part of a requirements specification. Functional testing ISOIECIEEE 24765 Testing conducted to evaluate the compliance of a system or component with specified functional requirements. Hardware ISOIECIEEE 24765 Physical equipment used to process, store, or transmit computer programs or data. Hardware item Automotive SPICE V3.1 A physical representation of a hardware element. Integration Automotive SPICE V3.1 A process of combining items to larger items up to an overall system. Integrated software item Automotive SPICE V3.1 A set of software units or items that are integrated into a larger assembly for the purpose of integration testing. Integration testing Automotive SPICE V3.1 Testing in which items (software items, hardware items, or system items) are combined and tested to evaluate the interaction among them. Integrated system item Automotive SPICE V3.1 A set of items that are integrated into a larger assembly for the purpose of integration testing. Quality assurance ISOIECIEEE 24765 A planned and systematic pattern of all actions necessary to provide adequate confidence that an item or product conforms to established technical requirements. Regress ion testing Automotive SPICE V3.1 Selective retesting of a system or item to verify that modifications have not caused unintended effects and that the system or item still complies with its specified requirements. Requirement Automotive SPICE V3.1 A prope rty or capability that must be achieved or possessed by a system, system item, product, or service to satisfy a contract, standard, specification or other formally imposed documents. Requirements specification Automotive SPICE V3.1 A document that specifies the requirements for a system or item. Typically included are functional requirements, performance requirements, interface requirements, design requirements, and development standards. Software ISOIECIEEE 24765 Computer programs, procedures, and possibly associated documentation and data pertaining to the operation of a computer system. Software component Automotive SPICE V3.1 In Automotive SPICE V3.1 the term software component is used for the lowest level elements of the software architec ture for which finally the detailed design is defined. A software component consists of one or more software units. ARCHITECTURE ELEMENT , UNIT Software element ARCHITECTURE ELEMENT Software item ISOIECIEEE 24765 Identifiable part of a software product. Software unit UNIT VDA Quality Management Center 121 Static analysis Automotive SPICE V3.1 A process of evaluating an item based on its form, structure, content, or documentation. System Automotive SPICE V3.1 A collection of interacting items organized to accompli sh a specific function or set of functions within a specific environment. System item Automotive SPICE V3.1 Identifiable part of the system. System test ISOIECIEEE 24765 Testing conducted on a complete, integrated system to evaluate the systems compliance with its specified requirements. Testing Automotive SPICE V3.1 Activity in which an item (system, hardware, or software) is exe cuted under specific conditions; and the results are recorded , summarized and communicated . Traceability ISOIECIEE E 24765 The degree to which a relationship can be established between two or more products of the development process, especially products having a predecessor -successor or master -subordinate relationship to one another. Unit Automotive SPICE V3.1 Part of a software component which is not further subdivided. SOFTWARE COMPONENT Unit test Automotive SPICE",
          "BSW_00348, SRS_BSW_00353, SRS_BSW_00361, SRS_BSW_00439, SRS_- BSW_00449, SRS_BSW_00308, SRS_BSW_00309, SRS_BSW_00330, SRS_- BSW_00010, SRS_BSW_00341, SRS_BSW_00334) 210 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager",
          "................................ ......................... 87 5.6. Process capability Level 5: Innovating process ................................ .............................. 88 5.6.1. PA 5.1 Process innovation process attribute ................................ .......................... 88 5.6.2. PA 5.2 Process innovation implementation proc ess attribute ................................ . 89 Annex A Conformity of the process assessment and reference model ................................ ..... 91 A.1 Introduction ................................ ................................ ................................ .................... 91 A.2 Conformance to the requirements for process reference models ................................ ... 91 A.3 Conformance to the requirements for process assessment models ............................... 92 Annex B Work product characteristics ................................ ................................ ...................... 94 Annex C Terminology ................................ ................................ ................................ ............. 119 VDA Quality Management Center 7 Annex D Key concepts ................................ ................................ ................................ ........... 122 D.1 The Plug -in concept ................................ ................................ ................................ .. 122 D.2 The Tip of the V ................................ ................................ ................................ ........ 123 D.3 Terms Element, Component, Unit, and Item ................................ ...................... 123 D.4 Traceability and consistency ................................ ................................ ........................ 124 D.5 Agree and Summarize and Communicate ................................ .............................. 125 D.6 Evaluate, Verification Criteria and Ensuring compliance ................................ ...... 125 D.7 The relation between Strategy and Plan ................................ ................................ . 126 Annex E Reference standards ................................ ................................ ............................... 128 List of Figures Figure 1 Process assessment model relationship ................................ ................................ ..... 11 Figure 2 Automotive SPICE process reference model - Overview ................................ ............ 12 Figure 3 Relationship between assessment indicators and process capability .......................... 22 Figure 4 Possible levels of abstraction for the term process ................................ ................... 23 Figure 5 Performing a process assessment for determining process capability ........................ 23 Figure D.1 The Plug -in concept ................................ ................................ ............................ 122 Figure D.2 The tip of the V ................................ ................................ ................................ ... 123 Figure D.3 Element, component, unit, and item ................................ ................................ ...... 123 Figure D.4 Bidirectional traceability and consistency ................................ .............................. 124 Figure D.5 Agree, summarize and communicate ................................ ................................ .... 125 Figure D.6 Evaluation, verification criteria and c ompliance ................................ ..................... 126 Figure D.7 Strategy and plan ................................ ................................ ................................ ... 127 List of Tables Table 1 Abbreviation List ................................ ................................ ................................ ............ 9 Table 2 Primary life cycle processes ACQ process group ................................ ...................... 13 Table 3 Primary life cycle processes SPL process group ................................ ....................... 13 Table 4 Primary life cycle process es SYS process group ................................ ...................... 13 Table 5 Primary life cycle processes SWE process group ................................ ..................... 14 Table 6 Supporting life cycle processes - SUP process group ................................ .................. 14 Table 7 Organizational life cycle processes - MAN process group ................................ ............ 14 Table 8 Organizational life cycle processes - PIM process group ................................ ............. 15 Table 9 Organizational life cycle processes - REU process group ................................ ............ 15 Table 10 Process cap ability levels according to ISOIEC 33020 ................................ ............... 16 Table 11 Process attributes according to ISOIEC 33020 ................................ ......................... 16 Table 12 Rating scale according to ISOIEC 33020 ................................ ................................ .. 17 Table 13 Rating scale percentage values according to ISOIEC 33020 ................................ .... 17 Table 14 Refinement of rating scale according to ISOIEC 33020 ................................ ............ 17 Table 15 Refined rat ing scale percentage values according to ISOIEC 33020 ........................ 18 Table 16 Process capability level model according to ISOIEC 33020 ................................ ...... 20 Table 17 Template for the process description ................................ ................................ ......... 24 Table B.1 Structure of WPC tables ................................ ................................ ........................... 94 Table B.2 Work product characteristi cs ................................ ................................ .................... 94 Table C.1 Terminology ................................ ................................ ................................ ........... 119 Table E.1 Reference standards ................................ ................................ .............................. 128 VDA Quality Management Center 8 1. Introduction 1.1. Scope Process assessment is a disciplined evaluation of an organizational units processes against a process assessment model . The Automotive SPICE process assessment model (PAM) is intended for use when performing conformant assessments of the process capability on the development of embedded automotive systems. It was developed in accordance with the requirements of ISOIEC 33004. Automotive SPICE has its own process refere nce model (PRM) , which was developed based on the Automotive SPICE process reference model 4.5 . It was further developed and tailored considering the specific needs of the automotive industry. If processes beyond the scope of Automotive SPICE are needed, a ppropriate processes from other process reference models such as ISOIEC 12207 or ISOIEC 15288 may be added based on the business needs of the organization . The PRM is incorporated in this document and is used in conjunction with the Automotive SPICE process assessment model when performing an assessment. This Automotive SPICE process assessment model contains a set of indicators to be considered when interpreting the intent of the Automotive SPICE process reference m odel. These indicators may also be used when implementing a process improvement program subsequent to an assessment. VDA Quality Management Center 9 1.2. Terminology Automotive SPICE follows the following preceden ce for use of terminology: a) ISOIEC 33001 for assessment related terminology b) ISOIECIEEE 24765 and ISOIECIEEE 29119 terminology (as contained in Annex C) c) Terms introduced by Automotive SPICE (as contained in Annex C) 1.3. Abbreviations AS Automotive SPICE BP Base Practice CAN Controller Area Network CASE Computer -Aided Software Engineering, CCB Change Control Board CFP Call For Proposals CPU Central Processing Unit ECU Electronic Control Unit EEPROM Electrically Erasable Programmable Read-Only Memory GP Generic Practice GR Generic Resource IEC International Electrotechnical Commission IEEE Institute of Electrical and Electronics Engineers IO Input Output ISO International Organization for Standardization ITT Invitation To Tender LIN Local Interconnect Network MISRA Motor Industry Software Reliability Association MOST Media Oriented Systems Transport PA Process Attribute PAM Process Assessment Model PRM Process Reference Model PWM Pulse Width Modulation RAM Random Access Memory ROM Read Only Memory SPICE Software Process Improvement and Capability d Etermination SUG Spice User Group USB Universal Serial Bus WP Work Product WPC Work Product Characteristic Table 1 Abbreviation List 2. Statement of compliance The Automotive SPICE process assessment model and process reference model is conformant with the IS OIEC 33004 , and can be used as the basis for conducting an assessment of process capability. VDA Quality Management Center 10 ISOIEC 33020 is used as an",
          "and ISOIECIEEE 29119 terminology (as contained in Annex C) c) Terms introduced by Automotive SPICE (as contained in Annex C) 1.3. Abbreviations AS Automotive SPICE BP Base Practice CAN Controller Area Network CASE Computer -Aided Software Engineering, CCB Change Control Board CFP Call For Proposals CPU Central Processing Unit ECU Electronic Control Unit EEPROM Electrically Erasable Programmable Read-Only Memory GP Generic Practice GR Generic Resource IEC International Electrotechnical Commission IEEE Institute of Electrical and Electronics Engineers IO Input Output ISO International Organization for Standardization ITT Invitation To Tender LIN Local Interconnect Network MISRA Motor Industry Software Reliability Association MOST Media Oriented Systems Transport PA Process Attribute PAM Process Assessment Model PRM Process Reference Model PWM Pulse Width Modulation RAM Random Access Memory ROM Read Only Memory SPICE Software Process Improvement and Capability d Etermination SUG Spice User Group USB Universal Serial Bus WP Work Product WPC Work Product Characteristic Table 1 Abbreviation List 2. Statement of compliance The Automotive SPICE process assessment model and process reference model is conformant with the IS OIEC 33004 , and can be used as the basis for conducting an assessment of process capability. VDA Quality Management Center 10 ISOIEC 33020 is used as an ISOIEC 33003 compliant Measurement Framework. A statement of compliance of the process assessment model and process reference model with the requirements of ISOIEC 33004 is provided in Annex A. VDA Quality Management Center 11 3. Process capability determination The concept of process capability determination by using a process assessment model is based on a two -dimensional framework. The first dimension is provided by processes defined in a process reference model (process dimension). The second dimension consists of capability levels that are further subdivided into process attributes (capability dimension). The pr ocess attributes provide the measurable characteristics of process capability. The process assessment model selects processes from a process reference model and supplements with indicators. These indicators support the collection of objective evidence whic h enable an assessor to assign ratings for processes according to the capability dimension. The relationship is shown in Figure 1: Process1Measurement framework (ISOIEC 33020) Capability levels Process attributes Rating Scale Rating method Aggregation method Process capability level model Process2 Process3 Process4 ...Process assessment model (Automotive SPICE) Process capability indicators Process performance indicators Process reference model (Automotive SPICE) Domain and scopes Process purposes Process outcomes Figure 1 Process assessment model relationship VDA Quality Management Center 12 3.1. Process reference m odel Processes are grouped by process category and at a second level into process groups according to the type of activity they address. There are 3 p rocess categories: Primary life cycle processes , Organizational life cycle processes and Supporting life cycle processes . Each process is described in terms of a purpose statement. The purpose statement contains the unique functional objectives of the process when performed in a particular environment. For each purpose statement a list of speci fic outcomes is associated, as a list of expected positive results of the process performance. For the process dimension, the Automotive SPICE process reference model provides the set of processes shown in Figure 2. Management Process Group (MAN) Supporting Process Group (SUP)Acquisition Process Group (ACQ) Supply Process Group (SPL)ACQ.4 Supplier Monitoring ACQ.11 Technical Requirements ACQ.12 Legal and Administrative Requirements ACQ.13 Project Requirements ACQ.14 Request for Proposals ACQ.15 Supplier Qualification SPL.1 Supplier Tendering SPL.2 Product ReleaseSUP.1 Quality AssuranceSUP.2 VerificationSUP.4 Joint ReviewSUP.7 Documentation SUP.8 Configuration ManagementSUP.9 Problem Resolution ManagementSUP.10 Change Request ManagementMAN.3 Project Management MAN.5 Risk Management MAN.6 MeasurementACQ.3 Contract Agreement Process Improvement Process Group (PIM) PIM.3 Process ImprovementReuse Process Group (REU) REU.2 Reuse Program ManagementSystem Engineering Process Group (SYS) SYS.1 Requirements Elicitation SYS.2 System Requirements Analysis SYS.3 System Architectural DesignSYS.4 System Integration and Integration TestSYS.5 System Qualification Test Software Engineering Process Group (SWE) SWE.1 Software Requirements Analysis SWE.2 Software Architectural Design SWE.3 Software Detailed Design and Unit ConstructionSWE.4 Software Unit VerificationSWE.5 Software Integration and Integration TestSWE.6 Software Qualification Test Primary Life Cycle Processes Supporting Life Cycle Processes Organizational Life Cycle Processes Figure 2 Automotive SPICE process reference model - Overview VDA Quality Management Center 13 3.1.1. Primary life cycle processes category The p rimary life cycle processes category consists of processes that may be used by the customer when acquiring products from a supplier, and by the supplier when responding and delivering products to the customer including the engineering processes needed for specification, design, deve lopment, integration and testing. The primary life cycle processes category consists of the following groups: the Acquisition p rocess group; the Supply process group; the System engineering process group; the Sof tware engineering process group. The Acqui sition process group (ACQ) consists of processes that are performed by the customer, or by the supplier when acting as a customer for its own suppliers, in order to acquire a product andor service. ACQ.3 Contract Agreement ACQ.4 Supplier Monitoring ACQ.11 Technical Requirements ACQ.12 Legal and Administrative Requirements ACQ.13 Project Requirements ACQ.14 Request for Proposals ACQ.15 Supplier Qualification Table 2 Primary life cycle processes ACQ process group The Supply process group (SPL) consists of processes performed by the supplier in order to supply a product andor a service. SPL.1 Supplier Tendering SPL.2 Product Release Table 3 Primary life cycle processes SPL process group The System Engineering process group (SYS) consists of processes addressing the elicitation and management of customer and internal requirements, the definition of the system architecture and the integration and testing on the system level. SYS.1 Requirement s Elicitation SYS.2 System Requirements Analysis SYS.3 System Architectural Design SYS.4 System Integration and Integration Test SYS.5 System Qualification Test Table 4 Primary life cycle processes SYS process group The Software Engineering process group (SWE) consists of processes addressing the management of software requirements derived from the system requirements, the development of the VDA Quality Management Center 14 corresponding software architecture and design as well as the implementation, integration and testing of the software. SWE.1 Software Requirements Analysis SWE.2 Software Architectural Design SWE.3 Software Detailed Design and Unit Construction SWE.4 Software Unit Verification SWE.5 Software Integration and Integration"
        ],
        "relevant_ids": [
          "chunk_1",
          "chunk_5",
          "chunk_10",
          "chunk_15"
        ],
        "groundedness": 0.8,
        "hallucination_rate": 0.1
      },
      {
        "query": "What assessment methods are recommended for both AUTOSAR and Automotive SPICE?",
        "retrieved_ids": [
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null
        ],
        "retrieved_contents": [
          "BSW_00348, SRS_BSW_00353, SRS_BSW_00361, SRS_BSW_00439, SRS_- BSW_00449, SRS_BSW_00308, SRS_BSW_00309, SRS_BSW_00330, SRS_- BSW_00010, SRS_BSW_00341, SRS_BSW_00334) 210 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager",
          "intermediate step to providing a process attribute rating. When performing rating, the rating method employed shall be specified relevant to the class of assessment. The following rati ng methods are defined. The use of rating method may vary according to the class, scope and context of an assessment. The lead assessor shall decide which (if any) rating method to use. The selected rating method(s) shall be specified in the assessment inp ut and referenced in the assessment report. ISOIEC 33020 provides the following 3 rating methods: Rating method R1 The approach to process attribute rating shall satisfy the following conditions: a) Each process outcome of each process within the scope of the assessment shall be characterized for each process instance, based on validated data; b) Each process attribute outcome of each process attribute for each process within the scope of the assessment shall be characterised for each process instance, b ased on validated data; c) Process outcome characterisations for all assessed process instances shall be aggregated to provide a process performance attribute achievement rating; d) Process attribute outcome characterisations for all assessed process insta nces shall be aggregated to provide a process attribute achievement rating. Rating method R2 The approach to process attribute rating shall satisfy the following conditions: a) Each process attribute for each process within the scope of the assessment shal l be characterized for each process instance, based on validated data; b) Process attribute characterisations for all assessed process instances shall be aggregated to provide a process attribute achievement rating. Rating method R3 Process attribute ratin g across assessed process instances shall be made without aggregation. VDA Quality Management Center 19 In principle the three rating methods defined in ISOIEC 33020 depend on a) whether the rating is made only on process attribute level (Rating method 3 and 2) or with more level of d etail both on process attribute and process attribute outcome level (Rating method 1); and b) the type of aggregation ratings across the assessed process instances for each process If a rating is performed for both process attributes and process attribute o utcomes (Rating method 1), the result will be a process performance attribute outcome rating on level 1 and a process attribute achievement rating on higher levels. Depending on the class, scope and context of the assessment an aggregation within one proce ss (one-dimensional, vertical aggregation), across multiple process instances (one -dimensional, horizontal aggregation) or both (two -dimensional, matrix aggregation) is performed. ISOIEC 33020 provides the following examples: When performing an assessment , ratings may be summarised across one or two dimensions. For example, when rating a process attribute for a given process, one may aggregate ratings of the associated process (attribute) outcomes such an aggregation will be performed as a vertical aggre gation (one dimension). process (attribute) outcome for a given process attribute across multiple process instances, one may aggregate the ratings of the associated process instances for the given process (attribute) outcome such an aggregation will be per formed as a horizontal aggregation (one dimension) process attribute for a given process, one may aggregate the ratings of all the process (attribute) outcomes for all the processes instances such an aggregation will be performed as a matrix aggregation across the full scope of ratings (two dimensions) The standard defines different methods for aggregation. Further information can be taken from ISOIEC 33020. VDA Quality Management Center 20 3.2.3. Process capability level model The process capability level achieved by a process shall be der ived from the process attribute ratings for that process according to the process capability level model defined in Table 1 6. The process capability level model defines the rules how the achievement of each level depends on the rating of the process attrib utes for the assessed and all lower levels. As a general rule the achievement of a given level requires a largely achievement of the corresponding process attributes and a full achievement of any lower lying process attribute. Scale Process attribute Rating Level 1 PA 1.1: Process Performance Largely Level 2 PA 1.1: Process Performance PA 2.1: Performance Management PA 2.2: Work Product Management Fully Largely Largely Level 3 PA 1.1: Process Performance PA 2.1: Performance Management PA 2.2: Work Product Management PA 3.1: Process Definition PA 3.2: Process Deployment Fully Fully Fully Largely Largely Level 4 PA 1.1: Process Performance PA 2.1: Performance Management PA 2.2: Work Product Management PA 3.1: Process Definition PA 3.2: Process Deployment PA 4.1: Quantitative Analysis PA 4.2: Quantitative Control Fully Fully Fully Fully Fully Largely Largely Level 5 PA 1.1: Process Performance PA 2.1: Performance Management PA 2.2: Work Product Management PA 3.1: Process Definition PA 3.2: Process Deployment PA 4.1: Quantitative Analysis PA 4.2: Quantitative Control PA 5.1: Process Innovation PA 5.2: Process Innovation Implementation Fully Fully Fully Fully Fully Fully Fully Largely Largely Table 16 Process capability level model according to ISOIEC 33020 VDA Quality Management Center 21 3.3. Process assessment m odel The process assessment model offers indicators in order to identify whether the process outcomes and the p rocess attribute outcomes (achievements ) are present or absent in the instantiated processes of projects and organizational units. These indicators provide guidance for assessors in accumulating the necessary objective evidence to support judgments of capability. They are not intended to be rega rded as a mandatory set of checklists to be followed. In order to judge the presence or absence of process outcomes and process achievements an assessment obtains objective evidence. All such evidence comes from the examination of work products and reposit ory content of the assessed processes, and from testimony provided by the performers and managers of the assessed processes. This evidence is mapped to the PAM indicators to allow establishing the correspondence to the relevant process outcomes and process attribute achievements . There are two types of indicators: Process performance i ndicators , which apply exclusively to capability Level 1. They provide an indication of the extent of fulfillment of the process outcomes Process capability",
          "4 15-06 Project status report OUTCOME 4, 6 VDA Quality Management Center 71 4.6.2. MAN.5 Risk Management Process ID MAN.5 Process name Risk Management Process purpose The purpose of the Risk Management Process is to identify, analyze, treat and monitor the risks continuously. Process outcomes As a result of successful implementation of this process: 1) the scope of the risk management to be performed is determined; 2) appropriate risk management strategies are defined and implemented; 3) risks are identified as they develop during the conduct of the project; 4) risks are analyzed and the priority in which to apply resources to treatment of these risks is determined; 5) risk measures are defined, applied, and assessed to determine changes in the status of risk and the progress of the treatment activities; and 6) appropriate treatment is taken to correct or avoid the impact of risk based on its priority, probability, and consequence or other defined risk threshold. Base practices MAN.5.BP1: Establish risk management scope. Determine the scope of risk management to be performed for the project, in accordance with organizational risk management policies. OUTCOME 1 NOTE 1: Risks may include technical, economic and timing risks. MAN.5.BP2: Define risk management strateg ies. Define appropriate strategies to identify risks, mitigate risks and set acceptability levels for each risk or set of risks, both at the project and organizational level. OUTCOME 2 MAN.5.BP3: Identify risks. Identify risks to the project both initial ly within the project strategy and as they develop during the conduct of the project, continuously looking for risk factors at any occurrence of technical or managerial decisions. OUTCOME 2, 3 NOTE 2: Examples of risk areas that are typically analyzed fo r potentia l risk reasons or risks factors include: cost, schedule, effort, resource, and technical. NOTE 3: Examples of risk factors may include: unsolved and solved trade -offs, decisions of not implementing a project feature, design changes, lack of expec ted resource s. MAN.5.BP4: Analyze risks. Analyze risks to determine the priority in which to apply resources to mitigate these risks. OUTCOME 4 NOTE 4: Risks are normally analyzed to determine their probability, consequence and severity. NOTE 5: Different techniques may be used to analyze a system in order to understand if risks exist, for example, functional analysis, simulation, FMEA, FTA etc. MAN.5. BP5: Define risk treatment actions. For each risk (or set of risks) define, perform and track the selected actions to keepreduce the risks to acceptable level. OUTCOME 5, 6 VDA Quality Management Center 72 MAN5.BP6: Monitor risks. For each risk (or set of risks) define measures (e.g. metrics) to determine changes in the status of a risk and to evaluate the progress of the of mitig ation activities. Apply and assess these risk measures. OUTCOME 5, 6 NOTE 6: Major risks may need to be communicated to and monitored by higher levels of management. MAN.5.BP7: Take corrective action. When expected progress in risk mitigation is not achi eved, take appropriate corrective action to reduce or avoid the impact of risk. OUTCOME 6 NOTE 7: Corrective actions may involve developing and implementing new mitigation strategies or adjusting the existing strategies. Output work products 07-07 Risk measure OUTCOME 5 08-14 Recovery plan OUTCOME 4, 6 08-19 Risk management plan OUTCOME ALL 08-20 Risk mitigation plan OUTCOME 3, 4, 5, 6 13-20 Risk action request OUTCOME 1, 2, 6 14-02 Corrective action register OUTCOME 6 14-08 Tracking system OUTCOME 5, 6 15-08 Risk analysis report OUTCOME 4 15-09 Risk status report OUTCOME 4, 5 4.6.3. MAN.6 Measurement Process ID MAN.6 Process name Measurement Process purpose The purpose of the Measurement Process is to collect and analyze data relating to the products developed and processes implemented within the organization and its projects, to support effective management of the processes and to objectively demonstrate the quality of the products. Process outcomes As a result of successful implementation of this process: 1) organizational commitment is established and sustained to implement the measurement process; 2) the measurement information needs of organizational and management processes are identified; 3) an appropria te set of measures, driven by the information needs are identified andor developed; 4) measurement activities are identified and performed; 5) the required data is collected, stored, analyzed, and the results interpreted; 6) information products are used to support decisions and provide an objective basis for communication; and 7) the measurement process and measures are evaluated and communicated to the process owner. VDA Quality Management Center 73 Base practices MAN.6.BP1: Establish organizational commitment for measurement. A commitment of management and staff to measurement is established and communicated to the organizational unit. OUTCOME 1 MAN.6.BP2: Develop measurement strategy. Define an appropriate measurement strategy to identify, perform and evaluate measurement activities and results, based on organizational and project needs. OUTCOME 1 MAN.6.BP3: Identify measurement information needs. Identify the measurement information needs of organizational and management processes. OUTCOME 2 MAN.6.BP4: Specify measures. Identify and develop an appropriate set of measures based on measurement information needs. OUTCOME 3 MAN.6.BP5: Perform measurement activities. Identify and perform measurements activities. OUTCOME 4 MAN.6.BP6: Retrieve me asurement data. Collect and store data of both base and derived measures, including any context information necessary to verify, understand, or evaluate the data. OUTCOME 5 MAN.6.BP7: Analyze measures. Analyze and interpret measurement data and develop i nformation products. OUTCOME 5 MAN.6.BP8: Use measurement information for decision -making. Make accurate and current measurement information accessible for any decision -making processes for which it is relevant. OUTCOME 6 MAN.6.BP9: Communicate measure s. Disseminate measurement information to all affected parties who will be using them and collect feedback to evaluate appropriateness for intended use. OUTCOME 5, 6 MAN.6.BP10: Evaluate information products and measurement activities. Evaluate informati on products and measurement activities against the identified information needs and measurement strategy. Identify potential improvements. OUTCOME 7 NOTE 1: Information products are produced as a result analysis of data in order to summarize and communic ate information. MAN.6.BP11: Communicate potential improvements. Communicate to the affected people the identified potential improvements concerning the",
          "process assessment model consists of six capability levels matching the capability levels defined in ISOIEC 33020 . The process capability indicators for the 9 process attributes included in the capa bility dimension for process capability level 1 to 5 are described. Each of the process attributes in this process assessment model is identical to the process attribute defined in the process measurement framework. The generic practices address the chara cteristics from each process attribute. The generic resources relate to the process attribute as a whole. Process capability level 0 does not include any type of indicators, as it reflects a non -implemented process or a process which fails to partially achieve any of its outcomes. NOTE: ISOIEC 33020 process attribute definitions and attribute outcomes are duplicated from ISOIEC 33020 in italic font and marked with a left side bar . 5.1. Process capability Level 0: Incomplete process The process is not implem ented, or fails to achieve its process purpose. At this level there is little or no evidence of any systematic achievement of the process purpose. 5.2. Process capability Level 1: Performed process The implemented process achieves its process purpose. The follo wing process attribute demonstrates the achievement of this level 5.2.1. PA 1.1 Process performance process attribute The process performance process attribute is a measure of the extent to which the process purpose is achieved. As a result of full achievement of this attribute: a) the process achieves its defined outcomes Generic practices GP 1.1.1 Achieve the process outcomes ACHIEVEMENT a Achieve the intent of the base practices. Produce work products that evidence the process outcomes. Generic resources Resources are used to achieve the intent of process specific base practices ACHIEVEMENT a 5.3. Process capability Level 2: Managed process The previously described Performed process is now implemented in a managed fashion (planned, monitored and adjusted) and its work products are appropriately established, controlled and maintained. The following process attributes, together with the previously defined process attribute, demonstrate the achievement of this level: VDA Quality Management Center 79 5.3.1. PA 2.1 Performance management process attri bute The performance management process attribute is a measure of the extent to which the performance of the process is managed. As a result of full achievement of this process attribute: a) Objectives for the performance of the process are identified; b) Perfor mance of the process is planned; c) Performance of the process is monitored; d) Performance of the process is adjusted to meet plans; e) Responsibilities and authorities for performing the process are defined, assigned and communicated; f) Personnel performing the pro cess are prepared for executing their responsibilities; g) Resources and information necessary for performing the process are identified, made available, allocated and used; h) Interfaces between the involved parties are managed to ensure both effective communic ation and clear assignment of responsibility. Generic practices GP 2.1.1 Identify the objectives for the performance of the process. ACHIEVEMENT a Performance objectives are identified based on process requirements. The scope of the process performance is defined. Assumptions and constraints are considered when identifying the performance objectives. NOTE 1: Perf ormance objectives may include (1) timely production of artifact s meeting the defined quality criteria, (2) process cycle time or frequency (3) resource usage ; and (4) boundaries of the process. NOTE 2: At minimum, pro cess performance objectives for resources, effort and schedule should be stated. GP 2.1.2 Plan the performance of the process to fulfill the identified objectives . ACHIEVEMENT b Plan(s) for the performance of the process are developed. The process performance cycle is defined. Key milestones for the performance of the process are established. Estimates for process performance attributes are determined and maintained. Process activities and tasks are defined. Schedule is defined and aligned with the approach to performing the process. Process work product reviews are planned. GP 2.1.3 Monitor the performance of the process against the plans. ACHIEVEMENT c VDA Quality Management Center 80 The process is performed according to the plan(s). Process performance is monitored to ensure planned results are achieved and to identify possible deviations GP 2.1. 4 Adjust the performance of the process. ACHIEVEMENT d Process performance issues are identi fied. Appropriate actions are taken when planned results and objectives are not achieved. The plan(s) are adjusted, as necessary. Rescheduling is performed as necessary. GP 2.1. 5 Define responsibilities and authorities for performing the process. ACHIEVEMENT e Responsibilities, commitments and authorities to perform the process are defined, assigned and communicated. Responsibilities and authorities to verify process work products are defined and assigned. The needs for process performance experien ce, knowledge and skills are defined. GP 2.1. 6 Identify, prepare, and make available resources to perform the process according to plan. ACHIEVEMENT f, g The human and infrastructure resources, necessary for performing the process are identified made ava ilable, allocated and used. The individuals performing and managing the process are prepared by training, mentoring, or coaching to execute their responsibilities. The information necessary to perform the process is identified and made available. GP 2.1. 7 Manage the interfaces between involved parties. ACHIEVEMENT h The individuals and groups involved in the process performance are determined. Responsibilities of the involved parties are assigned. Interfaces between the involved parties are managed. Communication is assured between the involved parties. Communication between the involved parties is effective. Generic resources Human resources with identified objectives, responsibilities and authorities ACHIEVEMENT e, f, h Facilities and infrastructure resources ACHIEVEMENT g, h Project planning, management and control tools, including time and cost reporting ACHIEVEMENT a, b, c, d Workflow management system ACHIEVEMENT d, f, g , h VDA Quality Management Center 81 Email andor other communication mecha nisms ACHIEVEMENT b, c, d, f, g , h Information andor experience repository ACHIEVEMENT b, d, e Problem and issues management mechanisms ACHIEVEMENT c 5.3.2. PA 2.2 Work product management process attribute The work product management process attribute is a measure of the extent to which the work products produced by the process are appropriately managed. As a result",
          "with the projects master plan that must occur for the treatment to be properly implemented Environmentinfrastructure: VDA Quality Management Center 103 WP ID WP Name WP Characteristics - describes any environmental or infrastructure requirements or impacts (e.g., safety or secur ity impacts that the treatment may have) Risk treatment plan change procedures and history 08-26 Documentation plan Identifies documents to be produced Defines the documentation activities during the life cycle of the software product or service Identifies any applicable standards and templates Defines requirements for documents Review and authorization practices Distribution of the documents Maintenance and disposal of the documents 08-27 Problem management plan Defines problem resolution activ ities including identification, recording, description and classification Problem resolution approach: evaluation and correction of the problem Defines problem tracking Mechanism to collect and distribute problem resolutions 08-28 Change management plan Defines change management activities including identification, recording, description, analysis and implementation Defines approach to track status of change requests Defines verification and validation activities Change approval and implication review 08-29 Improvement plan Improvement objectives derived from organizational business goals Organizational scope Process scope, the processes to be improved Key roles and responsibilities Appropriate milestones, review points and reporting mechanisms Activities to be performed to keep all those affected by the improvement program informed of progress 08-50 Test specification Test Design Specification Test Case Specification Test Procedure Specification Identification of test cases for regression testing Additi onally , for system integration: - identification of required system elements (hardware elements, wiring elements, settings for parameter s (such as application parameters or global variables ) , data bases, etc.) - necessary sequence or ordering identified for integrating the system elements 08-51 Technology monitoring plan No requirements additional to Plan (Generic) 08-52 Test plan Test Plan according to ISO29119 -3 Context : - projectTest sub -process - test item(s) - test scope - assumptions and constraints - stakeholder - testing communication Test strategy - identifies what needs there are to be satisfied VDA Quality Management Center 104 WP ID WP Name WP Characteristics - establishes the options and approach for satisfying the needs (black -box andor white -box-testing, boundary class test determination, regression testing strategy , etc.) - establishes the evaluation criteria against which the strategic options are evaluated - identifies any constraintsrisks and how these will be addressed - test design techniques - test completion criteria - test ending criteria - test start, abort and re -start criteria - metrics to be collected - test data requirements - retesting and regression testing - suspension and resumption criteria - deviations from the Organizational Test Strategy Test data requirements Test environment requirements Test sub -processes Test de liverables Testing activities and estimates 09-00 Policy Authorized Available to all personnel impacted by the policy Establishes practicesrules to be adhered to 09-03 Reuse policy Identification of reuse requirements Establishes the rules of reuse Documents the reuse adoption strategy including goals and objectives Identification of the reuse program Identification of the name of the reuse sponsor Identification of the reuse program participants Identification of the reuse steering function Identification of reuse program support functions 10-00 Process description A detailed description of the processprocedure which includes: - tailoring of the standard process (if applicable) - purpose of the process - outcomes of the process - task and activitie s to be performed and ordering of tasks - critical dependencies between task activities - expected time required to execute task - inputoutput work products - links between input and outputs work products Identifies process entry and exit criteria Identifies internal and external interfaces to the process Identifies process measures Identifies quality expectations Identifies functional roles and responsibilities Approved by authorized personnel 11-00 Product Is a resultdeliverable of the execution of a proce ss, includes services, systems (software and hardware) and processed materials Has elements that satisfy one or more aspects of a process purpose May be represented on various media (tangible and intangible) 11-03 Product release information Coverage for key elements (as appropriate to the application): Description of what is new or changed (including features removed) System information and requirements VDA Quality Management Center 105 WP ID WP Name WP Characteristics Identification of conversion programs and instructions Release numbering implementation may include: - the major release number - the feature release number - the defect repair number - the alpha or beta release; and the iteration within the alpha or beta release Identification of the component list (version identification included): - hardware software product elements, libraries, etc. - associated documentation list Newchanged parameter information ( e.g. for application parameters or global variables ) andor commands Backup and recovery information List of open known problems, faults, warning information, etc. Identification of verification and diagnostic procedures Technical support information Copyright and license information The release note may include an introduction, the environmental requirements, installation procedures, product invocation, new feature identification and a list of defect resolutions, known defects and workarounds 11-04 Product release package Includes the hardwaresoftwareproduct Includes and associated release elements such as: - system hardwaresoftwareproduct elements - associated customer documentation - application parameter definitions defined - command language defined - installation instructions - release letter 11-05 Software unit Follows established coding standards (as appropriate to the language and application): - commented - structured or optimized - meaningful naming conventions - parameter information identified - error codes defined - error messages descriptive and meaningful - formatting - indented, levels Follows data definition standards (as appropriate to the language and applica tion): - variables defined - data types defined - classes and inheritance structures defined - objects defined Entity relationships defined Database layouts are defined File structures and blocking are defined Data structures are defined Algorithms are defined Functional interfaces defined 11-06 System All elements of the product release are included Any required hardware Integrated product VDA Quality Management Center 106 WP ID WP Name WP Characteristics Customer documentation Fully configured set of the system elements: - application parameters defined - commands defined - data loaded or converted 11-07 Temporary solution Problem identification Release",
          "BSW_00348, SRS_BSW_00353, SRS_BSW_00361, SRS_BSW_00439, SRS_- BSW_00449, SRS_BSW_00308, SRS_BSW_00309, SRS_BSW_00330, SRS_- BSW_00010, SRS_BSW_00341, SRS_BSW_00334) 210 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager",
          "Specification of ECU State Manager AUTOSAR CP R20-11 Document TitleSpecification of ECU State Manager Document Owner AUTOSAR Document Responsibility AUTOSAR Document Identification No 78 Document Status published Part of AUTOSAR Standard Classic Platform Part of Standard Release R20-11 Document Change History Date Release Changed by Description 2020-11-30 R20-11AUTOSAR Release ManagementCorrected broken chapter structure EcuM_UserType handling improved Minor content changes, clarifications (multi-core, configuration, values) 2019-11-28 R19-11AUTOSAR Release ManagementNo content changes Changed Document Status from Final to published 2018-10-31 4.4.0AUTOSAR Release ManagementReworked BswM interface through EcuM_GoDownHaltPoll Removed EcuM fixed version references 2017-12-08 4.3.1AUTOSAR Release ManagementAdapt API Can_CheckWakeup Removed ConfigPtr parameter Removed Default error Removed unused DIO driver EcuM AUTOSAR service configure on service partition only 2016-11-30 4.3.0AUTOSAR Release ManagementPartial Network Cluster Support Initialization BSW scheduler slipt Added a driver initialization list Removed EcuM_StateType 1 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 2015-07-31 4.2.2AUTOSAR Release ManagementReworked slave core poll sequence Reviewed multicore shutdown synchronization Reclassified error types Editorial changes 2014-10-31 4.2.1AUTOSAR Release ManagementAdded switch configuration Defined initialization order for InitListZeroInitListOne Definition of the name pattern of c-init-data struct corrected Type conflicts solved Editorial changes 2014-03-31 4.1.3AUTOSAR Release ManagementEcuM errors reworked Inconsistencies between APIs and Interfaces resolved Type conflicts solved Editorial changes 2013-10-31 4.1.2AUTOSAR Release ManagementAdded API table for service interfaces Fixed traceability topics General clean-up of requirements (reviewed different interfaces, operations, descriptions and figures). Editorial changes 2 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 2013-03-15 4.1.1AUTOSAR AdministrationSpecified reset mode to use in case of pending wakeup events during shutdown Added callout for Reset Loop Detection Extended specification of parameter time of function EcuM_GetMostRecentShutdown Improved configuration description Added new APIs to enable asynchronous Trcv handling for CANFR Wakeup Adaption of EcuM Flex to support BSW modules distributed over multiple partitions Reclassified which Production Errors are Extended Production Errors Added possible error to operations of ClientServer-Interfaces, where no errors where defined Enhancement of configuration to initialize BSW modules by the EcuM Flex 2011-12-22 4.0.3AUTOSAR AdministrationFixed interoperability problems between EcuM and BswM Terminology of ECU State Manager Flexible more consistently described Modification of sleep sequences to minimize misses of wakeup interrupts 2010-09-30 3.1.5AUTOSAR AdministrationUpdated pseudo code for AUTOSAR Services Update startup procedure for multi core systems 2010-02-02 3.1.4AUTOSAR AdministrationRemoved state machine to accommodate mode-dependent scheduling Added Multi-Core support Added Alarm Clock feature Revised disclaimer 2008-08-13 3.1.1AUTOSAR AdministrationLegal disclaimer revised 3 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 2007-12-21 3.0.1AUTOSAR AdministrationFixed Wakeup mechanisms Included optional triggering of Watchdog Manager during Startup, Shutdown, and Sleep Extended startup sequence to have more flexibility and to directly initialize all other BSW modules Generated APIs from BSW UML model Generated configuration from Meta Model Document meta information extended Small layout adaptations made 2007-01-24 2.1.15AUTOSAR AdministrationCorrected startup flow and wakeup concept. Added specification for AUTOSAR ports. Modified configuration for compliance with variant management. Added new API services. Legal disclaimer revised Release Notes added Advice for users revised Revision Information added 2006-05-16 2.0AUTOSAR Administration Initial Release 4 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 Disclaimer This work (specification andor software implementation) and the material contained in it, as released by AUTOSAR, is for the purpose of information only. AUTOSAR and the companies that have contributed to it shall not be liable for any use of the work. The material contained in this work is protected by copyright and other types of intel- lectual property rights. The commercial exploitation of the material contained in this work requires a license to such intellectual property rights. This work may be utilized or reproduced without any modification, in any form or by any means, for informational purposes only. For any other purpose, no part of the work may be utilized or reproduced, in any form or by any means, without permission in writing from the publisher. The work has been developed for automotive applications only. It has neither been developed, nor tested for non-automotive applications. The word AUTOSAR and the AUTOSAR logo are registered trademarks. 5 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 Table of Contents 1 Introduction and Functional Overview 13 1.1 Backwards Compatibility to Previous ECU Manager Module Versions . 14 2 Definitions and Abbreviations 15 2.1 Definitions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 15 2.2 Abbreviations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 15 3 Related documentation 17 3.1 Input documents related standards and norms . . . . . . . . . . . . 17 3.2 Related specification . . . . . . . . . . . . . . . . . . . . . . . . . . . . 17 4 Constraints and Assumptions 18 4.1 Limitations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 18 4.2 Hardware Requirements . . . . . . . . . . . . . . . . . . . . . . . . . . 18 4.3 Applicability to car domains . . . . . . . . . . . . . . . . . . . . . . . . 18 5 Dependencies to other modules 19 5.1 SPAL Modules . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 19 5.1.1 MCU Driver . . . . . . . . . .",
          "are finished processing, the cores must be synchronized before entering SHUTDOWN. The BswM (which is distributed over all partitions) ascertains that the ECU should be shut down and synchronizes with each BwsM in the ECU. All BswMs induce de- initialization of all the partitions BSWs, SWCs and CDDs and send appropriate signals to the other BswMs to indicate their readiness to shut down. 78 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 For a shutdown of the ECU, the BswM (which lies in the same partition of the master EcuM) ultimately calls GoOff on the master core which distributes that request to all slave cores. The master EcuM de-initializes the BswM, and the SchM. The EcuMs on the slave cores de-initialize their SchM and BswM and then send a signal to indicate that the core is ready for ShutdownOS (again, see section section 7.9.3 Master Core - Slave Core Signalling for details). The master EcuM waits for the signal from each slave core EcuM and then initiates shutdown as usual on the master core (the master EcuM calls ShutdownAllCores , and the ECU is put to bed with the global shutdown hook) 79 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 7.9.6.1 Master Core SHUTDOWN module EcuMmodule SchMmodule BswMmodule McOsIntegration Code opt Pending wakeup events?loop over every BswM running in this core loop FOR all configured cores EcuM_OnGoOffOne() ShutdownAllCores(StatusType)EcuM_GetPendingWakeupEvents(EcuM_WakeupSourceType)BswM_Deinit() WaitEvent(Mask)SchM_Deinit()GetCoreID(CoreIdType) EcuM_SelectShutdownTarget(Std_ReturnType, EcuM_ShutdownTargetType, EcuM_ShutdownModeType) Figure 7.23: Master Core OffPreOS Sequence 80 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 SWS_EcuM_04020 d Integration Code module EcuMmodule McOs alt Shutdown Target Reset OffGetCoreID(CoreIdType) EcuM_AL_SwitchOff()EcuM_AL_Reset(EcuM_ResetType)EcuM_OnGoOffTwo() Figure 7.24: Master Core OffPostOS Sequencec () 81 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 7.9.6.2 Slave Core SHUTDOWN module EcuMmodule McOsmodule :SchMIntegration Code module BswM loop over every BswM running in this core SetEvent(TaskId, Mask)GetCoreID(CoreIdType) SchM_Deinit()BswM_Deinit()EcuM_OnGoOffOne() Figure 7.25: Slave Core OffPreOS Sequence SWS_EcuM_04022 d 82 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 module EcuMmodule McOsIntegration Code EcuM_OnGoOffTwo()GetCoreID(CoreIdType) Figure 7.26: Slave Core OffPostOS Sequencec () 7.9.7 SLEEP Phase When the shutdown target Sleep is requested, all cores are put to sleep simultaneously. The MCU must issue a halt for each core. As task timing and priority are local to a core in the OS, neither the scheduler nor the RTE must be synchronized after a halt. Because the master core could issue the MCU halt before all slave cores are finished processing, the cores must be synchronized before entering GoHalt. The BswMs ascertain that sleep should be initiated and distribute an appropriate ECU mode to each core. The BSWs, SWCs and CDDs on the slave cores must be informed by their partition local BswM, de-initialize appropriately and send appropriate mode requests to the BswM to indicate their readiness. If the ECU is put to sleep, the halts must be synchronized so that all slave cores are halted before the master core computes the checksum. The ECU Manager module on the master core uses the same signal mechanism as for synchronizing cores on Go Off. Similarly, the ECU Manager module on the master core must validate the checksum before releasing the slave cores from the halt state 83 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 7.9.7.1 Master Core SLEEP SWS_EcuM_04023 d module EcuMmodule OsIntegration Code module :BswM GetCoreID(CoreIdType) GetResource(RES_AUTOSAR_ECUM_core)EcuM_EnableWakeupSources(EcuM_WakeupSourceType)BswM_EcuM_CurrentWakeup(sources, ECUM_WKSTATUS_NONE ) Figure 7.27: Master Core GoSleep Sequencec () SWS_EcuM_04024 d 84 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 Integration Code module :BswMPeripheral Wakeup Sourcemodule Mcumodule EcuMmodule Wakeup Sourcemodule Os HALT opt RAM check failed alt Validation Needed Yes Noalt AlarmClock Service Present EcuM_AlarmClock only pending event AND Alarm not e xpired EcuM_GenerateRamHash() EcuM_CheckRamHash(uint8)Return from interrupt()Wait for all SlaveCores to be ready to sleep() EcuM_ErrorHook(uint16)Mcu_SetMode()EcuM_SetWakeupEvent(EcuM_WakeupSourceType)Mcu_SetMode(Mcu_ModeType) Signal all SlaveCores to continue()DisableAllInterrupts()Module_CheckWakeup() BswM_EcuM_CurrentWakeup(Sources, ECUM_WKSTATUS_VALIDATED)Mcu_SetMode(Mcu_ModeType)Interrupt() EcuM_GenerateRamHash()EcuM_CheckWakeup(EcuM_WakeupSourceType) EnableAllInterrupts()DisableAllInterrupts() BswM_EcuM_CurrentWakeup(sources, ECUM_WKSTATUS_PENDING)Activate PLL() Figure 7.28: Master Core Halt Sequence 85 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 c(SRS_ModeMgm_09239) SWS_EcuM_04025 d module EcuMmodule :BswMIntegration Code module Mcumodule Wakeup Sourcemodule Os loop WHILE no pendingvalidated events loop FOR all wakeup sources that need polling opt Wakeup detected alt Yes No ! EnableAllInterrupts() Signal SlaveCores to continue()EcuM_SetWakeupEvent(EcuM_WakeupSourceType) EcuM_GetPendingWakeupEvents(EcuM_WakeupSourceType)EcuM_SleepActivity() Module_CheckWakeup()Mcu_SetMode (Mcu_ModeType) BswMEcuM_CurrentWakeup(sources, ECUM_WKSTATUS_VALIDATED)DisableAllInterrupts() BswM_EcuM_CurrentWakeup(sources, ECUM_WKSTATUS_PENDING)EcuM_CheckWakeup(EcuM_WakeupSourceType) Figure 7.29: Master Core Poll Sequencec () SWS_EcuM_04026 d 86 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 module Mcumodule Osmodule EcuMIntegration Code Mcu_SetMode(Mcu_ModeType) EcuM_GetPendingWakeupEvents(EcuM_WakeupSourceType) ReleaseResource(RES_AUTOSAR_ECUM_core)EcuM_DisableWakeupSources(EcuM_WakeupSourceType)EnableAllInterrupts()DisableAllInterrupts() EcuM_AL_DriverRestart() Figure 7.30: Master Core WakeupRestart Sequencec () 7.9.7.2 Slave Core SLEEP SWS_EcuM_04027 d 87 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 module EcuMmodule Osmodule :BswMIntegration Code GetCoreID(CoreIdType) EcuM_EnableWakeupSources(EcuM_WakeupSourceType) GetResource(RES_AUTOSAR_ECUM_core)BswM_EcuM_CurrentWakeup(sources, ECUM_WKSTATUS_NONE ) Figure 7.31: Slave Core GoSleep Sequencec () SWS_EcuM_04028 d 88 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 Integration Code module Wakeup Sourcemodule EcuMmodule McuPeripheral Wakeup Sourcemodule Osmodule :BswM HALT alt Validation Needed Yes NoMcu_SetMode()EcuM_SetWakeupEvent(EcuM_WakeupSourceType)Interrupt()Signal MasterCore that Slave is ready to sleep() Return from interrupt()EcuM_CheckWakeup(EcuM_WakeupSourceType) BswM_EcuM_CurrentState(ECUM_WKSTATUS_PENDING) Wait for MasterCore to continue()DisableAllInterrupts() BswM_EcuM_CurrentWakeup(Sources, ECUM_WKSTATUS_VALI DATED)Module_CheckWakeup() EnableAllInterrupts()Mcu_SetMode(Mcu_ModeType) Figure 7.32: Slave Core Halt Sequencec () SWS_EcuM_04029 d 89 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 module EcuMmodule Wakeup Sourcemodule McuIntegration Code module Osmodule BswM loop WHILE no pendingvalidated events loop FOR all wakeup sources that need polling opt Wakeup detected alt Yes No ! Mcu_SetMode(Mcu_ModeType) Wait for signal from MasterCore to continue()EcuM_SetWakeupEvent(EcuM_WakeupSourceType)Module_CheckWakeup() BswM_EcuM_CurrentWakeup(sources, ECUM_WKSTATUS_PEND ING)EcuM_GetPendingWakeupEvents(EcuM_WakeupSourceType)EnableAllInterrupts() EcuM_CheckWakeup(EcuM_WakeupSourceType)DisableAllInterrupts() BswM_EcuM_CurrentWakeup(sources, ECUM_WKSTATUS_VALI DATED)EcuM_SleepActivity() Figure 7.33: Slave Core Poll Sequencec () SWS_EcuM_04030 d 90 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 module Mcumodule Osmodule EcuMIntegration Code Mcu_SetMode(Mcu_ModeType)DisableAllInterrupts() ReleaseResource(RES_AUTOSAR_ECUM_core)EcuM_DisableWakeupSources(EcuM_WakeupSourceType)EnableAllInterrupts() Figure 7.34: Slave Core WakeupRestart Sequencec () 7.9.8 Runnables and Entry points 7.9.8.1 Internal behavior SWS_EcuM_03018 dThe definition of the internal behavior of the the ECU Manager module shall be as follows. This detailed description is only needed for the configura- tion",
          "of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 module Osmodule Mcumodule EcuMIntegration Code opt Configuration data inconsistent EcuM_LoopDetection()EcuM_AL_DriverInitOne()Check consistency of configuration data()EcuM_AL_DriverInitZero() EcuM_DeterminePbConfiguration(const EcuM_ConfigType) StartOS(ECUM_DEFAULT_APP_MODE)Mcu_GetResetReason()EcuM_ErrorHook(ECUM_E_CONFIGURATION_DATA_INCONSISTEN T) Mcu_GetResetReason(Mcu_ResetType) EcuM_SelectShutdownTarget(Std_ReturnType, EcuM_ShutdownTargetType, EcuM_ShutdownModeType)Map reset reason to wakeup source() Figure 7.4: StartPreOS Sequence 37 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 The StartPreOS Sequence is intended to prepare the ECU to initialize the OS and should be kept as short as possible. Drivers should be initialised in the UP phase when possible and the callouts should also be kept short. Interrupts should not be used during this sequence. If interrupts have to be used, only category I interrupts are allowed in the StartPreOS Sequence 13. Initialization of drivers and hardware abstraction modules is not strictly defined by the ECU Manager. Two callouts EcuM_AL_DriverInitZero (see SWS_EcuM_02905 ) and EcuM_AL_DriverInitOne (see SWS_EcuM_02907 ) are provided to define the init blocks 0 and I. These blocks contain the initialization activities associated with the StartPreOS sequence. MCU_Init does not provide complete MCU initialization. Additionally, hardware depen- dent steps have to be executed and must be defined at system design time. These steps are supposed to be taken within the EcuM_AL_DriverInitZero (seeEcuM_- AL_DriverInitZero , SWS_EcuM_02905 ) or EcuM_AL_DriverInitOne call- outs (see EcuM_AL_DriverInitOne , SWS_EcuM_02907 ). Details can be found in the Specification of MCU Driver 10. SWS_EcuM_02181 dThe ECU Manager module shall call EcuM_GetValidated- WakeupEvents with the configured default shutdown target ( EcuMDefaultShut- downTarget ).c() See section 7.7 Shutdown Targets. SWS_EcuM_02603 dThe StartPreOS Sequence shall initialize all basic software modules that are needed to start the OS. c() 7.3.3 Activities in the StartPostOS Sequence StartPostOS Sequence Initialization Activity Comment Opt. Start BSW Scheduler no Init BSW Mode Manager no Init BSW SchedulerInitialize the semaphores for critical sections used by BSW modulesno Start Scheduler Timing Start periodical events for BSWSWCsno Table 7.2: StartPostOS Sequence Note to column Opt. : Optional activities can be switched on or off by configuration. See section 10.1 Common Containers and configuration parameters for details. SWS_EcuM_02932 dWhen activated through the EcuM_StartupTwo (see SWS_EcuM_02838 ) function, the ECU Manager module shall perform the actions in StartPostOS Sequence (see table 7.2). c(SRS_ModeMgm_09113) 3Category II interrupts require a running OS while category I interrupts do not. AUTOSAR OS re- quires each interrupt vector to be exclusively put into one category. 38 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 module SchMmodule EcuMmodule BswM SchM_Start(): Std_ReturnType SchM_StartTiming(const SchM_ConfigType)SchM_Init(const SchM_ConfigType)BswM_Init(const BswM_ConfigType ) Figure 7.5: StartPostOS Sequence 7.3.4 Checking Configuration Consistency 7.3.4.1 The Necessity for Checking Configuration Consistency in the ECU Man- ager In an AUTOSAR ECU several configuration parameters are set and put into the ECU at different times. Pre-compile parameters are set, inserted into the generated source code and compiled into object code. When the source code has been compiled, link- time parameters are set, compiled, and linked with the previously configured object code into an image that is put into the ECU. Finally, post-build parameters are set, compiled, linked, and put into the ECU at a different time. All these parameters must match to obtain a stable ECU. 39 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 Figure 7.6: BSW Configuration Steps The configuration tool can check the consistency of configuration time parameters it- self. The compiler may detect parameter errors at compilation time and the linker may find additional errors at link time. Unfortunately, finding configuration errors in post- build parameters is very difficult. This can only be achieved by checking that the pre-compile and link-time parameter settings used when compiling the code are exactly the same as the pre-compile and link-time parameter settings used when configuring and com- piling the post-build parameters. This can only be done at run-time. Explanation for SWS_EcuM_02796: The ECU Manager module checks the consis- tency once before initializing the first BSW module to avoid multiple checks scattered over the different BSW modules. This also implies that: SWS_EcuM_02796 dThe ECU Manager module shall not only check the consistency of its own parameters but of all post-build configurable BSW modules before initializing the first BSW module. c() The ECU Manager Configuration Tool must compute a hash value over all pre-compile and link-time configuration parameters of all BSW modules and store the value in the link-time ECUM_CONFIGCONSISTENCY_HASH (seeEcuMConfigConsistencyHash ) configuration parameter. The hash value is necessary for two reasons. First, the pre- compile and link-time parameters are not accessible at run-time. Second, the check 40 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 must be very efficient at run-time. Comparing hundreds of parameters would cause an unacceptable delay in the ECU startup process. The ECU Manager module Configuration Tool must in turn put the computed ECUM_ CONFIGCONSISTENCY_HASH value into the field in the EcuM_ConfigType structure which contains the root of all post-build configuration parameters. SWS_EcuM_02798 dThe ECU Manager module shall check in EcuM_Init (see SWS_EcuM_02811 ) that the field in the structure is equal to the value of ECUM_ CONFIGCONSISTENCY_HASH .c() By computing hash values at configuration time and comparing them at run-time the EcuM code can be very efficient and is furthermore independent of a particular hash computation algorithm. This allows the use of complex hash computation algorithms, e.g. cryptographically strong hash functions. Note that the same hash algorithm can be used to produce the value for the post-build configuration identifier in the EcuM_ConfigType structure. Then the hash algorithm is applied to the post-build parameters instead of the pre-compile and link-time param- eters. SWS_EcuM_02799 dThe hash computation algorithm used to compute a hash value over all pre-compile and link-time configuration parameters of all BSW modules shall always produce the same hash value for the same set of configuration data regardless of the order of configuration parameters in the XML files. c() 7.3.4.2 Example Hash Computation Algorithm Note: This chapter is not normative. It describes one possible way to compute hash values. A simple",
          "function defined in a common API in the Basis-SWSWS_EcuM_NA_00000 SRS_BSW_00172 The scheduling strategy that is built inside the Basic Software Modules shall be compatible with the strategy used in the systemSWS_EcuM_02836 SRS_BSW_00307 Global variables naming convention SWS_EcuM_NA_00000 SRS_BSW_00308 AUTOSAR Basic Software Modules shall not define global data in their header files, but in the C fileSWS_EcuM_NA_00000 SRS_BSW_00309 All AUTOSAR Basic Software Modules shall indicate all global data with read-only purposes by explicitly assigning the const keywordSWS_EcuM_NA_00000 SRS_BSW_00314 All internal driver modules shall separate the interrupt frame definition from the service routineSWS_EcuM_NA_00000 5 23 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 4 Requirement Description Satisfied by SRS_BSW_00323 All AUTOSAR Basic Software Modules shall check passed API parameters for validitySWS_EcuM_03009 SRS_BSW_00325 The runtime of interrupt service routines and functions that are running in interrupt context shall be kept shortSWS_EcuM_NA_00000 SRS_BSW_00327 Error values naming convention SWS_EcuM_04032 SRS_BSW_00330 It shall be allowed to use macros instead of functions where source code is used and runtime is criticalSWS_EcuM_NA_00000 SRS_BSW_00331 All Basic Software Modules shall strictly separate error and status informationSWS_EcuM_91005 SRS_BSW_00333 For each callback function it shall be specified if it is called from interrupt context or notSWS_EcuM_02171 SWS_EcuM_02345 SRS_BSW_00334 All Basic Software Modules shall provide an XML file that contains the meta dataSWS_EcuM_NA_00000 SRS_BSW_00337 Classification of development errors SWS_EcuM_04032 SRS_BSW_00339 Reporting of production relevant error statusSWS_EcuM_02987 SRS_BSW_00341 Module documentation shall contains all needed informationsSWS_EcuM_NA_00000 SRS_BSW_00347 A Naming seperation of different instances of BSW drivers shall be in placeSWS_EcuM_NA_00000 SRS_BSW_00348 All AUTOSAR standard types and constants shall be placed and organized in a standard type header fileSWS_EcuM_NA_00000 SRS_BSW_00350 All AUTOSAR Basic Software Modules shall allow the enabling disabling of detection and reporting of development errors.SWS_EcuM_04032 SRS_BSW_00353 All integer type definitions of target and compiler specific scope shall be placed and organized in a single type headerSWS_EcuM_NA_00000 SRS_BSW_00358 The return type of init() functions implemented by AUTOSAR Basic Software Modules shall be voidSWS_EcuM_02811 SRS_BSW_00359 All AUTOSAR Basic Software Modules callback functions shall avoid return types other than void if possibleSWS_EcuM_02826 SWS_EcuM_02829 SRS_BSW_00360 AUTOSAR Basic Software Modules callback functions are allowed to have parametersSWS_EcuM_02826 SWS_EcuM_02829 SRS_BSW_00361 All mappings of not standardized keywords of compiler specific scope shall be placed and organized in a compiler specific type and keyword headerSWS_EcuM_NA_00000 5 24 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 4 Requirement Description Satisfied by SRS_BSW_00373 The main processing function of each AUTOSAR Basic Software Module shall be named according the defined conventionSWS_EcuM_02837 SRS_BSW_00385 List possible error notifications SWS_EcuM_04032 SRS_BSW_00406 A static status variable denoting if a BSW module is initialized shall be initialized with value 0 before any APIs of the BSW module is calledSWS_EcuM_NA_00000 SRS_BSW_00407 Each BSW module shall provide a function to read out the version information of a dedicated module implementationSWS_EcuM_02813 SRS_BSW_00410 Compiler switches shall have defined valuesSWS_EcuM_NA_00000 SRS_BSW_00411 All AUTOSAR Basic Software Modules shall apply a naming rule for enablingdisabling the existence of the APISWS_EcuM_02813 SRS_BSW_00413 An index-based accessing of the instances of BSW modules shall be doneSWS_EcuM_NA_00000 SRS_BSW_00414 Init functions shall have a pointer to a configuration structure as single parameterSWS_EcuM_02811 SRS_BSW_00415 Interfaces which are provided exclusively for one module shall be separated into a dedicated header fileSWS_EcuM_NA_00000 SRS_BSW_00416 The sequence of modules to be initialized shall be configurableSWS_EcuM_02559 SRS_BSW_00417 Software which is not part of the SW-C shall report error events only after the DEM is fully operational.SWS_EcuM_NA_00000 SRS_BSW_00422 Pre-de-bouncing of error status information is done within the DEMSWS_EcuM_NA_00000 SRS_BSW_00425 The BSW module description template shall provide means to model the defined trigger conditions of schedulable objectsSWS_EcuM_02837 SRS_BSW_00426 BSW Modules shall ensure data consistency of data which is shared between BSW modulesSWS_EcuM_NA_00000 SRS_BSW_00427 ISR functions shall be defined and documented in the BSW module description templateSWS_EcuM_NA_00000 SRS_BSW_00432 Modules should have separate main processing functions for readreceive and writetransmit data pathSWS_EcuM_NA_00000 SRS_BSW_00437 Memory mapping shall provide the possibility to define RAM segments which are not to be initialized during startupSWS_EcuM_NA_00000 SRS_BSW_00439 Enable BSW modules to handle interruptsSWS_EcuM_NA_00000 5 25 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 4 Requirement Description Satisfied by SRS_BSW_00440 The callback function invocation by the BSW module shall follow the signature provided by RTE to invoke servers via Rte_Call APISWS_EcuM_02826 SWS_EcuM_02829 SRS_BSW_00449 BSW Service APIs used by Autosar Application Software shall return a Std_ReturnTypeSWS_EcuM_NA_00000 SRS_BSW_00450 A Main function of a un-initialized module shall return immediatelySWS_EcuM_NA_00000 SRS_BSW_00453 BSW Modules shall be harmonized SWS_EcuM_NA_00000 SRS_ModeMgm_- 09072ECU shutdown shall be forced SWS_EcuM_03022 SRS_ModeMgm_- 09098Storing the wake-up reasons shall be availableSWS_EcuM_02826 SRS_ModeMgm_- 09100Selection of wake-up sources shall be configurableSWS_EcuM_02389 SRS_ModeMgm_- 09104ECU State Manager shall take over control after OS shutdownSWS_EcuM_02952 SWS_EcuM_02953 SRS_ModeMgm_- 09113Initialization of Basic Software modules shall be doneSWS_EcuM_02932 SRS_ModeMgm_- 09114Startinginvoking the shutdown process shall be providedSWS_EcuM_00624 SWS_EcuM_02185 SWS_EcuM_02585 SWS_EcuM_02812 SWS_EcuM_02822 SRS_ModeMgm_- 09116Requesting and releasing the RUN state shall be providedSWS_EcuM_04115 SWS_EcuM_04116 SWS_EcuM_04117 SWS_EcuM_04118 SWS_EcuM_04119 SWS_EcuM_04120 SWS_EcuM_04121 SWS_EcuM_04123 SWS_EcuM_04125 SWS_EcuM_04126 SWS_EcuM_04127 SWS_EcuM_04128 SWS_EcuM_04129 SWS_EcuM_04130 SWS_EcuM_04132 SRS_ModeMgm_- 09126An API for querying the wake-up reason shall be providedSWS_EcuM_02827 SWS_EcuM_02828 SWS_EcuM_02830 SWS_EcuM_02831 SRS_ModeMgm_- 09127The ECU State Manager shall de-initialize Basic Software modules where appropriate during the shutdown processSWS_EcuM_03021 SRS_ModeMgm_- 09128Several shutdown targets shall be supportedSWS_EcuM_02822 SWS_EcuM_02824 SWS_EcuM_02825 SRS_ModeMgm_- 09136The ECU State Manager shall be the receiver of all wake-up eventsSWS_EcuM_04091 SRS_ModeMgm_- 09186Alarm Clock shall be active while the ECU is poweredSWS_EcuM_04054 SWS_EcuM_04055 SWS_EcuM_04056 SWS_EcuM_04057 SWS_EcuM_04058 SWS_EcuM_04059 SWS_EcuM_04060 SRS_ModeMgm_- 09187In Case of wakeup, all the alarm clock shall be canceledSWS_EcuM_04009 SRS_ModeMgm_- 09188In Case of startup, all the alarm clock shall be canceledSWS_EcuM_04010 SRS_ModeMgm_- 09190The alarm clock service shall allow setting an alarm relative to the current time using a time resolution of secondsSWS_EcuM_04054 5 26 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 4 Requirement Description Satisfied by SRS_ModeMgm_- 09194The alarm clock service shall allow setting the clockSWS_EcuM_04064 SRS_ModeMgm_- 09199The alarm clock service shall allow setting an alarm absolute by using an absolute time with a resolution of secondsSWS_EcuM_04057 SRS_ModeMgm_- 09234The EcuM shall handle the initialization of Basic Software modulesSWS_EcuM_02559",
          "Quality Management in the Automotive Industry Automotive SPICE Process Reference Model Process Assessment Model Version 3. 1 Title: Automotive SPICE Process Assessment Reference Model Author(s): VDA QMC Working Group 13 Automotive SIG Version: 3.1 Date: 2017-11-01 Status: PUBLISHED Confidentiality: Public Revision ID: 656 VDA Quality Management Center 2 Copyright n otice This document is a revision of the Automotive SPICE process assessment model 2.5 and the process reference model 4.5, which has been developed under the Automotive SPICE initiative by consensus of the car manufacturers within the Automotive Special Interest Group (SIG), a joint special interest group of Automotive OEM, the Procurement Forum and t he SPICE User Group. It has been revised by the Working Group 13 of the Quality Management Center (QMC) in the German Association of the Automotive Industry with the representation of members of the Automotive Specia l Interest Group, and with the agreement of the SPICE User Group. This agreement is based on a validation of the Automotive SPICE 3.0 version regarding any ISO copyright infringement and the st atements given from VDA QMC to t he S PICE User Group regarding t he current and future development of Automotive SPICE. This document reproduces relevant material from: ISOIEC 33020:2015 Information technology -- Process assessment -- Process measurement framework for assessment of process capability ISOIEC 33020 :2015 provides the following copyright release statement : Users of this International Standard may reproduce subclauses 5.2, 5.3, 5.4 and 5.6 as part of any process assessment model or maturity model so that it can be used for its intended purpose. ISOIEC 1 5504 -5:2006 Information Technology Process assessment Part 5: An exemplar Process Assessment Model ISOIEC 15504 -5:2006 provides the following copyright release statement : Users of this part of ISOIEC 15504 may freely reproduce the detailed descri ptions contained in the exemplar assessment model as part of any tool or other material to support the performance of process assessments, so that it can be used for its intended purpose. Relevant material from one of the mentioned standards is incorporated under the copyright release notice . Acknowledgemen t The VDA, the VDA QMC and the Working Group 13 explicitly acknowledge the high quality work carried out by the members of the Automoti ve Special Interest Group. We would like to thank all involved people, who have contributed to the development and publication of Automotive SPICE. VDA Quality Management Center 3 Derivative w orks You may not alter, transform, or build upon this work without the prior consent of both the SPICE User Group and the VDA Quality Management Center . Such consent may be given provided ISO copyright is not infringed. The detailed descriptions contained in this document may be incorporated as part of any tool or other material to support the perf ormance of process assessments, so that this process assessment model can be used for its intended purpose, provided that any such material is not offered for sale. All distribution of derivative works shall be made at no cost to the recipient. Distribution The Automotive SPICE process a ssessment model may only be obtained by download from the www.automotivespice.com web site. It is not permitted for the recipient to further distribute the document. Change r equests Any problems or change requests should be reported through the defined mechanism at the www.automotivespice.com web site. Trademark Automotive SPICE is a registered trademark of the Verband der Automobilindustrie e.V. (VDA) For further information about Automotive SPICE visit www.automotivespice.com . VDA Quality Management Center 4 Document history Version Date By Notes 2.0 2005 -05-04 AutoSIG SUG DRAFT RELEASE, pending final editorial review 2.1 2005 -06-24 AutoSIG SUG Editorial review comments implemented Updated to reflect changes in FDIS 15504 -5 2.2 2005 -08-21 AutoSIG SUG Final checks implemented: FORMAL RELEASE 2.3 2007 -05-05 AutoSIG SUG Revision following CCB: FORMAL RELEASE 2.4 2008 -08-01 AutoSIG SUG Revision following CCB: FORMAL RELEASE 2.5 2010 -05-10 AutoSIG SUG Revision following CCB: FORMAL RELEASE 3.0 2015 -07-16 VDA QMC WG13 Changes: See release notes 3.1 2017-11-01 VDA QMC WG13 Changes: See www.automotivespice.com Release n otes Version 3.0 of the process assessment model incorporates the following major changes : Chapter 1 Editorial adaption to ISOIEC 330xx series, Notes regarding combined PRMPAM in this document Chapter 2 Adaption to ISOIEC 330xx series Chapter 3 Text optimized for better understanding and adapted to ISOIEC 330xx series . Chapter 4 Renaming ENG to SYS SWE, Structure of old ENG Processes changed, Rework of AS 4.5 process reference model and AS 2.5 process performance indicators focusing on a set of highly significant processes assessed within the automotive industry ( VDA Scope). Chapter 5 Adaption based on AS 2.5 to the measurement f ramework of ISOIEC 33020 Annex A Conformity statement adapted to ISOIEC 33004 Annex B Modifications on work produ ct characteristics according to the changes in chapter 4. Annex C Update to recent standards. Introduction of specific terms used in AS 3.0 Annex D Added the major concepts used for AS 3.0 , incorporated Annex E of AS 2.5 Annex E Updated references to other standards Version 3.1 of the process assessment model incorporates minor changes. Please refer to www.automotivespice.com for a detailed change log. VDA Quality Management Center 5 Table of contents Copyright notice ................................ ................................ ................................ .............................. 2 Acknowledgement ................................ ................................ ................................ ........................... 2 Derivative works ................................ ................................ ................................ .............................. 3 Distribution ................................ ................................ ................................ ................................ ...... 3 Change requests ................................ ................................ ................................ ............................. 3 Trademark ................................ ................................ ................................ ................................ ...... 3 Document history ................................ ................................ ................................ ............................ 4 Release notes ................................ ................................ ................................ ................................ . 4 Table of contents ................................ ................................ ................................ ............................ 5 List of Figures ................................ ................................ ................................ ................................ . 7 List of Tables ................................ ................................ ................................ ................................ .. 7 1. Introduction ................................ ................................ ................................ .............................. 8 1.1. Scope ................................ ................................ ................................ .............................. 8 1.2. Terminology ................................ ................................ ................................ ..................... 9 1.3. Abbrevi ations ................................ ................................ ................................ ................... 9 2. Statement of compliance ................................ ................................ ................................ .......... 9 3. Process capability determination ................................ ................................ ............................",
          "a process execution: - key elements to be represented in the work product VDA Quality Management Center 119 Annex C Terminology Annex C lists the applicable terminology references from ISOIECIEEE 24765 and ISOIECIEEE 29119. It also provide s terms which are specifically defined within Automotive SPICE. Some of these definitions are based on ISOIECIEEE 24765. Table C.1 Terminology Term Origin Description Acceptance testing ISOIECIEEE 24765 Formal testing conducted to enable a user, customer, or authorized entity to determine whether to accept a system or component. Application parameter Automotive SPICE V3.1 An application parameter is a parameter containing data applied to the system or software functions, behavior or properties. T he notion of application parameter is expressed in two ways: firstly, the logical specification (including name, description, unit, value domain or threshold values or characteristic curves, respectively), and, secondly, the actual quantitative data value it receives by means of data application. Architecture element Automotive SPICE V3.1 Result of the decomposition of the architecture on system and software level: The system is decomposed into elements of the system architecture across appropriate hierarchical levels. The software is decomposed into elements of the software architecture across appropriate hierarchical levels down to the software components (the lowest level elements of the software architecture). Baseline ISOIECIEEE 24765 A speci fication or product that has been formally reviewed and agreed upon, that thereafter serves as the basis for further development, and can be changed only through formal change control procedures. Black -box testing Automotive SPICE V3.1 Method of requireme nt testing where tests are developed without knowledge of the internal structure and mechanisms of the tested item. Code review Automotive SPICE V3.1 A check of the code by one or more qualified persons to determine its suitability for its intended use an d identify discrepancies from specifications and standards. Coding ISOIECIEEE 24765 The transforming of logic and data from design specifications (design descriptions) into programming language. Consistency Automotive SPICE V3.1 Consistency addresses content and semantics and ensures that work products are not in contradiction to each other. Consistency is supported by bidirectional traceability. Defect FAULT Dynamic analysis ISOIECIEEE 24765 A process of evaluating a system or component based on its behavior during execution. Element Automotive SPICE V3.1 Elements are all structural objects on architectural and design level on the left side of the V. Such elements can be further decomposed into more fine -grained sub -elements of the architecture or design across appropriate hierarchical levels. Error ISOIECIEEE 24765 The difference between a computed, observed, or measured value or condition and the true, specified, or theoretically correct value or condition. VDA Quality Management Center 120 Fault ISOIECIEEE 24765 A manifestation of an error in software. Functional requirement ISOIECIEEE 24765 A statement that identifies what a product or process must accomplish to produce required behavior andor results. Functional specification ISOIECIEEE 24765 A document that specifies the functions that a system or component must perform. Often part of a requirements specification. Functional testing ISOIECIEEE 24765 Testing conducted to evaluate the compliance of a system or component with specified functional requirements. Hardware ISOIECIEEE 24765 Physical equipment used to process, store, or transmit computer programs or data. Hardware item Automotive SPICE V3.1 A physical representation of a hardware element. Integration Automotive SPICE V3.1 A process of combining items to larger items up to an overall system. Integrated software item Automotive SPICE V3.1 A set of software units or items that are integrated into a larger assembly for the purpose of integration testing. Integration testing Automotive SPICE V3.1 Testing in which items (software items, hardware items, or system items) are combined and tested to evaluate the interaction among them. Integrated system item Automotive SPICE V3.1 A set of items that are integrated into a larger assembly for the purpose of integration testing. Quality assurance ISOIECIEEE 24765 A planned and systematic pattern of all actions necessary to provide adequate confidence that an item or product conforms to established technical requirements. Regress ion testing Automotive SPICE V3.1 Selective retesting of a system or item to verify that modifications have not caused unintended effects and that the system or item still complies with its specified requirements. Requirement Automotive SPICE V3.1 A prope rty or capability that must be achieved or possessed by a system, system item, product, or service to satisfy a contract, standard, specification or other formally imposed documents. Requirements specification Automotive SPICE V3.1 A document that specifies the requirements for a system or item. Typically included are functional requirements, performance requirements, interface requirements, design requirements, and development standards. Software ISOIECIEEE 24765 Computer programs, procedures, and possibly associated documentation and data pertaining to the operation of a computer system. Software component Automotive SPICE V3.1 In Automotive SPICE V3.1 the term software component is used for the lowest level elements of the software architec ture for which finally the detailed design is defined. A software component consists of one or more software units. ARCHITECTURE ELEMENT , UNIT Software element ARCHITECTURE ELEMENT Software item ISOIECIEEE 24765 Identifiable part of a software product. Software unit UNIT VDA Quality Management Center 121 Static analysis Automotive SPICE V3.1 A process of evaluating an item based on its form, structure, content, or documentation. System Automotive SPICE V3.1 A collection of interacting items organized to accompli sh a specific function or set of functions within a specific environment. System item Automotive SPICE V3.1 Identifiable part of the system. System test ISOIECIEEE 24765 Testing conducted on a complete, integrated system to evaluate the systems compliance with its specified requirements. Testing Automotive SPICE V3.1 Activity in which an item (system, hardware, or software) is exe cuted under specific conditions; and the results are recorded , summarized and communicated . Traceability ISOIECIEE E 24765 The degree to which a relationship can be established between two or more products of the development process, especially products having a predecessor -successor or master -subordinate relationship to one another. Unit Automotive SPICE V3.1 Part of a software component which is not further subdivided. SOFTWARE COMPONENT Unit test Automotive SPICE",
          "BSW_00348, SRS_BSW_00353, SRS_BSW_00361, SRS_BSW_00439, SRS_- BSW_00449, SRS_BSW_00308, SRS_BSW_00309, SRS_BSW_00330, SRS_- BSW_00010, SRS_BSW_00341, SRS_BSW_00334) 210 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager",
          "................................ ......................... 87 5.6. Process capability Level 5: Innovating process ................................ .............................. 88 5.6.1. PA 5.1 Process innovation process attribute ................................ .......................... 88 5.6.2. PA 5.2 Process innovation implementation proc ess attribute ................................ . 89 Annex A Conformity of the process assessment and reference model ................................ ..... 91 A.1 Introduction ................................ ................................ ................................ .................... 91 A.2 Conformance to the requirements for process reference models ................................ ... 91 A.3 Conformance to the requirements for process assessment models ............................... 92 Annex B Work product characteristics ................................ ................................ ...................... 94 Annex C Terminology ................................ ................................ ................................ ............. 119 VDA Quality Management Center 7 Annex D Key concepts ................................ ................................ ................................ ........... 122 D.1 The Plug -in concept ................................ ................................ ................................ .. 122 D.2 The Tip of the V ................................ ................................ ................................ ........ 123 D.3 Terms Element, Component, Unit, and Item ................................ ...................... 123 D.4 Traceability and consistency ................................ ................................ ........................ 124 D.5 Agree and Summarize and Communicate ................................ .............................. 125 D.6 Evaluate, Verification Criteria and Ensuring compliance ................................ ...... 125 D.7 The relation between Strategy and Plan ................................ ................................ . 126 Annex E Reference standards ................................ ................................ ............................... 128 List of Figures Figure 1 Process assessment model relationship ................................ ................................ ..... 11 Figure 2 Automotive SPICE process reference model - Overview ................................ ............ 12 Figure 3 Relationship between assessment indicators and process capability .......................... 22 Figure 4 Possible levels of abstraction for the term process ................................ ................... 23 Figure 5 Performing a process assessment for determining process capability ........................ 23 Figure D.1 The Plug -in concept ................................ ................................ ............................ 122 Figure D.2 The tip of the V ................................ ................................ ................................ ... 123 Figure D.3 Element, component, unit, and item ................................ ................................ ...... 123 Figure D.4 Bidirectional traceability and consistency ................................ .............................. 124 Figure D.5 Agree, summarize and communicate ................................ ................................ .... 125 Figure D.6 Evaluation, verification criteria and c ompliance ................................ ..................... 126 Figure D.7 Strategy and plan ................................ ................................ ................................ ... 127 List of Tables Table 1 Abbreviation List ................................ ................................ ................................ ............ 9 Table 2 Primary life cycle processes ACQ process group ................................ ...................... 13 Table 3 Primary life cycle processes SPL process group ................................ ....................... 13 Table 4 Primary life cycle process es SYS process group ................................ ...................... 13 Table 5 Primary life cycle processes SWE process group ................................ ..................... 14 Table 6 Supporting life cycle processes - SUP process group ................................ .................. 14 Table 7 Organizational life cycle processes - MAN process group ................................ ............ 14 Table 8 Organizational life cycle processes - PIM process group ................................ ............. 15 Table 9 Organizational life cycle processes - REU process group ................................ ............ 15 Table 10 Process cap ability levels according to ISOIEC 33020 ................................ ............... 16 Table 11 Process attributes according to ISOIEC 33020 ................................ ......................... 16 Table 12 Rating scale according to ISOIEC 33020 ................................ ................................ .. 17 Table 13 Rating scale percentage values according to ISOIEC 33020 ................................ .... 17 Table 14 Refinement of rating scale according to ISOIEC 33020 ................................ ............ 17 Table 15 Refined rat ing scale percentage values according to ISOIEC 33020 ........................ 18 Table 16 Process capability level model according to ISOIEC 33020 ................................ ...... 20 Table 17 Template for the process description ................................ ................................ ......... 24 Table B.1 Structure of WPC tables ................................ ................................ ........................... 94 Table B.2 Work product characteristi cs ................................ ................................ .................... 94 Table C.1 Terminology ................................ ................................ ................................ ........... 119 Table E.1 Reference standards ................................ ................................ .............................. 128 VDA Quality Management Center 8 1. Introduction 1.1. Scope Process assessment is a disciplined evaluation of an organizational units processes against a process assessment model . The Automotive SPICE process assessment model (PAM) is intended for use when performing conformant assessments of the process capability on the development of embedded automotive systems. It was developed in accordance with the requirements of ISOIEC 33004. Automotive SPICE has its own process refere nce model (PRM) , which was developed based on the Automotive SPICE process reference model 4.5 . It was further developed and tailored considering the specific needs of the automotive industry. If processes beyond the scope of Automotive SPICE are needed, a ppropriate processes from other process reference models such as ISOIEC 12207 or ISOIEC 15288 may be added based on the business needs of the organization . The PRM is incorporated in this document and is used in conjunction with the Automotive SPICE process assessment model when performing an assessment. This Automotive SPICE process assessment model contains a set of indicators to be considered when interpreting the intent of the Automotive SPICE process reference m odel. These indicators may also be used when implementing a process improvement program subsequent to an assessment. VDA Quality Management Center 9 1.2. Terminology Automotive SPICE follows the following preceden ce for use of terminology: a) ISOIEC 33001 for assessment related terminology b) ISOIECIEEE 24765 and ISOIECIEEE 29119 terminology (as contained in Annex C) c) Terms introduced by Automotive SPICE (as contained in Annex C) 1.3. Abbreviations AS Automotive SPICE BP Base Practice CAN Controller Area Network CASE Computer -Aided Software Engineering, CCB Change Control Board CFP Call For Proposals CPU Central Processing Unit ECU Electronic Control Unit EEPROM Electrically Erasable Programmable Read-Only Memory GP Generic Practice GR Generic Resource IEC International Electrotechnical Commission IEEE Institute of Electrical and Electronics Engineers IO Input Output ISO International Organization for Standardization ITT Invitation To Tender LIN Local Interconnect Network MISRA Motor Industry Software Reliability Association MOST Media Oriented Systems Transport PA Process Attribute PAM Process Assessment Model PRM Process Reference Model PWM Pulse Width Modulation RAM Random Access Memory ROM Read Only Memory SPICE Software Process Improvement and Capability d Etermination SUG Spice User Group USB Universal Serial Bus WP Work Product WPC Work Product Characteristic Table 1 Abbreviation List 2. Statement of compliance The Automotive SPICE process assessment model and process reference model is conformant with the IS OIEC 33004 , and can be used as the basis for conducting an assessment of process capability. VDA Quality Management Center 10 ISOIEC 33020 is used as an",
          "and ISOIECIEEE 29119 terminology (as contained in Annex C) c) Terms introduced by Automotive SPICE (as contained in Annex C) 1.3. Abbreviations AS Automotive SPICE BP Base Practice CAN Controller Area Network CASE Computer -Aided Software Engineering, CCB Change Control Board CFP Call For Proposals CPU Central Processing Unit ECU Electronic Control Unit EEPROM Electrically Erasable Programmable Read-Only Memory GP Generic Practice GR Generic Resource IEC International Electrotechnical Commission IEEE Institute of Electrical and Electronics Engineers IO Input Output ISO International Organization for Standardization ITT Invitation To Tender LIN Local Interconnect Network MISRA Motor Industry Software Reliability Association MOST Media Oriented Systems Transport PA Process Attribute PAM Process Assessment Model PRM Process Reference Model PWM Pulse Width Modulation RAM Random Access Memory ROM Read Only Memory SPICE Software Process Improvement and Capability d Etermination SUG Spice User Group USB Universal Serial Bus WP Work Product WPC Work Product Characteristic Table 1 Abbreviation List 2. Statement of compliance The Automotive SPICE process assessment model and process reference model is conformant with the IS OIEC 33004 , and can be used as the basis for conducting an assessment of process capability. VDA Quality Management Center 10 ISOIEC 33020 is used as an ISOIEC 33003 compliant Measurement Framework. A statement of compliance of the process assessment model and process reference model with the requirements of ISOIEC 33004 is provided in Annex A. VDA Quality Management Center 11 3. Process capability determination The concept of process capability determination by using a process assessment model is based on a two -dimensional framework. The first dimension is provided by processes defined in a process reference model (process dimension). The second dimension consists of capability levels that are further subdivided into process attributes (capability dimension). The pr ocess attributes provide the measurable characteristics of process capability. The process assessment model selects processes from a process reference model and supplements with indicators. These indicators support the collection of objective evidence whic h enable an assessor to assign ratings for processes according to the capability dimension. The relationship is shown in Figure 1: Process1Measurement framework (ISOIEC 33020) Capability levels Process attributes Rating Scale Rating method Aggregation method Process capability level model Process2 Process3 Process4 ...Process assessment model (Automotive SPICE) Process capability indicators Process performance indicators Process reference model (Automotive SPICE) Domain and scopes Process purposes Process outcomes Figure 1 Process assessment model relationship VDA Quality Management Center 12 3.1. Process reference m odel Processes are grouped by process category and at a second level into process groups according to the type of activity they address. There are 3 p rocess categories: Primary life cycle processes , Organizational life cycle processes and Supporting life cycle processes . Each process is described in terms of a purpose statement. The purpose statement contains the unique functional objectives of the process when performed in a particular environment. For each purpose statement a list of speci fic outcomes is associated, as a list of expected positive results of the process performance. For the process dimension, the Automotive SPICE process reference model provides the set of processes shown in Figure 2. Management Process Group (MAN) Supporting Process Group (SUP)Acquisition Process Group (ACQ) Supply Process Group (SPL)ACQ.4 Supplier Monitoring ACQ.11 Technical Requirements ACQ.12 Legal and Administrative Requirements ACQ.13 Project Requirements ACQ.14 Request for Proposals ACQ.15 Supplier Qualification SPL.1 Supplier Tendering SPL.2 Product ReleaseSUP.1 Quality AssuranceSUP.2 VerificationSUP.4 Joint ReviewSUP.7 Documentation SUP.8 Configuration ManagementSUP.9 Problem Resolution ManagementSUP.10 Change Request ManagementMAN.3 Project Management MAN.5 Risk Management MAN.6 MeasurementACQ.3 Contract Agreement Process Improvement Process Group (PIM) PIM.3 Process ImprovementReuse Process Group (REU) REU.2 Reuse Program ManagementSystem Engineering Process Group (SYS) SYS.1 Requirements Elicitation SYS.2 System Requirements Analysis SYS.3 System Architectural DesignSYS.4 System Integration and Integration TestSYS.5 System Qualification Test Software Engineering Process Group (SWE) SWE.1 Software Requirements Analysis SWE.2 Software Architectural Design SWE.3 Software Detailed Design and Unit ConstructionSWE.4 Software Unit VerificationSWE.5 Software Integration and Integration TestSWE.6 Software Qualification Test Primary Life Cycle Processes Supporting Life Cycle Processes Organizational Life Cycle Processes Figure 2 Automotive SPICE process reference model - Overview VDA Quality Management Center 13 3.1.1. Primary life cycle processes category The p rimary life cycle processes category consists of processes that may be used by the customer when acquiring products from a supplier, and by the supplier when responding and delivering products to the customer including the engineering processes needed for specification, design, deve lopment, integration and testing. The primary life cycle processes category consists of the following groups: the Acquisition p rocess group; the Supply process group; the System engineering process group; the Sof tware engineering process group. The Acqui sition process group (ACQ) consists of processes that are performed by the customer, or by the supplier when acting as a customer for its own suppliers, in order to acquire a product andor service. ACQ.3 Contract Agreement ACQ.4 Supplier Monitoring ACQ.11 Technical Requirements ACQ.12 Legal and Administrative Requirements ACQ.13 Project Requirements ACQ.14 Request for Proposals ACQ.15 Supplier Qualification Table 2 Primary life cycle processes ACQ process group The Supply process group (SPL) consists of processes performed by the supplier in order to supply a product andor a service. SPL.1 Supplier Tendering SPL.2 Product Release Table 3 Primary life cycle processes SPL process group The System Engineering process group (SYS) consists of processes addressing the elicitation and management of customer and internal requirements, the definition of the system architecture and the integration and testing on the system level. SYS.1 Requirement s Elicitation SYS.2 System Requirements Analysis SYS.3 System Architectural Design SYS.4 System Integration and Integration Test SYS.5 System Qualification Test Table 4 Primary life cycle processes SYS process group The Software Engineering process group (SWE) consists of processes addressing the management of software requirements derived from the system requirements, the development of the VDA Quality Management Center 14 corresponding software architecture and design as well as the implementation, integration and testing of the software. SWE.1 Software Requirements Analysis SWE.2 Software Architectural Design SWE.3 Software Detailed Design and Unit Construction SWE.4 Software Unit Verification SWE.5 Software Integration and Integration",
          "BSW_00348, SRS_BSW_00353, SRS_BSW_00361, SRS_BSW_00439, SRS_- BSW_00449, SRS_BSW_00308, SRS_BSW_00309, SRS_BSW_00330, SRS_- BSW_00010, SRS_BSW_00341, SRS_BSW_00334) 210 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager",
          "intermediate step to providing a process attribute rating. When performing rating, the rating method employed shall be specified relevant to the class of assessment. The following rati ng methods are defined. The use of rating method may vary according to the class, scope and context of an assessment. The lead assessor shall decide which (if any) rating method to use. The selected rating method(s) shall be specified in the assessment inp ut and referenced in the assessment report. ISOIEC 33020 provides the following 3 rating methods: Rating method R1 The approach to process attribute rating shall satisfy the following conditions: a) Each process outcome of each process within the scope of the assessment shall be characterized for each process instance, based on validated data; b) Each process attribute outcome of each process attribute for each process within the scope of the assessment shall be characterised for each process instance, b ased on validated data; c) Process outcome characterisations for all assessed process instances shall be aggregated to provide a process performance attribute achievement rating; d) Process attribute outcome characterisations for all assessed process insta nces shall be aggregated to provide a process attribute achievement rating. Rating method R2 The approach to process attribute rating shall satisfy the following conditions: a) Each process attribute for each process within the scope of the assessment shal l be characterized for each process instance, based on validated data; b) Process attribute characterisations for all assessed process instances shall be aggregated to provide a process attribute achievement rating. Rating method R3 Process attribute ratin g across assessed process instances shall be made without aggregation. VDA Quality Management Center 19 In principle the three rating methods defined in ISOIEC 33020 depend on a) whether the rating is made only on process attribute level (Rating method 3 and 2) or with more level of d etail both on process attribute and process attribute outcome level (Rating method 1); and b) the type of aggregation ratings across the assessed process instances for each process If a rating is performed for both process attributes and process attribute o utcomes (Rating method 1), the result will be a process performance attribute outcome rating on level 1 and a process attribute achievement rating on higher levels. Depending on the class, scope and context of the assessment an aggregation within one proce ss (one-dimensional, vertical aggregation), across multiple process instances (one -dimensional, horizontal aggregation) or both (two -dimensional, matrix aggregation) is performed. ISOIEC 33020 provides the following examples: When performing an assessment , ratings may be summarised across one or two dimensions. For example, when rating a process attribute for a given process, one may aggregate ratings of the associated process (attribute) outcomes such an aggregation will be performed as a vertical aggre gation (one dimension). process (attribute) outcome for a given process attribute across multiple process instances, one may aggregate the ratings of the associated process instances for the given process (attribute) outcome such an aggregation will be per formed as a horizontal aggregation (one dimension) process attribute for a given process, one may aggregate the ratings of all the process (attribute) outcomes for all the processes instances such an aggregation will be performed as a matrix aggregation across the full scope of ratings (two dimensions) The standard defines different methods for aggregation. Further information can be taken from ISOIEC 33020. VDA Quality Management Center 20 3.2.3. Process capability level model The process capability level achieved by a process shall be der ived from the process attribute ratings for that process according to the process capability level model defined in Table 1 6. The process capability level model defines the rules how the achievement of each level depends on the rating of the process attrib utes for the assessed and all lower levels. As a general rule the achievement of a given level requires a largely achievement of the corresponding process attributes and a full achievement of any lower lying process attribute. Scale Process attribute Rating Level 1 PA 1.1: Process Performance Largely Level 2 PA 1.1: Process Performance PA 2.1: Performance Management PA 2.2: Work Product Management Fully Largely Largely Level 3 PA 1.1: Process Performance PA 2.1: Performance Management PA 2.2: Work Product Management PA 3.1: Process Definition PA 3.2: Process Deployment Fully Fully Fully Largely Largely Level 4 PA 1.1: Process Performance PA 2.1: Performance Management PA 2.2: Work Product Management PA 3.1: Process Definition PA 3.2: Process Deployment PA 4.1: Quantitative Analysis PA 4.2: Quantitative Control Fully Fully Fully Fully Fully Largely Largely Level 5 PA 1.1: Process Performance PA 2.1: Performance Management PA 2.2: Work Product Management PA 3.1: Process Definition PA 3.2: Process Deployment PA 4.1: Quantitative Analysis PA 4.2: Quantitative Control PA 5.1: Process Innovation PA 5.2: Process Innovation Implementation Fully Fully Fully Fully Fully Fully Fully Largely Largely Table 16 Process capability level model according to ISOIEC 33020 VDA Quality Management Center 21 3.3. Process assessment m odel The process assessment model offers indicators in order to identify whether the process outcomes and the p rocess attribute outcomes (achievements ) are present or absent in the instantiated processes of projects and organizational units. These indicators provide guidance for assessors in accumulating the necessary objective evidence to support judgments of capability. They are not intended to be rega rded as a mandatory set of checklists to be followed. In order to judge the presence or absence of process outcomes and process achievements an assessment obtains objective evidence. All such evidence comes from the examination of work products and reposit ory content of the assessed processes, and from testimony provided by the performers and managers of the assessed processes. This evidence is mapped to the PAM indicators to allow establishing the correspondence to the relevant process outcomes and process attribute achievements . There are two types of indicators: Process performance i ndicators , which apply exclusively to capability Level 1. They provide an indication of the extent of fulfillment of the process outcomes Process capability",
          "4 15-06 Project status report OUTCOME 4, 6 VDA Quality Management Center 71 4.6.2. MAN.5 Risk Management Process ID MAN.5 Process name Risk Management Process purpose The purpose of the Risk Management Process is to identify, analyze, treat and monitor the risks continuously. Process outcomes As a result of successful implementation of this process: 1) the scope of the risk management to be performed is determined; 2) appropriate risk management strategies are defined and implemented; 3) risks are identified as they develop during the conduct of the project; 4) risks are analyzed and the priority in which to apply resources to treatment of these risks is determined; 5) risk measures are defined, applied, and assessed to determine changes in the status of risk and the progress of the treatment activities; and 6) appropriate treatment is taken to correct or avoid the impact of risk based on its priority, probability, and consequence or other defined risk threshold. Base practices MAN.5.BP1: Establish risk management scope. Determine the scope of risk management to be performed for the project, in accordance with organizational risk management policies. OUTCOME 1 NOTE 1: Risks may include technical, economic and timing risks. MAN.5.BP2: Define risk management strateg ies. Define appropriate strategies to identify risks, mitigate risks and set acceptability levels for each risk or set of risks, both at the project and organizational level. OUTCOME 2 MAN.5.BP3: Identify risks. Identify risks to the project both initial ly within the project strategy and as they develop during the conduct of the project, continuously looking for risk factors at any occurrence of technical or managerial decisions. OUTCOME 2, 3 NOTE 2: Examples of risk areas that are typically analyzed fo r potentia l risk reasons or risks factors include: cost, schedule, effort, resource, and technical. NOTE 3: Examples of risk factors may include: unsolved and solved trade -offs, decisions of not implementing a project feature, design changes, lack of expec ted resource s. MAN.5.BP4: Analyze risks. Analyze risks to determine the priority in which to apply resources to mitigate these risks. OUTCOME 4 NOTE 4: Risks are normally analyzed to determine their probability, consequence and severity. NOTE 5: Different techniques may be used to analyze a system in order to understand if risks exist, for example, functional analysis, simulation, FMEA, FTA etc. MAN.5. BP5: Define risk treatment actions. For each risk (or set of risks) define, perform and track the selected actions to keepreduce the risks to acceptable level. OUTCOME 5, 6 VDA Quality Management Center 72 MAN5.BP6: Monitor risks. For each risk (or set of risks) define measures (e.g. metrics) to determine changes in the status of a risk and to evaluate the progress of the of mitig ation activities. Apply and assess these risk measures. OUTCOME 5, 6 NOTE 6: Major risks may need to be communicated to and monitored by higher levels of management. MAN.5.BP7: Take corrective action. When expected progress in risk mitigation is not achi eved, take appropriate corrective action to reduce or avoid the impact of risk. OUTCOME 6 NOTE 7: Corrective actions may involve developing and implementing new mitigation strategies or adjusting the existing strategies. Output work products 07-07 Risk measure OUTCOME 5 08-14 Recovery plan OUTCOME 4, 6 08-19 Risk management plan OUTCOME ALL 08-20 Risk mitigation plan OUTCOME 3, 4, 5, 6 13-20 Risk action request OUTCOME 1, 2, 6 14-02 Corrective action register OUTCOME 6 14-08 Tracking system OUTCOME 5, 6 15-08 Risk analysis report OUTCOME 4 15-09 Risk status report OUTCOME 4, 5 4.6.3. MAN.6 Measurement Process ID MAN.6 Process name Measurement Process purpose The purpose of the Measurement Process is to collect and analyze data relating to the products developed and processes implemented within the organization and its projects, to support effective management of the processes and to objectively demonstrate the quality of the products. Process outcomes As a result of successful implementation of this process: 1) organizational commitment is established and sustained to implement the measurement process; 2) the measurement information needs of organizational and management processes are identified; 3) an appropria te set of measures, driven by the information needs are identified andor developed; 4) measurement activities are identified and performed; 5) the required data is collected, stored, analyzed, and the results interpreted; 6) information products are used to support decisions and provide an objective basis for communication; and 7) the measurement process and measures are evaluated and communicated to the process owner. VDA Quality Management Center 73 Base practices MAN.6.BP1: Establish organizational commitment for measurement. A commitment of management and staff to measurement is established and communicated to the organizational unit. OUTCOME 1 MAN.6.BP2: Develop measurement strategy. Define an appropriate measurement strategy to identify, perform and evaluate measurement activities and results, based on organizational and project needs. OUTCOME 1 MAN.6.BP3: Identify measurement information needs. Identify the measurement information needs of organizational and management processes. OUTCOME 2 MAN.6.BP4: Specify measures. Identify and develop an appropriate set of measures based on measurement information needs. OUTCOME 3 MAN.6.BP5: Perform measurement activities. Identify and perform measurements activities. OUTCOME 4 MAN.6.BP6: Retrieve me asurement data. Collect and store data of both base and derived measures, including any context information necessary to verify, understand, or evaluate the data. OUTCOME 5 MAN.6.BP7: Analyze measures. Analyze and interpret measurement data and develop i nformation products. OUTCOME 5 MAN.6.BP8: Use measurement information for decision -making. Make accurate and current measurement information accessible for any decision -making processes for which it is relevant. OUTCOME 6 MAN.6.BP9: Communicate measure s. Disseminate measurement information to all affected parties who will be using them and collect feedback to evaluate appropriateness for intended use. OUTCOME 5, 6 MAN.6.BP10: Evaluate information products and measurement activities. Evaluate informati on products and measurement activities against the identified information needs and measurement strategy. Identify potential improvements. OUTCOME 7 NOTE 1: Information products are produced as a result analysis of data in order to summarize and communic ate information. MAN.6.BP11: Communicate potential improvements. Communicate to the affected people the identified potential improvements concerning the",
          "process assessment model consists of six capability levels matching the capability levels defined in ISOIEC 33020 . The process capability indicators for the 9 process attributes included in the capa bility dimension for process capability level 1 to 5 are described. Each of the process attributes in this process assessment model is identical to the process attribute defined in the process measurement framework. The generic practices address the chara cteristics from each process attribute. The generic resources relate to the process attribute as a whole. Process capability level 0 does not include any type of indicators, as it reflects a non -implemented process or a process which fails to partially achieve any of its outcomes. NOTE: ISOIEC 33020 process attribute definitions and attribute outcomes are duplicated from ISOIEC 33020 in italic font and marked with a left side bar . 5.1. Process capability Level 0: Incomplete process The process is not implem ented, or fails to achieve its process purpose. At this level there is little or no evidence of any systematic achievement of the process purpose. 5.2. Process capability Level 1: Performed process The implemented process achieves its process purpose. The follo wing process attribute demonstrates the achievement of this level 5.2.1. PA 1.1 Process performance process attribute The process performance process attribute is a measure of the extent to which the process purpose is achieved. As a result of full achievement of this attribute: a) the process achieves its defined outcomes Generic practices GP 1.1.1 Achieve the process outcomes ACHIEVEMENT a Achieve the intent of the base practices. Produce work products that evidence the process outcomes. Generic resources Resources are used to achieve the intent of process specific base practices ACHIEVEMENT a 5.3. Process capability Level 2: Managed process The previously described Performed process is now implemented in a managed fashion (planned, monitored and adjusted) and its work products are appropriately established, controlled and maintained. The following process attributes, together with the previously defined process attribute, demonstrate the achievement of this level: VDA Quality Management Center 79 5.3.1. PA 2.1 Performance management process attri bute The performance management process attribute is a measure of the extent to which the performance of the process is managed. As a result of full achievement of this process attribute: a) Objectives for the performance of the process are identified; b) Perfor mance of the process is planned; c) Performance of the process is monitored; d) Performance of the process is adjusted to meet plans; e) Responsibilities and authorities for performing the process are defined, assigned and communicated; f) Personnel performing the pro cess are prepared for executing their responsibilities; g) Resources and information necessary for performing the process are identified, made available, allocated and used; h) Interfaces between the involved parties are managed to ensure both effective communic ation and clear assignment of responsibility. Generic practices GP 2.1.1 Identify the objectives for the performance of the process. ACHIEVEMENT a Performance objectives are identified based on process requirements. The scope of the process performance is defined. Assumptions and constraints are considered when identifying the performance objectives. NOTE 1: Perf ormance objectives may include (1) timely production of artifact s meeting the defined quality criteria, (2) process cycle time or frequency (3) resource usage ; and (4) boundaries of the process. NOTE 2: At minimum, pro cess performance objectives for resources, effort and schedule should be stated. GP 2.1.2 Plan the performance of the process to fulfill the identified objectives . ACHIEVEMENT b Plan(s) for the performance of the process are developed. The process performance cycle is defined. Key milestones for the performance of the process are established. Estimates for process performance attributes are determined and maintained. Process activities and tasks are defined. Schedule is defined and aligned with the approach to performing the process. Process work product reviews are planned. GP 2.1.3 Monitor the performance of the process against the plans. ACHIEVEMENT c VDA Quality Management Center 80 The process is performed according to the plan(s). Process performance is monitored to ensure planned results are achieved and to identify possible deviations GP 2.1. 4 Adjust the performance of the process. ACHIEVEMENT d Process performance issues are identi fied. Appropriate actions are taken when planned results and objectives are not achieved. The plan(s) are adjusted, as necessary. Rescheduling is performed as necessary. GP 2.1. 5 Define responsibilities and authorities for performing the process. ACHIEVEMENT e Responsibilities, commitments and authorities to perform the process are defined, assigned and communicated. Responsibilities and authorities to verify process work products are defined and assigned. The needs for process performance experien ce, knowledge and skills are defined. GP 2.1. 6 Identify, prepare, and make available resources to perform the process according to plan. ACHIEVEMENT f, g The human and infrastructure resources, necessary for performing the process are identified made ava ilable, allocated and used. The individuals performing and managing the process are prepared by training, mentoring, or coaching to execute their responsibilities. The information necessary to perform the process is identified and made available. GP 2.1. 7 Manage the interfaces between involved parties. ACHIEVEMENT h The individuals and groups involved in the process performance are determined. Responsibilities of the involved parties are assigned. Interfaces between the involved parties are managed. Communication is assured between the involved parties. Communication between the involved parties is effective. Generic resources Human resources with identified objectives, responsibilities and authorities ACHIEVEMENT e, f, h Facilities and infrastructure resources ACHIEVEMENT g, h Project planning, management and control tools, including time and cost reporting ACHIEVEMENT a, b, c, d Workflow management system ACHIEVEMENT d, f, g , h VDA Quality Management Center 81 Email andor other communication mecha nisms ACHIEVEMENT b, c, d, f, g , h Information andor experience repository ACHIEVEMENT b, d, e Problem and issues management mechanisms ACHIEVEMENT c 5.3.2. PA 2.2 Work product management process attribute The work product management process attribute is a measure of the extent to which the work products produced by the process are appropriately managed. As a result",
          "with the projects master plan that must occur for the treatment to be properly implemented Environmentinfrastructure: VDA Quality Management Center 103 WP ID WP Name WP Characteristics - describes any environmental or infrastructure requirements or impacts (e.g., safety or secur ity impacts that the treatment may have) Risk treatment plan change procedures and history 08-26 Documentation plan Identifies documents to be produced Defines the documentation activities during the life cycle of the software product or service Identifies any applicable standards and templates Defines requirements for documents Review and authorization practices Distribution of the documents Maintenance and disposal of the documents 08-27 Problem management plan Defines problem resolution activ ities including identification, recording, description and classification Problem resolution approach: evaluation and correction of the problem Defines problem tracking Mechanism to collect and distribute problem resolutions 08-28 Change management plan Defines change management activities including identification, recording, description, analysis and implementation Defines approach to track status of change requests Defines verification and validation activities Change approval and implication review 08-29 Improvement plan Improvement objectives derived from organizational business goals Organizational scope Process scope, the processes to be improved Key roles and responsibilities Appropriate milestones, review points and reporting mechanisms Activities to be performed to keep all those affected by the improvement program informed of progress 08-50 Test specification Test Design Specification Test Case Specification Test Procedure Specification Identification of test cases for regression testing Additi onally , for system integration: - identification of required system elements (hardware elements, wiring elements, settings for parameter s (such as application parameters or global variables ) , data bases, etc.) - necessary sequence or ordering identified for integrating the system elements 08-51 Technology monitoring plan No requirements additional to Plan (Generic) 08-52 Test plan Test Plan according to ISO29119 -3 Context : - projectTest sub -process - test item(s) - test scope - assumptions and constraints - stakeholder - testing communication Test strategy - identifies what needs there are to be satisfied VDA Quality Management Center 104 WP ID WP Name WP Characteristics - establishes the options and approach for satisfying the needs (black -box andor white -box-testing, boundary class test determination, regression testing strategy , etc.) - establishes the evaluation criteria against which the strategic options are evaluated - identifies any constraintsrisks and how these will be addressed - test design techniques - test completion criteria - test ending criteria - test start, abort and re -start criteria - metrics to be collected - test data requirements - retesting and regression testing - suspension and resumption criteria - deviations from the Organizational Test Strategy Test data requirements Test environment requirements Test sub -processes Test de liverables Testing activities and estimates 09-00 Policy Authorized Available to all personnel impacted by the policy Establishes practicesrules to be adhered to 09-03 Reuse policy Identification of reuse requirements Establishes the rules of reuse Documents the reuse adoption strategy including goals and objectives Identification of the reuse program Identification of the name of the reuse sponsor Identification of the reuse program participants Identification of the reuse steering function Identification of reuse program support functions 10-00 Process description A detailed description of the processprocedure which includes: - tailoring of the standard process (if applicable) - purpose of the process - outcomes of the process - task and activitie s to be performed and ordering of tasks - critical dependencies between task activities - expected time required to execute task - inputoutput work products - links between input and outputs work products Identifies process entry and exit criteria Identifies internal and external interfaces to the process Identifies process measures Identifies quality expectations Identifies functional roles and responsibilities Approved by authorized personnel 11-00 Product Is a resultdeliverable of the execution of a proce ss, includes services, systems (software and hardware) and processed materials Has elements that satisfy one or more aspects of a process purpose May be represented on various media (tangible and intangible) 11-03 Product release information Coverage for key elements (as appropriate to the application): Description of what is new or changed (including features removed) System information and requirements VDA Quality Management Center 105 WP ID WP Name WP Characteristics Identification of conversion programs and instructions Release numbering implementation may include: - the major release number - the feature release number - the defect repair number - the alpha or beta release; and the iteration within the alpha or beta release Identification of the component list (version identification included): - hardware software product elements, libraries, etc. - associated documentation list Newchanged parameter information ( e.g. for application parameters or global variables ) andor commands Backup and recovery information List of open known problems, faults, warning information, etc. Identification of verification and diagnostic procedures Technical support information Copyright and license information The release note may include an introduction, the environmental requirements, installation procedures, product invocation, new feature identification and a list of defect resolutions, known defects and workarounds 11-04 Product release package Includes the hardwaresoftwareproduct Includes and associated release elements such as: - system hardwaresoftwareproduct elements - associated customer documentation - application parameter definitions defined - command language defined - installation instructions - release letter 11-05 Software unit Follows established coding standards (as appropriate to the language and application): - commented - structured or optimized - meaningful naming conventions - parameter information identified - error codes defined - error messages descriptive and meaningful - formatting - indented, levels Follows data definition standards (as appropriate to the language and applica tion): - variables defined - data types defined - classes and inheritance structures defined - objects defined Entity relationships defined Database layouts are defined File structures and blocking are defined Data structures are defined Algorithms are defined Functional interfaces defined 11-06 System All elements of the product release are included Any required hardware Integrated product VDA Quality Management Center 106 WP ID WP Name WP Characteristics Customer documentation Fully configured set of the system elements: - application parameters defined - commands defined - data loaded or converted 11-07 Temporary solution Problem identification Release",
          "BSW_00348, SRS_BSW_00353, SRS_BSW_00361, SRS_BSW_00439, SRS_- BSW_00449, SRS_BSW_00308, SRS_BSW_00309, SRS_BSW_00330, SRS_- BSW_00010, SRS_BSW_00341, SRS_BSW_00334) 210 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager",
          "Specification of ECU State Manager AUTOSAR CP R20-11 Document TitleSpecification of ECU State Manager Document Owner AUTOSAR Document Responsibility AUTOSAR Document Identification No 78 Document Status published Part of AUTOSAR Standard Classic Platform Part of Standard Release R20-11 Document Change History Date Release Changed by Description 2020-11-30 R20-11AUTOSAR Release ManagementCorrected broken chapter structure EcuM_UserType handling improved Minor content changes, clarifications (multi-core, configuration, values) 2019-11-28 R19-11AUTOSAR Release ManagementNo content changes Changed Document Status from Final to published 2018-10-31 4.4.0AUTOSAR Release ManagementReworked BswM interface through EcuM_GoDownHaltPoll Removed EcuM fixed version references 2017-12-08 4.3.1AUTOSAR Release ManagementAdapt API Can_CheckWakeup Removed ConfigPtr parameter Removed Default error Removed unused DIO driver EcuM AUTOSAR service configure on service partition only 2016-11-30 4.3.0AUTOSAR Release ManagementPartial Network Cluster Support Initialization BSW scheduler slipt Added a driver initialization list Removed EcuM_StateType 1 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 2015-07-31 4.2.2AUTOSAR Release ManagementReworked slave core poll sequence Reviewed multicore shutdown synchronization Reclassified error types Editorial changes 2014-10-31 4.2.1AUTOSAR Release ManagementAdded switch configuration Defined initialization order for InitListZeroInitListOne Definition of the name pattern of c-init-data struct corrected Type conflicts solved Editorial changes 2014-03-31 4.1.3AUTOSAR Release ManagementEcuM errors reworked Inconsistencies between APIs and Interfaces resolved Type conflicts solved Editorial changes 2013-10-31 4.1.2AUTOSAR Release ManagementAdded API table for service interfaces Fixed traceability topics General clean-up of requirements (reviewed different interfaces, operations, descriptions and figures). Editorial changes 2 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 2013-03-15 4.1.1AUTOSAR AdministrationSpecified reset mode to use in case of pending wakeup events during shutdown Added callout for Reset Loop Detection Extended specification of parameter time of function EcuM_GetMostRecentShutdown Improved configuration description Added new APIs to enable asynchronous Trcv handling for CANFR Wakeup Adaption of EcuM Flex to support BSW modules distributed over multiple partitions Reclassified which Production Errors are Extended Production Errors Added possible error to operations of ClientServer-Interfaces, where no errors where defined Enhancement of configuration to initialize BSW modules by the EcuM Flex 2011-12-22 4.0.3AUTOSAR AdministrationFixed interoperability problems between EcuM and BswM Terminology of ECU State Manager Flexible more consistently described Modification of sleep sequences to minimize misses of wakeup interrupts 2010-09-30 3.1.5AUTOSAR AdministrationUpdated pseudo code for AUTOSAR Services Update startup procedure for multi core systems 2010-02-02 3.1.4AUTOSAR AdministrationRemoved state machine to accommodate mode-dependent scheduling Added Multi-Core support Added Alarm Clock feature Revised disclaimer 2008-08-13 3.1.1AUTOSAR AdministrationLegal disclaimer revised 3 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 2007-12-21 3.0.1AUTOSAR AdministrationFixed Wakeup mechanisms Included optional triggering of Watchdog Manager during Startup, Shutdown, and Sleep Extended startup sequence to have more flexibility and to directly initialize all other BSW modules Generated APIs from BSW UML model Generated configuration from Meta Model Document meta information extended Small layout adaptations made 2007-01-24 2.1.15AUTOSAR AdministrationCorrected startup flow and wakeup concept. Added specification for AUTOSAR ports. Modified configuration for compliance with variant management. Added new API services. Legal disclaimer revised Release Notes added Advice for users revised Revision Information added 2006-05-16 2.0AUTOSAR Administration Initial Release 4 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 Disclaimer This work (specification andor software implementation) and the material contained in it, as released by AUTOSAR, is for the purpose of information only. AUTOSAR and the companies that have contributed to it shall not be liable for any use of the work. The material contained in this work is protected by copyright and other types of intel- lectual property rights. The commercial exploitation of the material contained in this work requires a license to such intellectual property rights. This work may be utilized or reproduced without any modification, in any form or by any means, for informational purposes only. For any other purpose, no part of the work may be utilized or reproduced, in any form or by any means, without permission in writing from the publisher. The work has been developed for automotive applications only. It has neither been developed, nor tested for non-automotive applications. The word AUTOSAR and the AUTOSAR logo are registered trademarks. 5 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 Table of Contents 1 Introduction and Functional Overview 13 1.1 Backwards Compatibility to Previous ECU Manager Module Versions . 14 2 Definitions and Abbreviations 15 2.1 Definitions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 15 2.2 Abbreviations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 15 3 Related documentation 17 3.1 Input documents related standards and norms . . . . . . . . . . . . 17 3.2 Related specification . . . . . . . . . . . . . . . . . . . . . . . . . . . . 17 4 Constraints and Assumptions 18 4.1 Limitations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 18 4.2 Hardware Requirements . . . . . . . . . . . . . . . . . . . . . . . . . . 18 4.3 Applicability to car domains . . . . . . . . . . . . . . . . . . . . . . . . 18 5 Dependencies to other modules 19 5.1 SPAL Modules . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 19 5.1.1 MCU Driver . . . . . . . . . .",
          "are finished processing, the cores must be synchronized before entering SHUTDOWN. The BswM (which is distributed over all partitions) ascertains that the ECU should be shut down and synchronizes with each BwsM in the ECU. All BswMs induce de- initialization of all the partitions BSWs, SWCs and CDDs and send appropriate signals to the other BswMs to indicate their readiness to shut down. 78 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 For a shutdown of the ECU, the BswM (which lies in the same partition of the master EcuM) ultimately calls GoOff on the master core which distributes that request to all slave cores. The master EcuM de-initializes the BswM, and the SchM. The EcuMs on the slave cores de-initialize their SchM and BswM and then send a signal to indicate that the core is ready for ShutdownOS (again, see section section 7.9.3 Master Core - Slave Core Signalling for details). The master EcuM waits for the signal from each slave core EcuM and then initiates shutdown as usual on the master core (the master EcuM calls ShutdownAllCores , and the ECU is put to bed with the global shutdown hook) 79 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 7.9.6.1 Master Core SHUTDOWN module EcuMmodule SchMmodule BswMmodule McOsIntegration Code opt Pending wakeup events?loop over every BswM running in this core loop FOR all configured cores EcuM_OnGoOffOne() ShutdownAllCores(StatusType)EcuM_GetPendingWakeupEvents(EcuM_WakeupSourceType)BswM_Deinit() WaitEvent(Mask)SchM_Deinit()GetCoreID(CoreIdType) EcuM_SelectShutdownTarget(Std_ReturnType, EcuM_ShutdownTargetType, EcuM_ShutdownModeType) Figure 7.23: Master Core OffPreOS Sequence 80 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 SWS_EcuM_04020 d Integration Code module EcuMmodule McOs alt Shutdown Target Reset OffGetCoreID(CoreIdType) EcuM_AL_SwitchOff()EcuM_AL_Reset(EcuM_ResetType)EcuM_OnGoOffTwo() Figure 7.24: Master Core OffPostOS Sequencec () 81 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 7.9.6.2 Slave Core SHUTDOWN module EcuMmodule McOsmodule :SchMIntegration Code module BswM loop over every BswM running in this core SetEvent(TaskId, Mask)GetCoreID(CoreIdType) SchM_Deinit()BswM_Deinit()EcuM_OnGoOffOne() Figure 7.25: Slave Core OffPreOS Sequence SWS_EcuM_04022 d 82 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 module EcuMmodule McOsIntegration Code EcuM_OnGoOffTwo()GetCoreID(CoreIdType) Figure 7.26: Slave Core OffPostOS Sequencec () 7.9.7 SLEEP Phase When the shutdown target Sleep is requested, all cores are put to sleep simultaneously. The MCU must issue a halt for each core. As task timing and priority are local to a core in the OS, neither the scheduler nor the RTE must be synchronized after a halt. Because the master core could issue the MCU halt before all slave cores are finished processing, the cores must be synchronized before entering GoHalt. The BswMs ascertain that sleep should be initiated and distribute an appropriate ECU mode to each core. The BSWs, SWCs and CDDs on the slave cores must be informed by their partition local BswM, de-initialize appropriately and send appropriate mode requests to the BswM to indicate their readiness. If the ECU is put to sleep, the halts must be synchronized so that all slave cores are halted before the master core computes the checksum. The ECU Manager module on the master core uses the same signal mechanism as for synchronizing cores on Go Off. Similarly, the ECU Manager module on the master core must validate the checksum before releasing the slave cores from the halt state 83 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 7.9.7.1 Master Core SLEEP SWS_EcuM_04023 d module EcuMmodule OsIntegration Code module :BswM GetCoreID(CoreIdType) GetResource(RES_AUTOSAR_ECUM_core)EcuM_EnableWakeupSources(EcuM_WakeupSourceType)BswM_EcuM_CurrentWakeup(sources, ECUM_WKSTATUS_NONE ) Figure 7.27: Master Core GoSleep Sequencec () SWS_EcuM_04024 d 84 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 Integration Code module :BswMPeripheral Wakeup Sourcemodule Mcumodule EcuMmodule Wakeup Sourcemodule Os HALT opt RAM check failed alt Validation Needed Yes Noalt AlarmClock Service Present EcuM_AlarmClock only pending event AND Alarm not e xpired EcuM_GenerateRamHash() EcuM_CheckRamHash(uint8)Return from interrupt()Wait for all SlaveCores to be ready to sleep() EcuM_ErrorHook(uint16)Mcu_SetMode()EcuM_SetWakeupEvent(EcuM_WakeupSourceType)Mcu_SetMode(Mcu_ModeType) Signal all SlaveCores to continue()DisableAllInterrupts()Module_CheckWakeup() BswM_EcuM_CurrentWakeup(Sources, ECUM_WKSTATUS_VALIDATED)Mcu_SetMode(Mcu_ModeType)Interrupt() EcuM_GenerateRamHash()EcuM_CheckWakeup(EcuM_WakeupSourceType) EnableAllInterrupts()DisableAllInterrupts() BswM_EcuM_CurrentWakeup(sources, ECUM_WKSTATUS_PENDING)Activate PLL() Figure 7.28: Master Core Halt Sequence 85 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 c(SRS_ModeMgm_09239) SWS_EcuM_04025 d module EcuMmodule :BswMIntegration Code module Mcumodule Wakeup Sourcemodule Os loop WHILE no pendingvalidated events loop FOR all wakeup sources that need polling opt Wakeup detected alt Yes No ! EnableAllInterrupts() Signal SlaveCores to continue()EcuM_SetWakeupEvent(EcuM_WakeupSourceType) EcuM_GetPendingWakeupEvents(EcuM_WakeupSourceType)EcuM_SleepActivity() Module_CheckWakeup()Mcu_SetMode (Mcu_ModeType) BswMEcuM_CurrentWakeup(sources, ECUM_WKSTATUS_VALIDATED)DisableAllInterrupts() BswM_EcuM_CurrentWakeup(sources, ECUM_WKSTATUS_PENDING)EcuM_CheckWakeup(EcuM_WakeupSourceType) Figure 7.29: Master Core Poll Sequencec () SWS_EcuM_04026 d 86 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 module Mcumodule Osmodule EcuMIntegration Code Mcu_SetMode(Mcu_ModeType) EcuM_GetPendingWakeupEvents(EcuM_WakeupSourceType) ReleaseResource(RES_AUTOSAR_ECUM_core)EcuM_DisableWakeupSources(EcuM_WakeupSourceType)EnableAllInterrupts()DisableAllInterrupts() EcuM_AL_DriverRestart() Figure 7.30: Master Core WakeupRestart Sequencec () 7.9.7.2 Slave Core SLEEP SWS_EcuM_04027 d 87 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 module EcuMmodule Osmodule :BswMIntegration Code GetCoreID(CoreIdType) EcuM_EnableWakeupSources(EcuM_WakeupSourceType) GetResource(RES_AUTOSAR_ECUM_core)BswM_EcuM_CurrentWakeup(sources, ECUM_WKSTATUS_NONE ) Figure 7.31: Slave Core GoSleep Sequencec () SWS_EcuM_04028 d 88 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 Integration Code module Wakeup Sourcemodule EcuMmodule McuPeripheral Wakeup Sourcemodule Osmodule :BswM HALT alt Validation Needed Yes NoMcu_SetMode()EcuM_SetWakeupEvent(EcuM_WakeupSourceType)Interrupt()Signal MasterCore that Slave is ready to sleep() Return from interrupt()EcuM_CheckWakeup(EcuM_WakeupSourceType) BswM_EcuM_CurrentState(ECUM_WKSTATUS_PENDING) Wait for MasterCore to continue()DisableAllInterrupts() BswM_EcuM_CurrentWakeup(Sources, ECUM_WKSTATUS_VALI DATED)Module_CheckWakeup() EnableAllInterrupts()Mcu_SetMode(Mcu_ModeType) Figure 7.32: Slave Core Halt Sequencec () SWS_EcuM_04029 d 89 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 module EcuMmodule Wakeup Sourcemodule McuIntegration Code module Osmodule BswM loop WHILE no pendingvalidated events loop FOR all wakeup sources that need polling opt Wakeup detected alt Yes No ! Mcu_SetMode(Mcu_ModeType) Wait for signal from MasterCore to continue()EcuM_SetWakeupEvent(EcuM_WakeupSourceType)Module_CheckWakeup() BswM_EcuM_CurrentWakeup(sources, ECUM_WKSTATUS_PEND ING)EcuM_GetPendingWakeupEvents(EcuM_WakeupSourceType)EnableAllInterrupts() EcuM_CheckWakeup(EcuM_WakeupSourceType)DisableAllInterrupts() BswM_EcuM_CurrentWakeup(sources, ECUM_WKSTATUS_VALI DATED)EcuM_SleepActivity() Figure 7.33: Slave Core Poll Sequencec () SWS_EcuM_04030 d 90 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 module Mcumodule Osmodule EcuMIntegration Code Mcu_SetMode(Mcu_ModeType)DisableAllInterrupts() ReleaseResource(RES_AUTOSAR_ECUM_core)EcuM_DisableWakeupSources(EcuM_WakeupSourceType)EnableAllInterrupts() Figure 7.34: Slave Core WakeupRestart Sequencec () 7.9.8 Runnables and Entry points 7.9.8.1 Internal behavior SWS_EcuM_03018 dThe definition of the internal behavior of the the ECU Manager module shall be as follows. This detailed description is only needed for the configura- tion",
          "of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 module Osmodule Mcumodule EcuMIntegration Code opt Configuration data inconsistent EcuM_LoopDetection()EcuM_AL_DriverInitOne()Check consistency of configuration data()EcuM_AL_DriverInitZero() EcuM_DeterminePbConfiguration(const EcuM_ConfigType) StartOS(ECUM_DEFAULT_APP_MODE)Mcu_GetResetReason()EcuM_ErrorHook(ECUM_E_CONFIGURATION_DATA_INCONSISTEN T) Mcu_GetResetReason(Mcu_ResetType) EcuM_SelectShutdownTarget(Std_ReturnType, EcuM_ShutdownTargetType, EcuM_ShutdownModeType)Map reset reason to wakeup source() Figure 7.4: StartPreOS Sequence 37 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 The StartPreOS Sequence is intended to prepare the ECU to initialize the OS and should be kept as short as possible. Drivers should be initialised in the UP phase when possible and the callouts should also be kept short. Interrupts should not be used during this sequence. If interrupts have to be used, only category I interrupts are allowed in the StartPreOS Sequence 13. Initialization of drivers and hardware abstraction modules is not strictly defined by the ECU Manager. Two callouts EcuM_AL_DriverInitZero (see SWS_EcuM_02905 ) and EcuM_AL_DriverInitOne (see SWS_EcuM_02907 ) are provided to define the init blocks 0 and I. These blocks contain the initialization activities associated with the StartPreOS sequence. MCU_Init does not provide complete MCU initialization. Additionally, hardware depen- dent steps have to be executed and must be defined at system design time. These steps are supposed to be taken within the EcuM_AL_DriverInitZero (seeEcuM_- AL_DriverInitZero , SWS_EcuM_02905 ) or EcuM_AL_DriverInitOne call- outs (see EcuM_AL_DriverInitOne , SWS_EcuM_02907 ). Details can be found in the Specification of MCU Driver 10. SWS_EcuM_02181 dThe ECU Manager module shall call EcuM_GetValidated- WakeupEvents with the configured default shutdown target ( EcuMDefaultShut- downTarget ).c() See section 7.7 Shutdown Targets. SWS_EcuM_02603 dThe StartPreOS Sequence shall initialize all basic software modules that are needed to start the OS. c() 7.3.3 Activities in the StartPostOS Sequence StartPostOS Sequence Initialization Activity Comment Opt. Start BSW Scheduler no Init BSW Mode Manager no Init BSW SchedulerInitialize the semaphores for critical sections used by BSW modulesno Start Scheduler Timing Start periodical events for BSWSWCsno Table 7.2: StartPostOS Sequence Note to column Opt. : Optional activities can be switched on or off by configuration. See section 10.1 Common Containers and configuration parameters for details. SWS_EcuM_02932 dWhen activated through the EcuM_StartupTwo (see SWS_EcuM_02838 ) function, the ECU Manager module shall perform the actions in StartPostOS Sequence (see table 7.2). c(SRS_ModeMgm_09113) 3Category II interrupts require a running OS while category I interrupts do not. AUTOSAR OS re- quires each interrupt vector to be exclusively put into one category. 38 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 module SchMmodule EcuMmodule BswM SchM_Start(): Std_ReturnType SchM_StartTiming(const SchM_ConfigType)SchM_Init(const SchM_ConfigType)BswM_Init(const BswM_ConfigType ) Figure 7.5: StartPostOS Sequence 7.3.4 Checking Configuration Consistency 7.3.4.1 The Necessity for Checking Configuration Consistency in the ECU Man- ager In an AUTOSAR ECU several configuration parameters are set and put into the ECU at different times. Pre-compile parameters are set, inserted into the generated source code and compiled into object code. When the source code has been compiled, link- time parameters are set, compiled, and linked with the previously configured object code into an image that is put into the ECU. Finally, post-build parameters are set, compiled, linked, and put into the ECU at a different time. All these parameters must match to obtain a stable ECU. 39 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 Figure 7.6: BSW Configuration Steps The configuration tool can check the consistency of configuration time parameters it- self. The compiler may detect parameter errors at compilation time and the linker may find additional errors at link time. Unfortunately, finding configuration errors in post- build parameters is very difficult. This can only be achieved by checking that the pre-compile and link-time parameter settings used when compiling the code are exactly the same as the pre-compile and link-time parameter settings used when configuring and com- piling the post-build parameters. This can only be done at run-time. Explanation for SWS_EcuM_02796: The ECU Manager module checks the consis- tency once before initializing the first BSW module to avoid multiple checks scattered over the different BSW modules. This also implies that: SWS_EcuM_02796 dThe ECU Manager module shall not only check the consistency of its own parameters but of all post-build configurable BSW modules before initializing the first BSW module. c() The ECU Manager Configuration Tool must compute a hash value over all pre-compile and link-time configuration parameters of all BSW modules and store the value in the link-time ECUM_CONFIGCONSISTENCY_HASH (seeEcuMConfigConsistencyHash ) configuration parameter. The hash value is necessary for two reasons. First, the pre- compile and link-time parameters are not accessible at run-time. Second, the check 40 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 must be very efficient at run-time. Comparing hundreds of parameters would cause an unacceptable delay in the ECU startup process. The ECU Manager module Configuration Tool must in turn put the computed ECUM_ CONFIGCONSISTENCY_HASH value into the field in the EcuM_ConfigType structure which contains the root of all post-build configuration parameters. SWS_EcuM_02798 dThe ECU Manager module shall check in EcuM_Init (see SWS_EcuM_02811 ) that the field in the structure is equal to the value of ECUM_ CONFIGCONSISTENCY_HASH .c() By computing hash values at configuration time and comparing them at run-time the EcuM code can be very efficient and is furthermore independent of a particular hash computation algorithm. This allows the use of complex hash computation algorithms, e.g. cryptographically strong hash functions. Note that the same hash algorithm can be used to produce the value for the post-build configuration identifier in the EcuM_ConfigType structure. Then the hash algorithm is applied to the post-build parameters instead of the pre-compile and link-time param- eters. SWS_EcuM_02799 dThe hash computation algorithm used to compute a hash value over all pre-compile and link-time configuration parameters of all BSW modules shall always produce the same hash value for the same set of configuration data regardless of the order of configuration parameters in the XML files. c() 7.3.4.2 Example Hash Computation Algorithm Note: This chapter is not normative. It describes one possible way to compute hash values. A simple",
          "function defined in a common API in the Basis-SWSWS_EcuM_NA_00000 SRS_BSW_00172 The scheduling strategy that is built inside the Basic Software Modules shall be compatible with the strategy used in the systemSWS_EcuM_02836 SRS_BSW_00307 Global variables naming convention SWS_EcuM_NA_00000 SRS_BSW_00308 AUTOSAR Basic Software Modules shall not define global data in their header files, but in the C fileSWS_EcuM_NA_00000 SRS_BSW_00309 All AUTOSAR Basic Software Modules shall indicate all global data with read-only purposes by explicitly assigning the const keywordSWS_EcuM_NA_00000 SRS_BSW_00314 All internal driver modules shall separate the interrupt frame definition from the service routineSWS_EcuM_NA_00000 5 23 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 4 Requirement Description Satisfied by SRS_BSW_00323 All AUTOSAR Basic Software Modules shall check passed API parameters for validitySWS_EcuM_03009 SRS_BSW_00325 The runtime of interrupt service routines and functions that are running in interrupt context shall be kept shortSWS_EcuM_NA_00000 SRS_BSW_00327 Error values naming convention SWS_EcuM_04032 SRS_BSW_00330 It shall be allowed to use macros instead of functions where source code is used and runtime is criticalSWS_EcuM_NA_00000 SRS_BSW_00331 All Basic Software Modules shall strictly separate error and status informationSWS_EcuM_91005 SRS_BSW_00333 For each callback function it shall be specified if it is called from interrupt context or notSWS_EcuM_02171 SWS_EcuM_02345 SRS_BSW_00334 All Basic Software Modules shall provide an XML file that contains the meta dataSWS_EcuM_NA_00000 SRS_BSW_00337 Classification of development errors SWS_EcuM_04032 SRS_BSW_00339 Reporting of production relevant error statusSWS_EcuM_02987 SRS_BSW_00341 Module documentation shall contains all needed informationsSWS_EcuM_NA_00000 SRS_BSW_00347 A Naming seperation of different instances of BSW drivers shall be in placeSWS_EcuM_NA_00000 SRS_BSW_00348 All AUTOSAR standard types and constants shall be placed and organized in a standard type header fileSWS_EcuM_NA_00000 SRS_BSW_00350 All AUTOSAR Basic Software Modules shall allow the enabling disabling of detection and reporting of development errors.SWS_EcuM_04032 SRS_BSW_00353 All integer type definitions of target and compiler specific scope shall be placed and organized in a single type headerSWS_EcuM_NA_00000 SRS_BSW_00358 The return type of init() functions implemented by AUTOSAR Basic Software Modules shall be voidSWS_EcuM_02811 SRS_BSW_00359 All AUTOSAR Basic Software Modules callback functions shall avoid return types other than void if possibleSWS_EcuM_02826 SWS_EcuM_02829 SRS_BSW_00360 AUTOSAR Basic Software Modules callback functions are allowed to have parametersSWS_EcuM_02826 SWS_EcuM_02829 SRS_BSW_00361 All mappings of not standardized keywords of compiler specific scope shall be placed and organized in a compiler specific type and keyword headerSWS_EcuM_NA_00000 5 24 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 4 Requirement Description Satisfied by SRS_BSW_00373 The main processing function of each AUTOSAR Basic Software Module shall be named according the defined conventionSWS_EcuM_02837 SRS_BSW_00385 List possible error notifications SWS_EcuM_04032 SRS_BSW_00406 A static status variable denoting if a BSW module is initialized shall be initialized with value 0 before any APIs of the BSW module is calledSWS_EcuM_NA_00000 SRS_BSW_00407 Each BSW module shall provide a function to read out the version information of a dedicated module implementationSWS_EcuM_02813 SRS_BSW_00410 Compiler switches shall have defined valuesSWS_EcuM_NA_00000 SRS_BSW_00411 All AUTOSAR Basic Software Modules shall apply a naming rule for enablingdisabling the existence of the APISWS_EcuM_02813 SRS_BSW_00413 An index-based accessing of the instances of BSW modules shall be doneSWS_EcuM_NA_00000 SRS_BSW_00414 Init functions shall have a pointer to a configuration structure as single parameterSWS_EcuM_02811 SRS_BSW_00415 Interfaces which are provided exclusively for one module shall be separated into a dedicated header fileSWS_EcuM_NA_00000 SRS_BSW_00416 The sequence of modules to be initialized shall be configurableSWS_EcuM_02559 SRS_BSW_00417 Software which is not part of the SW-C shall report error events only after the DEM is fully operational.SWS_EcuM_NA_00000 SRS_BSW_00422 Pre-de-bouncing of error status information is done within the DEMSWS_EcuM_NA_00000 SRS_BSW_00425 The BSW module description template shall provide means to model the defined trigger conditions of schedulable objectsSWS_EcuM_02837 SRS_BSW_00426 BSW Modules shall ensure data consistency of data which is shared between BSW modulesSWS_EcuM_NA_00000 SRS_BSW_00427 ISR functions shall be defined and documented in the BSW module description templateSWS_EcuM_NA_00000 SRS_BSW_00432 Modules should have separate main processing functions for readreceive and writetransmit data pathSWS_EcuM_NA_00000 SRS_BSW_00437 Memory mapping shall provide the possibility to define RAM segments which are not to be initialized during startupSWS_EcuM_NA_00000 SRS_BSW_00439 Enable BSW modules to handle interruptsSWS_EcuM_NA_00000 5 25 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 4 Requirement Description Satisfied by SRS_BSW_00440 The callback function invocation by the BSW module shall follow the signature provided by RTE to invoke servers via Rte_Call APISWS_EcuM_02826 SWS_EcuM_02829 SRS_BSW_00449 BSW Service APIs used by Autosar Application Software shall return a Std_ReturnTypeSWS_EcuM_NA_00000 SRS_BSW_00450 A Main function of a un-initialized module shall return immediatelySWS_EcuM_NA_00000 SRS_BSW_00453 BSW Modules shall be harmonized SWS_EcuM_NA_00000 SRS_ModeMgm_- 09072ECU shutdown shall be forced SWS_EcuM_03022 SRS_ModeMgm_- 09098Storing the wake-up reasons shall be availableSWS_EcuM_02826 SRS_ModeMgm_- 09100Selection of wake-up sources shall be configurableSWS_EcuM_02389 SRS_ModeMgm_- 09104ECU State Manager shall take over control after OS shutdownSWS_EcuM_02952 SWS_EcuM_02953 SRS_ModeMgm_- 09113Initialization of Basic Software modules shall be doneSWS_EcuM_02932 SRS_ModeMgm_- 09114Startinginvoking the shutdown process shall be providedSWS_EcuM_00624 SWS_EcuM_02185 SWS_EcuM_02585 SWS_EcuM_02812 SWS_EcuM_02822 SRS_ModeMgm_- 09116Requesting and releasing the RUN state shall be providedSWS_EcuM_04115 SWS_EcuM_04116 SWS_EcuM_04117 SWS_EcuM_04118 SWS_EcuM_04119 SWS_EcuM_04120 SWS_EcuM_04121 SWS_EcuM_04123 SWS_EcuM_04125 SWS_EcuM_04126 SWS_EcuM_04127 SWS_EcuM_04128 SWS_EcuM_04129 SWS_EcuM_04130 SWS_EcuM_04132 SRS_ModeMgm_- 09126An API for querying the wake-up reason shall be providedSWS_EcuM_02827 SWS_EcuM_02828 SWS_EcuM_02830 SWS_EcuM_02831 SRS_ModeMgm_- 09127The ECU State Manager shall de-initialize Basic Software modules where appropriate during the shutdown processSWS_EcuM_03021 SRS_ModeMgm_- 09128Several shutdown targets shall be supportedSWS_EcuM_02822 SWS_EcuM_02824 SWS_EcuM_02825 SRS_ModeMgm_- 09136The ECU State Manager shall be the receiver of all wake-up eventsSWS_EcuM_04091 SRS_ModeMgm_- 09186Alarm Clock shall be active while the ECU is poweredSWS_EcuM_04054 SWS_EcuM_04055 SWS_EcuM_04056 SWS_EcuM_04057 SWS_EcuM_04058 SWS_EcuM_04059 SWS_EcuM_04060 SRS_ModeMgm_- 09187In Case of wakeup, all the alarm clock shall be canceledSWS_EcuM_04009 SRS_ModeMgm_- 09188In Case of startup, all the alarm clock shall be canceledSWS_EcuM_04010 SRS_ModeMgm_- 09190The alarm clock service shall allow setting an alarm relative to the current time using a time resolution of secondsSWS_EcuM_04054 5 26 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 4 Requirement Description Satisfied by SRS_ModeMgm_- 09194The alarm clock service shall allow setting the clockSWS_EcuM_04064 SRS_ModeMgm_- 09199The alarm clock service shall allow setting an alarm absolute by using an absolute time with a resolution of secondsSWS_EcuM_04057 SRS_ModeMgm_- 09234The EcuM shall handle the initialization of Basic Software modulesSWS_EcuM_02559",
          "Quality Management in the Automotive Industry Automotive SPICE Process Reference Model Process Assessment Model Version 3. 1 Title: Automotive SPICE Process Assessment Reference Model Author(s): VDA QMC Working Group 13 Automotive SIG Version: 3.1 Date: 2017-11-01 Status: PUBLISHED Confidentiality: Public Revision ID: 656 VDA Quality Management Center 2 Copyright n otice This document is a revision of the Automotive SPICE process assessment model 2.5 and the process reference model 4.5, which has been developed under the Automotive SPICE initiative by consensus of the car manufacturers within the Automotive Special Interest Group (SIG), a joint special interest group of Automotive OEM, the Procurement Forum and t he SPICE User Group. It has been revised by the Working Group 13 of the Quality Management Center (QMC) in the German Association of the Automotive Industry with the representation of members of the Automotive Specia l Interest Group, and with the agreement of the SPICE User Group. This agreement is based on a validation of the Automotive SPICE 3.0 version regarding any ISO copyright infringement and the st atements given from VDA QMC to t he S PICE User Group regarding t he current and future development of Automotive SPICE. This document reproduces relevant material from: ISOIEC 33020:2015 Information technology -- Process assessment -- Process measurement framework for assessment of process capability ISOIEC 33020 :2015 provides the following copyright release statement : Users of this International Standard may reproduce subclauses 5.2, 5.3, 5.4 and 5.6 as part of any process assessment model or maturity model so that it can be used for its intended purpose. ISOIEC 1 5504 -5:2006 Information Technology Process assessment Part 5: An exemplar Process Assessment Model ISOIEC 15504 -5:2006 provides the following copyright release statement : Users of this part of ISOIEC 15504 may freely reproduce the detailed descri ptions contained in the exemplar assessment model as part of any tool or other material to support the performance of process assessments, so that it can be used for its intended purpose. Relevant material from one of the mentioned standards is incorporated under the copyright release notice . Acknowledgemen t The VDA, the VDA QMC and the Working Group 13 explicitly acknowledge the high quality work carried out by the members of the Automoti ve Special Interest Group. We would like to thank all involved people, who have contributed to the development and publication of Automotive SPICE. VDA Quality Management Center 3 Derivative w orks You may not alter, transform, or build upon this work without the prior consent of both the SPICE User Group and the VDA Quality Management Center . Such consent may be given provided ISO copyright is not infringed. The detailed descriptions contained in this document may be incorporated as part of any tool or other material to support the perf ormance of process assessments, so that this process assessment model can be used for its intended purpose, provided that any such material is not offered for sale. All distribution of derivative works shall be made at no cost to the recipient. Distribution The Automotive SPICE process a ssessment model may only be obtained by download from the www.automotivespice.com web site. It is not permitted for the recipient to further distribute the document. Change r equests Any problems or change requests should be reported through the defined mechanism at the www.automotivespice.com web site. Trademark Automotive SPICE is a registered trademark of the Verband der Automobilindustrie e.V. (VDA) For further information about Automotive SPICE visit www.automotivespice.com . VDA Quality Management Center 4 Document history Version Date By Notes 2.0 2005 -05-04 AutoSIG SUG DRAFT RELEASE, pending final editorial review 2.1 2005 -06-24 AutoSIG SUG Editorial review comments implemented Updated to reflect changes in FDIS 15504 -5 2.2 2005 -08-21 AutoSIG SUG Final checks implemented: FORMAL RELEASE 2.3 2007 -05-05 AutoSIG SUG Revision following CCB: FORMAL RELEASE 2.4 2008 -08-01 AutoSIG SUG Revision following CCB: FORMAL RELEASE 2.5 2010 -05-10 AutoSIG SUG Revision following CCB: FORMAL RELEASE 3.0 2015 -07-16 VDA QMC WG13 Changes: See release notes 3.1 2017-11-01 VDA QMC WG13 Changes: See www.automotivespice.com Release n otes Version 3.0 of the process assessment model incorporates the following major changes : Chapter 1 Editorial adaption to ISOIEC 330xx series, Notes regarding combined PRMPAM in this document Chapter 2 Adaption to ISOIEC 330xx series Chapter 3 Text optimized for better understanding and adapted to ISOIEC 330xx series . Chapter 4 Renaming ENG to SYS SWE, Structure of old ENG Processes changed, Rework of AS 4.5 process reference model and AS 2.5 process performance indicators focusing on a set of highly significant processes assessed within the automotive industry ( VDA Scope). Chapter 5 Adaption based on AS 2.5 to the measurement f ramework of ISOIEC 33020 Annex A Conformity statement adapted to ISOIEC 33004 Annex B Modifications on work produ ct characteristics according to the changes in chapter 4. Annex C Update to recent standards. Introduction of specific terms used in AS 3.0 Annex D Added the major concepts used for AS 3.0 , incorporated Annex E of AS 2.5 Annex E Updated references to other standards Version 3.1 of the process assessment model incorporates minor changes. Please refer to www.automotivespice.com for a detailed change log. VDA Quality Management Center 5 Table of contents Copyright notice ................................ ................................ ................................ .............................. 2 Acknowledgement ................................ ................................ ................................ ........................... 2 Derivative works ................................ ................................ ................................ .............................. 3 Distribution ................................ ................................ ................................ ................................ ...... 3 Change requests ................................ ................................ ................................ ............................. 3 Trademark ................................ ................................ ................................ ................................ ...... 3 Document history ................................ ................................ ................................ ............................ 4 Release notes ................................ ................................ ................................ ................................ . 4 Table of contents ................................ ................................ ................................ ............................ 5 List of Figures ................................ ................................ ................................ ................................ . 7 List of Tables ................................ ................................ ................................ ................................ .. 7 1. Introduction ................................ ................................ ................................ .............................. 8 1.1. Scope ................................ ................................ ................................ .............................. 8 1.2. Terminology ................................ ................................ ................................ ..................... 9 1.3. Abbrevi ations ................................ ................................ ................................ ................... 9 2. Statement of compliance ................................ ................................ ................................ .......... 9 3. Process capability determination ................................ ................................ ............................",
          "a process execution: - key elements to be represented in the work product VDA Quality Management Center 119 Annex C Terminology Annex C lists the applicable terminology references from ISOIECIEEE 24765 and ISOIECIEEE 29119. It also provide s terms which are specifically defined within Automotive SPICE. Some of these definitions are based on ISOIECIEEE 24765. Table C.1 Terminology Term Origin Description Acceptance testing ISOIECIEEE 24765 Formal testing conducted to enable a user, customer, or authorized entity to determine whether to accept a system or component. Application parameter Automotive SPICE V3.1 An application parameter is a parameter containing data applied to the system or software functions, behavior or properties. T he notion of application parameter is expressed in two ways: firstly, the logical specification (including name, description, unit, value domain or threshold values or characteristic curves, respectively), and, secondly, the actual quantitative data value it receives by means of data application. Architecture element Automotive SPICE V3.1 Result of the decomposition of the architecture on system and software level: The system is decomposed into elements of the system architecture across appropriate hierarchical levels. The software is decomposed into elements of the software architecture across appropriate hierarchical levels down to the software components (the lowest level elements of the software architecture). Baseline ISOIECIEEE 24765 A speci fication or product that has been formally reviewed and agreed upon, that thereafter serves as the basis for further development, and can be changed only through formal change control procedures. Black -box testing Automotive SPICE V3.1 Method of requireme nt testing where tests are developed without knowledge of the internal structure and mechanisms of the tested item. Code review Automotive SPICE V3.1 A check of the code by one or more qualified persons to determine its suitability for its intended use an d identify discrepancies from specifications and standards. Coding ISOIECIEEE 24765 The transforming of logic and data from design specifications (design descriptions) into programming language. Consistency Automotive SPICE V3.1 Consistency addresses content and semantics and ensures that work products are not in contradiction to each other. Consistency is supported by bidirectional traceability. Defect FAULT Dynamic analysis ISOIECIEEE 24765 A process of evaluating a system or component based on its behavior during execution. Element Automotive SPICE V3.1 Elements are all structural objects on architectural and design level on the left side of the V. Such elements can be further decomposed into more fine -grained sub -elements of the architecture or design across appropriate hierarchical levels. Error ISOIECIEEE 24765 The difference between a computed, observed, or measured value or condition and the true, specified, or theoretically correct value or condition. VDA Quality Management Center 120 Fault ISOIECIEEE 24765 A manifestation of an error in software. Functional requirement ISOIECIEEE 24765 A statement that identifies what a product or process must accomplish to produce required behavior andor results. Functional specification ISOIECIEEE 24765 A document that specifies the functions that a system or component must perform. Often part of a requirements specification. Functional testing ISOIECIEEE 24765 Testing conducted to evaluate the compliance of a system or component with specified functional requirements. Hardware ISOIECIEEE 24765 Physical equipment used to process, store, or transmit computer programs or data. Hardware item Automotive SPICE V3.1 A physical representation of a hardware element. Integration Automotive SPICE V3.1 A process of combining items to larger items up to an overall system. Integrated software item Automotive SPICE V3.1 A set of software units or items that are integrated into a larger assembly for the purpose of integration testing. Integration testing Automotive SPICE V3.1 Testing in which items (software items, hardware items, or system items) are combined and tested to evaluate the interaction among them. Integrated system item Automotive SPICE V3.1 A set of items that are integrated into a larger assembly for the purpose of integration testing. Quality assurance ISOIECIEEE 24765 A planned and systematic pattern of all actions necessary to provide adequate confidence that an item or product conforms to established technical requirements. Regress ion testing Automotive SPICE V3.1 Selective retesting of a system or item to verify that modifications have not caused unintended effects and that the system or item still complies with its specified requirements. Requirement Automotive SPICE V3.1 A prope rty or capability that must be achieved or possessed by a system, system item, product, or service to satisfy a contract, standard, specification or other formally imposed documents. Requirements specification Automotive SPICE V3.1 A document that specifies the requirements for a system or item. Typically included are functional requirements, performance requirements, interface requirements, design requirements, and development standards. Software ISOIECIEEE 24765 Computer programs, procedures, and possibly associated documentation and data pertaining to the operation of a computer system. Software component Automotive SPICE V3.1 In Automotive SPICE V3.1 the term software component is used for the lowest level elements of the software architec ture for which finally the detailed design is defined. A software component consists of one or more software units. ARCHITECTURE ELEMENT , UNIT Software element ARCHITECTURE ELEMENT Software item ISOIECIEEE 24765 Identifiable part of a software product. Software unit UNIT VDA Quality Management Center 121 Static analysis Automotive SPICE V3.1 A process of evaluating an item based on its form, structure, content, or documentation. System Automotive SPICE V3.1 A collection of interacting items organized to accompli sh a specific function or set of functions within a specific environment. System item Automotive SPICE V3.1 Identifiable part of the system. System test ISOIECIEEE 24765 Testing conducted on a complete, integrated system to evaluate the systems compliance with its specified requirements. Testing Automotive SPICE V3.1 Activity in which an item (system, hardware, or software) is exe cuted under specific conditions; and the results are recorded , summarized and communicated . Traceability ISOIECIEE E 24765 The degree to which a relationship can be established between two or more products of the development process, especially products having a predecessor -successor or master -subordinate relationship to one another. Unit Automotive SPICE V3.1 Part of a software component which is not further subdivided. SOFTWARE COMPONENT Unit test Automotive SPICE",
          "BSW_00348, SRS_BSW_00353, SRS_BSW_00361, SRS_BSW_00439, SRS_- BSW_00449, SRS_BSW_00308, SRS_BSW_00309, SRS_BSW_00330, SRS_- BSW_00010, SRS_BSW_00341, SRS_BSW_00334) 210 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager",
          "................................ ......................... 87 5.6. Process capability Level 5: Innovating process ................................ .............................. 88 5.6.1. PA 5.1 Process innovation process attribute ................................ .......................... 88 5.6.2. PA 5.2 Process innovation implementation proc ess attribute ................................ . 89 Annex A Conformity of the process assessment and reference model ................................ ..... 91 A.1 Introduction ................................ ................................ ................................ .................... 91 A.2 Conformance to the requirements for process reference models ................................ ... 91 A.3 Conformance to the requirements for process assessment models ............................... 92 Annex B Work product characteristics ................................ ................................ ...................... 94 Annex C Terminology ................................ ................................ ................................ ............. 119 VDA Quality Management Center 7 Annex D Key concepts ................................ ................................ ................................ ........... 122 D.1 The Plug -in concept ................................ ................................ ................................ .. 122 D.2 The Tip of the V ................................ ................................ ................................ ........ 123 D.3 Terms Element, Component, Unit, and Item ................................ ...................... 123 D.4 Traceability and consistency ................................ ................................ ........................ 124 D.5 Agree and Summarize and Communicate ................................ .............................. 125 D.6 Evaluate, Verification Criteria and Ensuring compliance ................................ ...... 125 D.7 The relation between Strategy and Plan ................................ ................................ . 126 Annex E Reference standards ................................ ................................ ............................... 128 List of Figures Figure 1 Process assessment model relationship ................................ ................................ ..... 11 Figure 2 Automotive SPICE process reference model - Overview ................................ ............ 12 Figure 3 Relationship between assessment indicators and process capability .......................... 22 Figure 4 Possible levels of abstraction for the term process ................................ ................... 23 Figure 5 Performing a process assessment for determining process capability ........................ 23 Figure D.1 The Plug -in concept ................................ ................................ ............................ 122 Figure D.2 The tip of the V ................................ ................................ ................................ ... 123 Figure D.3 Element, component, unit, and item ................................ ................................ ...... 123 Figure D.4 Bidirectional traceability and consistency ................................ .............................. 124 Figure D.5 Agree, summarize and communicate ................................ ................................ .... 125 Figure D.6 Evaluation, verification criteria and c ompliance ................................ ..................... 126 Figure D.7 Strategy and plan ................................ ................................ ................................ ... 127 List of Tables Table 1 Abbreviation List ................................ ................................ ................................ ............ 9 Table 2 Primary life cycle processes ACQ process group ................................ ...................... 13 Table 3 Primary life cycle processes SPL process group ................................ ....................... 13 Table 4 Primary life cycle process es SYS process group ................................ ...................... 13 Table 5 Primary life cycle processes SWE process group ................................ ..................... 14 Table 6 Supporting life cycle processes - SUP process group ................................ .................. 14 Table 7 Organizational life cycle processes - MAN process group ................................ ............ 14 Table 8 Organizational life cycle processes - PIM process group ................................ ............. 15 Table 9 Organizational life cycle processes - REU process group ................................ ............ 15 Table 10 Process cap ability levels according to ISOIEC 33020 ................................ ............... 16 Table 11 Process attributes according to ISOIEC 33020 ................................ ......................... 16 Table 12 Rating scale according to ISOIEC 33020 ................................ ................................ .. 17 Table 13 Rating scale percentage values according to ISOIEC 33020 ................................ .... 17 Table 14 Refinement of rating scale according to ISOIEC 33020 ................................ ............ 17 Table 15 Refined rat ing scale percentage values according to ISOIEC 33020 ........................ 18 Table 16 Process capability level model according to ISOIEC 33020 ................................ ...... 20 Table 17 Template for the process description ................................ ................................ ......... 24 Table B.1 Structure of WPC tables ................................ ................................ ........................... 94 Table B.2 Work product characteristi cs ................................ ................................ .................... 94 Table C.1 Terminology ................................ ................................ ................................ ........... 119 Table E.1 Reference standards ................................ ................................ .............................. 128 VDA Quality Management Center 8 1. Introduction 1.1. Scope Process assessment is a disciplined evaluation of an organizational units processes against a process assessment model . The Automotive SPICE process assessment model (PAM) is intended for use when performing conformant assessments of the process capability on the development of embedded automotive systems. It was developed in accordance with the requirements of ISOIEC 33004. Automotive SPICE has its own process refere nce model (PRM) , which was developed based on the Automotive SPICE process reference model 4.5 . It was further developed and tailored considering the specific needs of the automotive industry. If processes beyond the scope of Automotive SPICE are needed, a ppropriate processes from other process reference models such as ISOIEC 12207 or ISOIEC 15288 may be added based on the business needs of the organization . The PRM is incorporated in this document and is used in conjunction with the Automotive SPICE process assessment model when performing an assessment. This Automotive SPICE process assessment model contains a set of indicators to be considered when interpreting the intent of the Automotive SPICE process reference m odel. These indicators may also be used when implementing a process improvement program subsequent to an assessment. VDA Quality Management Center 9 1.2. Terminology Automotive SPICE follows the following preceden ce for use of terminology: a) ISOIEC 33001 for assessment related terminology b) ISOIECIEEE 24765 and ISOIECIEEE 29119 terminology (as contained in Annex C) c) Terms introduced by Automotive SPICE (as contained in Annex C) 1.3. Abbreviations AS Automotive SPICE BP Base Practice CAN Controller Area Network CASE Computer -Aided Software Engineering, CCB Change Control Board CFP Call For Proposals CPU Central Processing Unit ECU Electronic Control Unit EEPROM Electrically Erasable Programmable Read-Only Memory GP Generic Practice GR Generic Resource IEC International Electrotechnical Commission IEEE Institute of Electrical and Electronics Engineers IO Input Output ISO International Organization for Standardization ITT Invitation To Tender LIN Local Interconnect Network MISRA Motor Industry Software Reliability Association MOST Media Oriented Systems Transport PA Process Attribute PAM Process Assessment Model PRM Process Reference Model PWM Pulse Width Modulation RAM Random Access Memory ROM Read Only Memory SPICE Software Process Improvement and Capability d Etermination SUG Spice User Group USB Universal Serial Bus WP Work Product WPC Work Product Characteristic Table 1 Abbreviation List 2. Statement of compliance The Automotive SPICE process assessment model and process reference model is conformant with the IS OIEC 33004 , and can be used as the basis for conducting an assessment of process capability. VDA Quality Management Center 10 ISOIEC 33020 is used as an",
          "and ISOIECIEEE 29119 terminology (as contained in Annex C) c) Terms introduced by Automotive SPICE (as contained in Annex C) 1.3. Abbreviations AS Automotive SPICE BP Base Practice CAN Controller Area Network CASE Computer -Aided Software Engineering, CCB Change Control Board CFP Call For Proposals CPU Central Processing Unit ECU Electronic Control Unit EEPROM Electrically Erasable Programmable Read-Only Memory GP Generic Practice GR Generic Resource IEC International Electrotechnical Commission IEEE Institute of Electrical and Electronics Engineers IO Input Output ISO International Organization for Standardization ITT Invitation To Tender LIN Local Interconnect Network MISRA Motor Industry Software Reliability Association MOST Media Oriented Systems Transport PA Process Attribute PAM Process Assessment Model PRM Process Reference Model PWM Pulse Width Modulation RAM Random Access Memory ROM Read Only Memory SPICE Software Process Improvement and Capability d Etermination SUG Spice User Group USB Universal Serial Bus WP Work Product WPC Work Product Characteristic Table 1 Abbreviation List 2. Statement of compliance The Automotive SPICE process assessment model and process reference model is conformant with the IS OIEC 33004 , and can be used as the basis for conducting an assessment of process capability. VDA Quality Management Center 10 ISOIEC 33020 is used as an ISOIEC 33003 compliant Measurement Framework. A statement of compliance of the process assessment model and process reference model with the requirements of ISOIEC 33004 is provided in Annex A. VDA Quality Management Center 11 3. Process capability determination The concept of process capability determination by using a process assessment model is based on a two -dimensional framework. The first dimension is provided by processes defined in a process reference model (process dimension). The second dimension consists of capability levels that are further subdivided into process attributes (capability dimension). The pr ocess attributes provide the measurable characteristics of process capability. The process assessment model selects processes from a process reference model and supplements with indicators. These indicators support the collection of objective evidence whic h enable an assessor to assign ratings for processes according to the capability dimension. The relationship is shown in Figure 1: Process1Measurement framework (ISOIEC 33020) Capability levels Process attributes Rating Scale Rating method Aggregation method Process capability level model Process2 Process3 Process4 ...Process assessment model (Automotive SPICE) Process capability indicators Process performance indicators Process reference model (Automotive SPICE) Domain and scopes Process purposes Process outcomes Figure 1 Process assessment model relationship VDA Quality Management Center 12 3.1. Process reference m odel Processes are grouped by process category and at a second level into process groups according to the type of activity they address. There are 3 p rocess categories: Primary life cycle processes , Organizational life cycle processes and Supporting life cycle processes . Each process is described in terms of a purpose statement. The purpose statement contains the unique functional objectives of the process when performed in a particular environment. For each purpose statement a list of speci fic outcomes is associated, as a list of expected positive results of the process performance. For the process dimension, the Automotive SPICE process reference model provides the set of processes shown in Figure 2. Management Process Group (MAN) Supporting Process Group (SUP)Acquisition Process Group (ACQ) Supply Process Group (SPL)ACQ.4 Supplier Monitoring ACQ.11 Technical Requirements ACQ.12 Legal and Administrative Requirements ACQ.13 Project Requirements ACQ.14 Request for Proposals ACQ.15 Supplier Qualification SPL.1 Supplier Tendering SPL.2 Product ReleaseSUP.1 Quality AssuranceSUP.2 VerificationSUP.4 Joint ReviewSUP.7 Documentation SUP.8 Configuration ManagementSUP.9 Problem Resolution ManagementSUP.10 Change Request ManagementMAN.3 Project Management MAN.5 Risk Management MAN.6 MeasurementACQ.3 Contract Agreement Process Improvement Process Group (PIM) PIM.3 Process ImprovementReuse Process Group (REU) REU.2 Reuse Program ManagementSystem Engineering Process Group (SYS) SYS.1 Requirements Elicitation SYS.2 System Requirements Analysis SYS.3 System Architectural DesignSYS.4 System Integration and Integration TestSYS.5 System Qualification Test Software Engineering Process Group (SWE) SWE.1 Software Requirements Analysis SWE.2 Software Architectural Design SWE.3 Software Detailed Design and Unit ConstructionSWE.4 Software Unit VerificationSWE.5 Software Integration and Integration TestSWE.6 Software Qualification Test Primary Life Cycle Processes Supporting Life Cycle Processes Organizational Life Cycle Processes Figure 2 Automotive SPICE process reference model - Overview VDA Quality Management Center 13 3.1.1. Primary life cycle processes category The p rimary life cycle processes category consists of processes that may be used by the customer when acquiring products from a supplier, and by the supplier when responding and delivering products to the customer including the engineering processes needed for specification, design, deve lopment, integration and testing. The primary life cycle processes category consists of the following groups: the Acquisition p rocess group; the Supply process group; the System engineering process group; the Sof tware engineering process group. The Acqui sition process group (ACQ) consists of processes that are performed by the customer, or by the supplier when acting as a customer for its own suppliers, in order to acquire a product andor service. ACQ.3 Contract Agreement ACQ.4 Supplier Monitoring ACQ.11 Technical Requirements ACQ.12 Legal and Administrative Requirements ACQ.13 Project Requirements ACQ.14 Request for Proposals ACQ.15 Supplier Qualification Table 2 Primary life cycle processes ACQ process group The Supply process group (SPL) consists of processes performed by the supplier in order to supply a product andor a service. SPL.1 Supplier Tendering SPL.2 Product Release Table 3 Primary life cycle processes SPL process group The System Engineering process group (SYS) consists of processes addressing the elicitation and management of customer and internal requirements, the definition of the system architecture and the integration and testing on the system level. SYS.1 Requirement s Elicitation SYS.2 System Requirements Analysis SYS.3 System Architectural Design SYS.4 System Integration and Integration Test SYS.5 System Qualification Test Table 4 Primary life cycle processes SYS process group The Software Engineering process group (SWE) consists of processes addressing the management of software requirements derived from the system requirements, the development of the VDA Quality Management Center 14 corresponding software architecture and design as well as the implementation, integration and testing of the software. SWE.1 Software Requirements Analysis SWE.2 Software Architectural Design SWE.3 Software Detailed Design and Unit Construction SWE.4 Software Unit Verification SWE.5 Software Integration and Integration",
          "BSW_00348, SRS_BSW_00353, SRS_BSW_00361, SRS_BSW_00439, SRS_- BSW_00449, SRS_BSW_00308, SRS_BSW_00309, SRS_BSW_00330, SRS_- BSW_00010, SRS_BSW_00341, SRS_BSW_00334) 210 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager",
          "intermediate step to providing a process attribute rating. When performing rating, the rating method employed shall be specified relevant to the class of assessment. The following rati ng methods are defined. The use of rating method may vary according to the class, scope and context of an assessment. The lead assessor shall decide which (if any) rating method to use. The selected rating method(s) shall be specified in the assessment inp ut and referenced in the assessment report. ISOIEC 33020 provides the following 3 rating methods: Rating method R1 The approach to process attribute rating shall satisfy the following conditions: a) Each process outcome of each process within the scope of the assessment shall be characterized for each process instance, based on validated data; b) Each process attribute outcome of each process attribute for each process within the scope of the assessment shall be characterised for each process instance, b ased on validated data; c) Process outcome characterisations for all assessed process instances shall be aggregated to provide a process performance attribute achievement rating; d) Process attribute outcome characterisations for all assessed process insta nces shall be aggregated to provide a process attribute achievement rating. Rating method R2 The approach to process attribute rating shall satisfy the following conditions: a) Each process attribute for each process within the scope of the assessment shal l be characterized for each process instance, based on validated data; b) Process attribute characterisations for all assessed process instances shall be aggregated to provide a process attribute achievement rating. Rating method R3 Process attribute ratin g across assessed process instances shall be made without aggregation. VDA Quality Management Center 19 In principle the three rating methods defined in ISOIEC 33020 depend on a) whether the rating is made only on process attribute level (Rating method 3 and 2) or with more level of d etail both on process attribute and process attribute outcome level (Rating method 1); and b) the type of aggregation ratings across the assessed process instances for each process If a rating is performed for both process attributes and process attribute o utcomes (Rating method 1), the result will be a process performance attribute outcome rating on level 1 and a process attribute achievement rating on higher levels. Depending on the class, scope and context of the assessment an aggregation within one proce ss (one-dimensional, vertical aggregation), across multiple process instances (one -dimensional, horizontal aggregation) or both (two -dimensional, matrix aggregation) is performed. ISOIEC 33020 provides the following examples: When performing an assessment , ratings may be summarised across one or two dimensions. For example, when rating a process attribute for a given process, one may aggregate ratings of the associated process (attribute) outcomes such an aggregation will be performed as a vertical aggre gation (one dimension). process (attribute) outcome for a given process attribute across multiple process instances, one may aggregate the ratings of the associated process instances for the given process (attribute) outcome such an aggregation will be per formed as a horizontal aggregation (one dimension) process attribute for a given process, one may aggregate the ratings of all the process (attribute) outcomes for all the processes instances such an aggregation will be performed as a matrix aggregation across the full scope of ratings (two dimensions) The standard defines different methods for aggregation. Further information can be taken from ISOIEC 33020. VDA Quality Management Center 20 3.2.3. Process capability level model The process capability level achieved by a process shall be der ived from the process attribute ratings for that process according to the process capability level model defined in Table 1 6. The process capability level model defines the rules how the achievement of each level depends on the rating of the process attrib utes for the assessed and all lower levels. As a general rule the achievement of a given level requires a largely achievement of the corresponding process attributes and a full achievement of any lower lying process attribute. Scale Process attribute Rating Level 1 PA 1.1: Process Performance Largely Level 2 PA 1.1: Process Performance PA 2.1: Performance Management PA 2.2: Work Product Management Fully Largely Largely Level 3 PA 1.1: Process Performance PA 2.1: Performance Management PA 2.2: Work Product Management PA 3.1: Process Definition PA 3.2: Process Deployment Fully Fully Fully Largely Largely Level 4 PA 1.1: Process Performance PA 2.1: Performance Management PA 2.2: Work Product Management PA 3.1: Process Definition PA 3.2: Process Deployment PA 4.1: Quantitative Analysis PA 4.2: Quantitative Control Fully Fully Fully Fully Fully Largely Largely Level 5 PA 1.1: Process Performance PA 2.1: Performance Management PA 2.2: Work Product Management PA 3.1: Process Definition PA 3.2: Process Deployment PA 4.1: Quantitative Analysis PA 4.2: Quantitative Control PA 5.1: Process Innovation PA 5.2: Process Innovation Implementation Fully Fully Fully Fully Fully Fully Fully Largely Largely Table 16 Process capability level model according to ISOIEC 33020 VDA Quality Management Center 21 3.3. Process assessment m odel The process assessment model offers indicators in order to identify whether the process outcomes and the p rocess attribute outcomes (achievements ) are present or absent in the instantiated processes of projects and organizational units. These indicators provide guidance for assessors in accumulating the necessary objective evidence to support judgments of capability. They are not intended to be rega rded as a mandatory set of checklists to be followed. In order to judge the presence or absence of process outcomes and process achievements an assessment obtains objective evidence. All such evidence comes from the examination of work products and reposit ory content of the assessed processes, and from testimony provided by the performers and managers of the assessed processes. This evidence is mapped to the PAM indicators to allow establishing the correspondence to the relevant process outcomes and process attribute achievements . There are two types of indicators: Process performance i ndicators , which apply exclusively to capability Level 1. They provide an indication of the extent of fulfillment of the process outcomes Process capability",
          "4 15-06 Project status report OUTCOME 4, 6 VDA Quality Management Center 71 4.6.2. MAN.5 Risk Management Process ID MAN.5 Process name Risk Management Process purpose The purpose of the Risk Management Process is to identify, analyze, treat and monitor the risks continuously. Process outcomes As a result of successful implementation of this process: 1) the scope of the risk management to be performed is determined; 2) appropriate risk management strategies are defined and implemented; 3) risks are identified as they develop during the conduct of the project; 4) risks are analyzed and the priority in which to apply resources to treatment of these risks is determined; 5) risk measures are defined, applied, and assessed to determine changes in the status of risk and the progress of the treatment activities; and 6) appropriate treatment is taken to correct or avoid the impact of risk based on its priority, probability, and consequence or other defined risk threshold. Base practices MAN.5.BP1: Establish risk management scope. Determine the scope of risk management to be performed for the project, in accordance with organizational risk management policies. OUTCOME 1 NOTE 1: Risks may include technical, economic and timing risks. MAN.5.BP2: Define risk management strateg ies. Define appropriate strategies to identify risks, mitigate risks and set acceptability levels for each risk or set of risks, both at the project and organizational level. OUTCOME 2 MAN.5.BP3: Identify risks. Identify risks to the project both initial ly within the project strategy and as they develop during the conduct of the project, continuously looking for risk factors at any occurrence of technical or managerial decisions. OUTCOME 2, 3 NOTE 2: Examples of risk areas that are typically analyzed fo r potentia l risk reasons or risks factors include: cost, schedule, effort, resource, and technical. NOTE 3: Examples of risk factors may include: unsolved and solved trade -offs, decisions of not implementing a project feature, design changes, lack of expec ted resource s. MAN.5.BP4: Analyze risks. Analyze risks to determine the priority in which to apply resources to mitigate these risks. OUTCOME 4 NOTE 4: Risks are normally analyzed to determine their probability, consequence and severity. NOTE 5: Different techniques may be used to analyze a system in order to understand if risks exist, for example, functional analysis, simulation, FMEA, FTA etc. MAN.5. BP5: Define risk treatment actions. For each risk (or set of risks) define, perform and track the selected actions to keepreduce the risks to acceptable level. OUTCOME 5, 6 VDA Quality Management Center 72 MAN5.BP6: Monitor risks. For each risk (or set of risks) define measures (e.g. metrics) to determine changes in the status of a risk and to evaluate the progress of the of mitig ation activities. Apply and assess these risk measures. OUTCOME 5, 6 NOTE 6: Major risks may need to be communicated to and monitored by higher levels of management. MAN.5.BP7: Take corrective action. When expected progress in risk mitigation is not achi eved, take appropriate corrective action to reduce or avoid the impact of risk. OUTCOME 6 NOTE 7: Corrective actions may involve developing and implementing new mitigation strategies or adjusting the existing strategies. Output work products 07-07 Risk measure OUTCOME 5 08-14 Recovery plan OUTCOME 4, 6 08-19 Risk management plan OUTCOME ALL 08-20 Risk mitigation plan OUTCOME 3, 4, 5, 6 13-20 Risk action request OUTCOME 1, 2, 6 14-02 Corrective action register OUTCOME 6 14-08 Tracking system OUTCOME 5, 6 15-08 Risk analysis report OUTCOME 4 15-09 Risk status report OUTCOME 4, 5 4.6.3. MAN.6 Measurement Process ID MAN.6 Process name Measurement Process purpose The purpose of the Measurement Process is to collect and analyze data relating to the products developed and processes implemented within the organization and its projects, to support effective management of the processes and to objectively demonstrate the quality of the products. Process outcomes As a result of successful implementation of this process: 1) organizational commitment is established and sustained to implement the measurement process; 2) the measurement information needs of organizational and management processes are identified; 3) an appropria te set of measures, driven by the information needs are identified andor developed; 4) measurement activities are identified and performed; 5) the required data is collected, stored, analyzed, and the results interpreted; 6) information products are used to support decisions and provide an objective basis for communication; and 7) the measurement process and measures are evaluated and communicated to the process owner. VDA Quality Management Center 73 Base practices MAN.6.BP1: Establish organizational commitment for measurement. A commitment of management and staff to measurement is established and communicated to the organizational unit. OUTCOME 1 MAN.6.BP2: Develop measurement strategy. Define an appropriate measurement strategy to identify, perform and evaluate measurement activities and results, based on organizational and project needs. OUTCOME 1 MAN.6.BP3: Identify measurement information needs. Identify the measurement information needs of organizational and management processes. OUTCOME 2 MAN.6.BP4: Specify measures. Identify and develop an appropriate set of measures based on measurement information needs. OUTCOME 3 MAN.6.BP5: Perform measurement activities. Identify and perform measurements activities. OUTCOME 4 MAN.6.BP6: Retrieve me asurement data. Collect and store data of both base and derived measures, including any context information necessary to verify, understand, or evaluate the data. OUTCOME 5 MAN.6.BP7: Analyze measures. Analyze and interpret measurement data and develop i nformation products. OUTCOME 5 MAN.6.BP8: Use measurement information for decision -making. Make accurate and current measurement information accessible for any decision -making processes for which it is relevant. OUTCOME 6 MAN.6.BP9: Communicate measure s. Disseminate measurement information to all affected parties who will be using them and collect feedback to evaluate appropriateness for intended use. OUTCOME 5, 6 MAN.6.BP10: Evaluate information products and measurement activities. Evaluate informati on products and measurement activities against the identified information needs and measurement strategy. Identify potential improvements. OUTCOME 7 NOTE 1: Information products are produced as a result analysis of data in order to summarize and communic ate information. MAN.6.BP11: Communicate potential improvements. Communicate to the affected people the identified potential improvements concerning the",
          "process assessment model consists of six capability levels matching the capability levels defined in ISOIEC 33020 . The process capability indicators for the 9 process attributes included in the capa bility dimension for process capability level 1 to 5 are described. Each of the process attributes in this process assessment model is identical to the process attribute defined in the process measurement framework. The generic practices address the chara cteristics from each process attribute. The generic resources relate to the process attribute as a whole. Process capability level 0 does not include any type of indicators, as it reflects a non -implemented process or a process which fails to partially achieve any of its outcomes. NOTE: ISOIEC 33020 process attribute definitions and attribute outcomes are duplicated from ISOIEC 33020 in italic font and marked with a left side bar . 5.1. Process capability Level 0: Incomplete process The process is not implem ented, or fails to achieve its process purpose. At this level there is little or no evidence of any systematic achievement of the process purpose. 5.2. Process capability Level 1: Performed process The implemented process achieves its process purpose. The follo wing process attribute demonstrates the achievement of this level 5.2.1. PA 1.1 Process performance process attribute The process performance process attribute is a measure of the extent to which the process purpose is achieved. As a result of full achievement of this attribute: a) the process achieves its defined outcomes Generic practices GP 1.1.1 Achieve the process outcomes ACHIEVEMENT a Achieve the intent of the base practices. Produce work products that evidence the process outcomes. Generic resources Resources are used to achieve the intent of process specific base practices ACHIEVEMENT a 5.3. Process capability Level 2: Managed process The previously described Performed process is now implemented in a managed fashion (planned, monitored and adjusted) and its work products are appropriately established, controlled and maintained. The following process attributes, together with the previously defined process attribute, demonstrate the achievement of this level: VDA Quality Management Center 79 5.3.1. PA 2.1 Performance management process attri bute The performance management process attribute is a measure of the extent to which the performance of the process is managed. As a result of full achievement of this process attribute: a) Objectives for the performance of the process are identified; b) Perfor mance of the process is planned; c) Performance of the process is monitored; d) Performance of the process is adjusted to meet plans; e) Responsibilities and authorities for performing the process are defined, assigned and communicated; f) Personnel performing the pro cess are prepared for executing their responsibilities; g) Resources and information necessary for performing the process are identified, made available, allocated and used; h) Interfaces between the involved parties are managed to ensure both effective communic ation and clear assignment of responsibility. Generic practices GP 2.1.1 Identify the objectives for the performance of the process. ACHIEVEMENT a Performance objectives are identified based on process requirements. The scope of the process performance is defined. Assumptions and constraints are considered when identifying the performance objectives. NOTE 1: Perf ormance objectives may include (1) timely production of artifact s meeting the defined quality criteria, (2) process cycle time or frequency (3) resource usage ; and (4) boundaries of the process. NOTE 2: At minimum, pro cess performance objectives for resources, effort and schedule should be stated. GP 2.1.2 Plan the performance of the process to fulfill the identified objectives . ACHIEVEMENT b Plan(s) for the performance of the process are developed. The process performance cycle is defined. Key milestones for the performance of the process are established. Estimates for process performance attributes are determined and maintained. Process activities and tasks are defined. Schedule is defined and aligned with the approach to performing the process. Process work product reviews are planned. GP 2.1.3 Monitor the performance of the process against the plans. ACHIEVEMENT c VDA Quality Management Center 80 The process is performed according to the plan(s). Process performance is monitored to ensure planned results are achieved and to identify possible deviations GP 2.1. 4 Adjust the performance of the process. ACHIEVEMENT d Process performance issues are identi fied. Appropriate actions are taken when planned results and objectives are not achieved. The plan(s) are adjusted, as necessary. Rescheduling is performed as necessary. GP 2.1. 5 Define responsibilities and authorities for performing the process. ACHIEVEMENT e Responsibilities, commitments and authorities to perform the process are defined, assigned and communicated. Responsibilities and authorities to verify process work products are defined and assigned. The needs for process performance experien ce, knowledge and skills are defined. GP 2.1. 6 Identify, prepare, and make available resources to perform the process according to plan. ACHIEVEMENT f, g The human and infrastructure resources, necessary for performing the process are identified made ava ilable, allocated and used. The individuals performing and managing the process are prepared by training, mentoring, or coaching to execute their responsibilities. The information necessary to perform the process is identified and made available. GP 2.1. 7 Manage the interfaces between involved parties. ACHIEVEMENT h The individuals and groups involved in the process performance are determined. Responsibilities of the involved parties are assigned. Interfaces between the involved parties are managed. Communication is assured between the involved parties. Communication between the involved parties is effective. Generic resources Human resources with identified objectives, responsibilities and authorities ACHIEVEMENT e, f, h Facilities and infrastructure resources ACHIEVEMENT g, h Project planning, management and control tools, including time and cost reporting ACHIEVEMENT a, b, c, d Workflow management system ACHIEVEMENT d, f, g , h VDA Quality Management Center 81 Email andor other communication mecha nisms ACHIEVEMENT b, c, d, f, g , h Information andor experience repository ACHIEVEMENT b, d, e Problem and issues management mechanisms ACHIEVEMENT c 5.3.2. PA 2.2 Work product management process attribute The work product management process attribute is a measure of the extent to which the work products produced by the process are appropriately managed. As a result",
          "with the projects master plan that must occur for the treatment to be properly implemented Environmentinfrastructure: VDA Quality Management Center 103 WP ID WP Name WP Characteristics - describes any environmental or infrastructure requirements or impacts (e.g., safety or secur ity impacts that the treatment may have) Risk treatment plan change procedures and history 08-26 Documentation plan Identifies documents to be produced Defines the documentation activities during the life cycle of the software product or service Identifies any applicable standards and templates Defines requirements for documents Review and authorization practices Distribution of the documents Maintenance and disposal of the documents 08-27 Problem management plan Defines problem resolution activ ities including identification, recording, description and classification Problem resolution approach: evaluation and correction of the problem Defines problem tracking Mechanism to collect and distribute problem resolutions 08-28 Change management plan Defines change management activities including identification, recording, description, analysis and implementation Defines approach to track status of change requests Defines verification and validation activities Change approval and implication review 08-29 Improvement plan Improvement objectives derived from organizational business goals Organizational scope Process scope, the processes to be improved Key roles and responsibilities Appropriate milestones, review points and reporting mechanisms Activities to be performed to keep all those affected by the improvement program informed of progress 08-50 Test specification Test Design Specification Test Case Specification Test Procedure Specification Identification of test cases for regression testing Additi onally , for system integration: - identification of required system elements (hardware elements, wiring elements, settings for parameter s (such as application parameters or global variables ) , data bases, etc.) - necessary sequence or ordering identified for integrating the system elements 08-51 Technology monitoring plan No requirements additional to Plan (Generic) 08-52 Test plan Test Plan according to ISO29119 -3 Context : - projectTest sub -process - test item(s) - test scope - assumptions and constraints - stakeholder - testing communication Test strategy - identifies what needs there are to be satisfied VDA Quality Management Center 104 WP ID WP Name WP Characteristics - establishes the options and approach for satisfying the needs (black -box andor white -box-testing, boundary class test determination, regression testing strategy , etc.) - establishes the evaluation criteria against which the strategic options are evaluated - identifies any constraintsrisks and how these will be addressed - test design techniques - test completion criteria - test ending criteria - test start, abort and re -start criteria - metrics to be collected - test data requirements - retesting and regression testing - suspension and resumption criteria - deviations from the Organizational Test Strategy Test data requirements Test environment requirements Test sub -processes Test de liverables Testing activities and estimates 09-00 Policy Authorized Available to all personnel impacted by the policy Establishes practicesrules to be adhered to 09-03 Reuse policy Identification of reuse requirements Establishes the rules of reuse Documents the reuse adoption strategy including goals and objectives Identification of the reuse program Identification of the name of the reuse sponsor Identification of the reuse program participants Identification of the reuse steering function Identification of reuse program support functions 10-00 Process description A detailed description of the processprocedure which includes: - tailoring of the standard process (if applicable) - purpose of the process - outcomes of the process - task and activitie s to be performed and ordering of tasks - critical dependencies between task activities - expected time required to execute task - inputoutput work products - links between input and outputs work products Identifies process entry and exit criteria Identifies internal and external interfaces to the process Identifies process measures Identifies quality expectations Identifies functional roles and responsibilities Approved by authorized personnel 11-00 Product Is a resultdeliverable of the execution of a proce ss, includes services, systems (software and hardware) and processed materials Has elements that satisfy one or more aspects of a process purpose May be represented on various media (tangible and intangible) 11-03 Product release information Coverage for key elements (as appropriate to the application): Description of what is new or changed (including features removed) System information and requirements VDA Quality Management Center 105 WP ID WP Name WP Characteristics Identification of conversion programs and instructions Release numbering implementation may include: - the major release number - the feature release number - the defect repair number - the alpha or beta release; and the iteration within the alpha or beta release Identification of the component list (version identification included): - hardware software product elements, libraries, etc. - associated documentation list Newchanged parameter information ( e.g. for application parameters or global variables ) andor commands Backup and recovery information List of open known problems, faults, warning information, etc. Identification of verification and diagnostic procedures Technical support information Copyright and license information The release note may include an introduction, the environmental requirements, installation procedures, product invocation, new feature identification and a list of defect resolutions, known defects and workarounds 11-04 Product release package Includes the hardwaresoftwareproduct Includes and associated release elements such as: - system hardwaresoftwareproduct elements - associated customer documentation - application parameter definitions defined - command language defined - installation instructions - release letter 11-05 Software unit Follows established coding standards (as appropriate to the language and application): - commented - structured or optimized - meaningful naming conventions - parameter information identified - error codes defined - error messages descriptive and meaningful - formatting - indented, levels Follows data definition standards (as appropriate to the language and applica tion): - variables defined - data types defined - classes and inheritance structures defined - objects defined Entity relationships defined Database layouts are defined File structures and blocking are defined Data structures are defined Algorithms are defined Functional interfaces defined 11-06 System All elements of the product release are included Any required hardware Integrated product VDA Quality Management Center 106 WP ID WP Name WP Characteristics Customer documentation Fully configured set of the system elements: - application parameters defined - commands defined - data loaded or converted 11-07 Temporary solution Problem identification Release",
          "BSW_00348, SRS_BSW_00353, SRS_BSW_00361, SRS_BSW_00439, SRS_- BSW_00449, SRS_BSW_00308, SRS_BSW_00309, SRS_BSW_00330, SRS_- BSW_00010, SRS_BSW_00341, SRS_BSW_00334) 210 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager",
          "Specification of ECU State Manager AUTOSAR CP R20-11 Document TitleSpecification of ECU State Manager Document Owner AUTOSAR Document Responsibility AUTOSAR Document Identification No 78 Document Status published Part of AUTOSAR Standard Classic Platform Part of Standard Release R20-11 Document Change History Date Release Changed by Description 2020-11-30 R20-11AUTOSAR Release ManagementCorrected broken chapter structure EcuM_UserType handling improved Minor content changes, clarifications (multi-core, configuration, values) 2019-11-28 R19-11AUTOSAR Release ManagementNo content changes Changed Document Status from Final to published 2018-10-31 4.4.0AUTOSAR Release ManagementReworked BswM interface through EcuM_GoDownHaltPoll Removed EcuM fixed version references 2017-12-08 4.3.1AUTOSAR Release ManagementAdapt API Can_CheckWakeup Removed ConfigPtr parameter Removed Default error Removed unused DIO driver EcuM AUTOSAR service configure on service partition only 2016-11-30 4.3.0AUTOSAR Release ManagementPartial Network Cluster Support Initialization BSW scheduler slipt Added a driver initialization list Removed EcuM_StateType 1 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 2015-07-31 4.2.2AUTOSAR Release ManagementReworked slave core poll sequence Reviewed multicore shutdown synchronization Reclassified error types Editorial changes 2014-10-31 4.2.1AUTOSAR Release ManagementAdded switch configuration Defined initialization order for InitListZeroInitListOne Definition of the name pattern of c-init-data struct corrected Type conflicts solved Editorial changes 2014-03-31 4.1.3AUTOSAR Release ManagementEcuM errors reworked Inconsistencies between APIs and Interfaces resolved Type conflicts solved Editorial changes 2013-10-31 4.1.2AUTOSAR Release ManagementAdded API table for service interfaces Fixed traceability topics General clean-up of requirements (reviewed different interfaces, operations, descriptions and figures). Editorial changes 2 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 2013-03-15 4.1.1AUTOSAR AdministrationSpecified reset mode to use in case of pending wakeup events during shutdown Added callout for Reset Loop Detection Extended specification of parameter time of function EcuM_GetMostRecentShutdown Improved configuration description Added new APIs to enable asynchronous Trcv handling for CANFR Wakeup Adaption of EcuM Flex to support BSW modules distributed over multiple partitions Reclassified which Production Errors are Extended Production Errors Added possible error to operations of ClientServer-Interfaces, where no errors where defined Enhancement of configuration to initialize BSW modules by the EcuM Flex 2011-12-22 4.0.3AUTOSAR AdministrationFixed interoperability problems between EcuM and BswM Terminology of ECU State Manager Flexible more consistently described Modification of sleep sequences to minimize misses of wakeup interrupts 2010-09-30 3.1.5AUTOSAR AdministrationUpdated pseudo code for AUTOSAR Services Update startup procedure for multi core systems 2010-02-02 3.1.4AUTOSAR AdministrationRemoved state machine to accommodate mode-dependent scheduling Added Multi-Core support Added Alarm Clock feature Revised disclaimer 2008-08-13 3.1.1AUTOSAR AdministrationLegal disclaimer revised 3 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 2007-12-21 3.0.1AUTOSAR AdministrationFixed Wakeup mechanisms Included optional triggering of Watchdog Manager during Startup, Shutdown, and Sleep Extended startup sequence to have more flexibility and to directly initialize all other BSW modules Generated APIs from BSW UML model Generated configuration from Meta Model Document meta information extended Small layout adaptations made 2007-01-24 2.1.15AUTOSAR AdministrationCorrected startup flow and wakeup concept. Added specification for AUTOSAR ports. Modified configuration for compliance with variant management. Added new API services. Legal disclaimer revised Release Notes added Advice for users revised Revision Information added 2006-05-16 2.0AUTOSAR Administration Initial Release 4 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 Disclaimer This work (specification andor software implementation) and the material contained in it, as released by AUTOSAR, is for the purpose of information only. AUTOSAR and the companies that have contributed to it shall not be liable for any use of the work. The material contained in this work is protected by copyright and other types of intel- lectual property rights. The commercial exploitation of the material contained in this work requires a license to such intellectual property rights. This work may be utilized or reproduced without any modification, in any form or by any means, for informational purposes only. For any other purpose, no part of the work may be utilized or reproduced, in any form or by any means, without permission in writing from the publisher. The work has been developed for automotive applications only. It has neither been developed, nor tested for non-automotive applications. The word AUTOSAR and the AUTOSAR logo are registered trademarks. 5 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 Table of Contents 1 Introduction and Functional Overview 13 1.1 Backwards Compatibility to Previous ECU Manager Module Versions . 14 2 Definitions and Abbreviations 15 2.1 Definitions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 15 2.2 Abbreviations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 15 3 Related documentation 17 3.1 Input documents related standards and norms . . . . . . . . . . . . 17 3.2 Related specification . . . . . . . . . . . . . . . . . . . . . . . . . . . . 17 4 Constraints and Assumptions 18 4.1 Limitations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 18 4.2 Hardware Requirements . . . . . . . . . . . . . . . . . . . . . . . . . . 18 4.3 Applicability to car domains . . . . . . . . . . . . . . . . . . . . . . . . 18 5 Dependencies to other modules 19 5.1 SPAL Modules . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 19 5.1.1 MCU Driver . . . . . . . . . .",
          "are finished processing, the cores must be synchronized before entering SHUTDOWN. The BswM (which is distributed over all partitions) ascertains that the ECU should be shut down and synchronizes with each BwsM in the ECU. All BswMs induce de- initialization of all the partitions BSWs, SWCs and CDDs and send appropriate signals to the other BswMs to indicate their readiness to shut down. 78 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 For a shutdown of the ECU, the BswM (which lies in the same partition of the master EcuM) ultimately calls GoOff on the master core which distributes that request to all slave cores. The master EcuM de-initializes the BswM, and the SchM. The EcuMs on the slave cores de-initialize their SchM and BswM and then send a signal to indicate that the core is ready for ShutdownOS (again, see section section 7.9.3 Master Core - Slave Core Signalling for details). The master EcuM waits for the signal from each slave core EcuM and then initiates shutdown as usual on the master core (the master EcuM calls ShutdownAllCores , and the ECU is put to bed with the global shutdown hook) 79 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 7.9.6.1 Master Core SHUTDOWN module EcuMmodule SchMmodule BswMmodule McOsIntegration Code opt Pending wakeup events?loop over every BswM running in this core loop FOR all configured cores EcuM_OnGoOffOne() ShutdownAllCores(StatusType)EcuM_GetPendingWakeupEvents(EcuM_WakeupSourceType)BswM_Deinit() WaitEvent(Mask)SchM_Deinit()GetCoreID(CoreIdType) EcuM_SelectShutdownTarget(Std_ReturnType, EcuM_ShutdownTargetType, EcuM_ShutdownModeType) Figure 7.23: Master Core OffPreOS Sequence 80 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 SWS_EcuM_04020 d Integration Code module EcuMmodule McOs alt Shutdown Target Reset OffGetCoreID(CoreIdType) EcuM_AL_SwitchOff()EcuM_AL_Reset(EcuM_ResetType)EcuM_OnGoOffTwo() Figure 7.24: Master Core OffPostOS Sequencec () 81 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 7.9.6.2 Slave Core SHUTDOWN module EcuMmodule McOsmodule :SchMIntegration Code module BswM loop over every BswM running in this core SetEvent(TaskId, Mask)GetCoreID(CoreIdType) SchM_Deinit()BswM_Deinit()EcuM_OnGoOffOne() Figure 7.25: Slave Core OffPreOS Sequence SWS_EcuM_04022 d 82 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 module EcuMmodule McOsIntegration Code EcuM_OnGoOffTwo()GetCoreID(CoreIdType) Figure 7.26: Slave Core OffPostOS Sequencec () 7.9.7 SLEEP Phase When the shutdown target Sleep is requested, all cores are put to sleep simultaneously. The MCU must issue a halt for each core. As task timing and priority are local to a core in the OS, neither the scheduler nor the RTE must be synchronized after a halt. Because the master core could issue the MCU halt before all slave cores are finished processing, the cores must be synchronized before entering GoHalt. The BswMs ascertain that sleep should be initiated and distribute an appropriate ECU mode to each core. The BSWs, SWCs and CDDs on the slave cores must be informed by their partition local BswM, de-initialize appropriately and send appropriate mode requests to the BswM to indicate their readiness. If the ECU is put to sleep, the halts must be synchronized so that all slave cores are halted before the master core computes the checksum. The ECU Manager module on the master core uses the same signal mechanism as for synchronizing cores on Go Off. Similarly, the ECU Manager module on the master core must validate the checksum before releasing the slave cores from the halt state 83 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 7.9.7.1 Master Core SLEEP SWS_EcuM_04023 d module EcuMmodule OsIntegration Code module :BswM GetCoreID(CoreIdType) GetResource(RES_AUTOSAR_ECUM_core)EcuM_EnableWakeupSources(EcuM_WakeupSourceType)BswM_EcuM_CurrentWakeup(sources, ECUM_WKSTATUS_NONE ) Figure 7.27: Master Core GoSleep Sequencec () SWS_EcuM_04024 d 84 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 Integration Code module :BswMPeripheral Wakeup Sourcemodule Mcumodule EcuMmodule Wakeup Sourcemodule Os HALT opt RAM check failed alt Validation Needed Yes Noalt AlarmClock Service Present EcuM_AlarmClock only pending event AND Alarm not e xpired EcuM_GenerateRamHash() EcuM_CheckRamHash(uint8)Return from interrupt()Wait for all SlaveCores to be ready to sleep() EcuM_ErrorHook(uint16)Mcu_SetMode()EcuM_SetWakeupEvent(EcuM_WakeupSourceType)Mcu_SetMode(Mcu_ModeType) Signal all SlaveCores to continue()DisableAllInterrupts()Module_CheckWakeup() BswM_EcuM_CurrentWakeup(Sources, ECUM_WKSTATUS_VALIDATED)Mcu_SetMode(Mcu_ModeType)Interrupt() EcuM_GenerateRamHash()EcuM_CheckWakeup(EcuM_WakeupSourceType) EnableAllInterrupts()DisableAllInterrupts() BswM_EcuM_CurrentWakeup(sources, ECUM_WKSTATUS_PENDING)Activate PLL() Figure 7.28: Master Core Halt Sequence 85 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 c(SRS_ModeMgm_09239) SWS_EcuM_04025 d module EcuMmodule :BswMIntegration Code module Mcumodule Wakeup Sourcemodule Os loop WHILE no pendingvalidated events loop FOR all wakeup sources that need polling opt Wakeup detected alt Yes No ! EnableAllInterrupts() Signal SlaveCores to continue()EcuM_SetWakeupEvent(EcuM_WakeupSourceType) EcuM_GetPendingWakeupEvents(EcuM_WakeupSourceType)EcuM_SleepActivity() Module_CheckWakeup()Mcu_SetMode (Mcu_ModeType) BswMEcuM_CurrentWakeup(sources, ECUM_WKSTATUS_VALIDATED)DisableAllInterrupts() BswM_EcuM_CurrentWakeup(sources, ECUM_WKSTATUS_PENDING)EcuM_CheckWakeup(EcuM_WakeupSourceType) Figure 7.29: Master Core Poll Sequencec () SWS_EcuM_04026 d 86 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 module Mcumodule Osmodule EcuMIntegration Code Mcu_SetMode(Mcu_ModeType) EcuM_GetPendingWakeupEvents(EcuM_WakeupSourceType) ReleaseResource(RES_AUTOSAR_ECUM_core)EcuM_DisableWakeupSources(EcuM_WakeupSourceType)EnableAllInterrupts()DisableAllInterrupts() EcuM_AL_DriverRestart() Figure 7.30: Master Core WakeupRestart Sequencec () 7.9.7.2 Slave Core SLEEP SWS_EcuM_04027 d 87 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 module EcuMmodule Osmodule :BswMIntegration Code GetCoreID(CoreIdType) EcuM_EnableWakeupSources(EcuM_WakeupSourceType) GetResource(RES_AUTOSAR_ECUM_core)BswM_EcuM_CurrentWakeup(sources, ECUM_WKSTATUS_NONE ) Figure 7.31: Slave Core GoSleep Sequencec () SWS_EcuM_04028 d 88 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 Integration Code module Wakeup Sourcemodule EcuMmodule McuPeripheral Wakeup Sourcemodule Osmodule :BswM HALT alt Validation Needed Yes NoMcu_SetMode()EcuM_SetWakeupEvent(EcuM_WakeupSourceType)Interrupt()Signal MasterCore that Slave is ready to sleep() Return from interrupt()EcuM_CheckWakeup(EcuM_WakeupSourceType) BswM_EcuM_CurrentState(ECUM_WKSTATUS_PENDING) Wait for MasterCore to continue()DisableAllInterrupts() BswM_EcuM_CurrentWakeup(Sources, ECUM_WKSTATUS_VALI DATED)Module_CheckWakeup() EnableAllInterrupts()Mcu_SetMode(Mcu_ModeType) Figure 7.32: Slave Core Halt Sequencec () SWS_EcuM_04029 d 89 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 module EcuMmodule Wakeup Sourcemodule McuIntegration Code module Osmodule BswM loop WHILE no pendingvalidated events loop FOR all wakeup sources that need polling opt Wakeup detected alt Yes No ! Mcu_SetMode(Mcu_ModeType) Wait for signal from MasterCore to continue()EcuM_SetWakeupEvent(EcuM_WakeupSourceType)Module_CheckWakeup() BswM_EcuM_CurrentWakeup(sources, ECUM_WKSTATUS_PEND ING)EcuM_GetPendingWakeupEvents(EcuM_WakeupSourceType)EnableAllInterrupts() EcuM_CheckWakeup(EcuM_WakeupSourceType)DisableAllInterrupts() BswM_EcuM_CurrentWakeup(sources, ECUM_WKSTATUS_VALI DATED)EcuM_SleepActivity() Figure 7.33: Slave Core Poll Sequencec () SWS_EcuM_04030 d 90 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 module Mcumodule Osmodule EcuMIntegration Code Mcu_SetMode(Mcu_ModeType)DisableAllInterrupts() ReleaseResource(RES_AUTOSAR_ECUM_core)EcuM_DisableWakeupSources(EcuM_WakeupSourceType)EnableAllInterrupts() Figure 7.34: Slave Core WakeupRestart Sequencec () 7.9.8 Runnables and Entry points 7.9.8.1 Internal behavior SWS_EcuM_03018 dThe definition of the internal behavior of the the ECU Manager module shall be as follows. This detailed description is only needed for the configura- tion",
          "of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 module Osmodule Mcumodule EcuMIntegration Code opt Configuration data inconsistent EcuM_LoopDetection()EcuM_AL_DriverInitOne()Check consistency of configuration data()EcuM_AL_DriverInitZero() EcuM_DeterminePbConfiguration(const EcuM_ConfigType) StartOS(ECUM_DEFAULT_APP_MODE)Mcu_GetResetReason()EcuM_ErrorHook(ECUM_E_CONFIGURATION_DATA_INCONSISTEN T) Mcu_GetResetReason(Mcu_ResetType) EcuM_SelectShutdownTarget(Std_ReturnType, EcuM_ShutdownTargetType, EcuM_ShutdownModeType)Map reset reason to wakeup source() Figure 7.4: StartPreOS Sequence 37 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 The StartPreOS Sequence is intended to prepare the ECU to initialize the OS and should be kept as short as possible. Drivers should be initialised in the UP phase when possible and the callouts should also be kept short. Interrupts should not be used during this sequence. If interrupts have to be used, only category I interrupts are allowed in the StartPreOS Sequence 13. Initialization of drivers and hardware abstraction modules is not strictly defined by the ECU Manager. Two callouts EcuM_AL_DriverInitZero (see SWS_EcuM_02905 ) and EcuM_AL_DriverInitOne (see SWS_EcuM_02907 ) are provided to define the init blocks 0 and I. These blocks contain the initialization activities associated with the StartPreOS sequence. MCU_Init does not provide complete MCU initialization. Additionally, hardware depen- dent steps have to be executed and must be defined at system design time. These steps are supposed to be taken within the EcuM_AL_DriverInitZero (seeEcuM_- AL_DriverInitZero , SWS_EcuM_02905 ) or EcuM_AL_DriverInitOne call- outs (see EcuM_AL_DriverInitOne , SWS_EcuM_02907 ). Details can be found in the Specification of MCU Driver 10. SWS_EcuM_02181 dThe ECU Manager module shall call EcuM_GetValidated- WakeupEvents with the configured default shutdown target ( EcuMDefaultShut- downTarget ).c() See section 7.7 Shutdown Targets. SWS_EcuM_02603 dThe StartPreOS Sequence shall initialize all basic software modules that are needed to start the OS. c() 7.3.3 Activities in the StartPostOS Sequence StartPostOS Sequence Initialization Activity Comment Opt. Start BSW Scheduler no Init BSW Mode Manager no Init BSW SchedulerInitialize the semaphores for critical sections used by BSW modulesno Start Scheduler Timing Start periodical events for BSWSWCsno Table 7.2: StartPostOS Sequence Note to column Opt. : Optional activities can be switched on or off by configuration. See section 10.1 Common Containers and configuration parameters for details. SWS_EcuM_02932 dWhen activated through the EcuM_StartupTwo (see SWS_EcuM_02838 ) function, the ECU Manager module shall perform the actions in StartPostOS Sequence (see table 7.2). c(SRS_ModeMgm_09113) 3Category II interrupts require a running OS while category I interrupts do not. AUTOSAR OS re- quires each interrupt vector to be exclusively put into one category. 38 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 module SchMmodule EcuMmodule BswM SchM_Start(): Std_ReturnType SchM_StartTiming(const SchM_ConfigType)SchM_Init(const SchM_ConfigType)BswM_Init(const BswM_ConfigType ) Figure 7.5: StartPostOS Sequence 7.3.4 Checking Configuration Consistency 7.3.4.1 The Necessity for Checking Configuration Consistency in the ECU Man- ager In an AUTOSAR ECU several configuration parameters are set and put into the ECU at different times. Pre-compile parameters are set, inserted into the generated source code and compiled into object code. When the source code has been compiled, link- time parameters are set, compiled, and linked with the previously configured object code into an image that is put into the ECU. Finally, post-build parameters are set, compiled, linked, and put into the ECU at a different time. All these parameters must match to obtain a stable ECU. 39 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 Figure 7.6: BSW Configuration Steps The configuration tool can check the consistency of configuration time parameters it- self. The compiler may detect parameter errors at compilation time and the linker may find additional errors at link time. Unfortunately, finding configuration errors in post- build parameters is very difficult. This can only be achieved by checking that the pre-compile and link-time parameter settings used when compiling the code are exactly the same as the pre-compile and link-time parameter settings used when configuring and com- piling the post-build parameters. This can only be done at run-time. Explanation for SWS_EcuM_02796: The ECU Manager module checks the consis- tency once before initializing the first BSW module to avoid multiple checks scattered over the different BSW modules. This also implies that: SWS_EcuM_02796 dThe ECU Manager module shall not only check the consistency of its own parameters but of all post-build configurable BSW modules before initializing the first BSW module. c() The ECU Manager Configuration Tool must compute a hash value over all pre-compile and link-time configuration parameters of all BSW modules and store the value in the link-time ECUM_CONFIGCONSISTENCY_HASH (seeEcuMConfigConsistencyHash ) configuration parameter. The hash value is necessary for two reasons. First, the pre- compile and link-time parameters are not accessible at run-time. Second, the check 40 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 must be very efficient at run-time. Comparing hundreds of parameters would cause an unacceptable delay in the ECU startup process. The ECU Manager module Configuration Tool must in turn put the computed ECUM_ CONFIGCONSISTENCY_HASH value into the field in the EcuM_ConfigType structure which contains the root of all post-build configuration parameters. SWS_EcuM_02798 dThe ECU Manager module shall check in EcuM_Init (see SWS_EcuM_02811 ) that the field in the structure is equal to the value of ECUM_ CONFIGCONSISTENCY_HASH .c() By computing hash values at configuration time and comparing them at run-time the EcuM code can be very efficient and is furthermore independent of a particular hash computation algorithm. This allows the use of complex hash computation algorithms, e.g. cryptographically strong hash functions. Note that the same hash algorithm can be used to produce the value for the post-build configuration identifier in the EcuM_ConfigType structure. Then the hash algorithm is applied to the post-build parameters instead of the pre-compile and link-time param- eters. SWS_EcuM_02799 dThe hash computation algorithm used to compute a hash value over all pre-compile and link-time configuration parameters of all BSW modules shall always produce the same hash value for the same set of configuration data regardless of the order of configuration parameters in the XML files. c() 7.3.4.2 Example Hash Computation Algorithm Note: This chapter is not normative. It describes one possible way to compute hash values. A simple",
          "function defined in a common API in the Basis-SWSWS_EcuM_NA_00000 SRS_BSW_00172 The scheduling strategy that is built inside the Basic Software Modules shall be compatible with the strategy used in the systemSWS_EcuM_02836 SRS_BSW_00307 Global variables naming convention SWS_EcuM_NA_00000 SRS_BSW_00308 AUTOSAR Basic Software Modules shall not define global data in their header files, but in the C fileSWS_EcuM_NA_00000 SRS_BSW_00309 All AUTOSAR Basic Software Modules shall indicate all global data with read-only purposes by explicitly assigning the const keywordSWS_EcuM_NA_00000 SRS_BSW_00314 All internal driver modules shall separate the interrupt frame definition from the service routineSWS_EcuM_NA_00000 5 23 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 4 Requirement Description Satisfied by SRS_BSW_00323 All AUTOSAR Basic Software Modules shall check passed API parameters for validitySWS_EcuM_03009 SRS_BSW_00325 The runtime of interrupt service routines and functions that are running in interrupt context shall be kept shortSWS_EcuM_NA_00000 SRS_BSW_00327 Error values naming convention SWS_EcuM_04032 SRS_BSW_00330 It shall be allowed to use macros instead of functions where source code is used and runtime is criticalSWS_EcuM_NA_00000 SRS_BSW_00331 All Basic Software Modules shall strictly separate error and status informationSWS_EcuM_91005 SRS_BSW_00333 For each callback function it shall be specified if it is called from interrupt context or notSWS_EcuM_02171 SWS_EcuM_02345 SRS_BSW_00334 All Basic Software Modules shall provide an XML file that contains the meta dataSWS_EcuM_NA_00000 SRS_BSW_00337 Classification of development errors SWS_EcuM_04032 SRS_BSW_00339 Reporting of production relevant error statusSWS_EcuM_02987 SRS_BSW_00341 Module documentation shall contains all needed informationsSWS_EcuM_NA_00000 SRS_BSW_00347 A Naming seperation of different instances of BSW drivers shall be in placeSWS_EcuM_NA_00000 SRS_BSW_00348 All AUTOSAR standard types and constants shall be placed and organized in a standard type header fileSWS_EcuM_NA_00000 SRS_BSW_00350 All AUTOSAR Basic Software Modules shall allow the enabling disabling of detection and reporting of development errors.SWS_EcuM_04032 SRS_BSW_00353 All integer type definitions of target and compiler specific scope shall be placed and organized in a single type headerSWS_EcuM_NA_00000 SRS_BSW_00358 The return type of init() functions implemented by AUTOSAR Basic Software Modules shall be voidSWS_EcuM_02811 SRS_BSW_00359 All AUTOSAR Basic Software Modules callback functions shall avoid return types other than void if possibleSWS_EcuM_02826 SWS_EcuM_02829 SRS_BSW_00360 AUTOSAR Basic Software Modules callback functions are allowed to have parametersSWS_EcuM_02826 SWS_EcuM_02829 SRS_BSW_00361 All mappings of not standardized keywords of compiler specific scope shall be placed and organized in a compiler specific type and keyword headerSWS_EcuM_NA_00000 5 24 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 4 Requirement Description Satisfied by SRS_BSW_00373 The main processing function of each AUTOSAR Basic Software Module shall be named according the defined conventionSWS_EcuM_02837 SRS_BSW_00385 List possible error notifications SWS_EcuM_04032 SRS_BSW_00406 A static status variable denoting if a BSW module is initialized shall be initialized with value 0 before any APIs of the BSW module is calledSWS_EcuM_NA_00000 SRS_BSW_00407 Each BSW module shall provide a function to read out the version information of a dedicated module implementationSWS_EcuM_02813 SRS_BSW_00410 Compiler switches shall have defined valuesSWS_EcuM_NA_00000 SRS_BSW_00411 All AUTOSAR Basic Software Modules shall apply a naming rule for enablingdisabling the existence of the APISWS_EcuM_02813 SRS_BSW_00413 An index-based accessing of the instances of BSW modules shall be doneSWS_EcuM_NA_00000 SRS_BSW_00414 Init functions shall have a pointer to a configuration structure as single parameterSWS_EcuM_02811 SRS_BSW_00415 Interfaces which are provided exclusively for one module shall be separated into a dedicated header fileSWS_EcuM_NA_00000 SRS_BSW_00416 The sequence of modules to be initialized shall be configurableSWS_EcuM_02559 SRS_BSW_00417 Software which is not part of the SW-C shall report error events only after the DEM is fully operational.SWS_EcuM_NA_00000 SRS_BSW_00422 Pre-de-bouncing of error status information is done within the DEMSWS_EcuM_NA_00000 SRS_BSW_00425 The BSW module description template shall provide means to model the defined trigger conditions of schedulable objectsSWS_EcuM_02837 SRS_BSW_00426 BSW Modules shall ensure data consistency of data which is shared between BSW modulesSWS_EcuM_NA_00000 SRS_BSW_00427 ISR functions shall be defined and documented in the BSW module description templateSWS_EcuM_NA_00000 SRS_BSW_00432 Modules should have separate main processing functions for readreceive and writetransmit data pathSWS_EcuM_NA_00000 SRS_BSW_00437 Memory mapping shall provide the possibility to define RAM segments which are not to be initialized during startupSWS_EcuM_NA_00000 SRS_BSW_00439 Enable BSW modules to handle interruptsSWS_EcuM_NA_00000 5 25 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 4 Requirement Description Satisfied by SRS_BSW_00440 The callback function invocation by the BSW module shall follow the signature provided by RTE to invoke servers via Rte_Call APISWS_EcuM_02826 SWS_EcuM_02829 SRS_BSW_00449 BSW Service APIs used by Autosar Application Software shall return a Std_ReturnTypeSWS_EcuM_NA_00000 SRS_BSW_00450 A Main function of a un-initialized module shall return immediatelySWS_EcuM_NA_00000 SRS_BSW_00453 BSW Modules shall be harmonized SWS_EcuM_NA_00000 SRS_ModeMgm_- 09072ECU shutdown shall be forced SWS_EcuM_03022 SRS_ModeMgm_- 09098Storing the wake-up reasons shall be availableSWS_EcuM_02826 SRS_ModeMgm_- 09100Selection of wake-up sources shall be configurableSWS_EcuM_02389 SRS_ModeMgm_- 09104ECU State Manager shall take over control after OS shutdownSWS_EcuM_02952 SWS_EcuM_02953 SRS_ModeMgm_- 09113Initialization of Basic Software modules shall be doneSWS_EcuM_02932 SRS_ModeMgm_- 09114Startinginvoking the shutdown process shall be providedSWS_EcuM_00624 SWS_EcuM_02185 SWS_EcuM_02585 SWS_EcuM_02812 SWS_EcuM_02822 SRS_ModeMgm_- 09116Requesting and releasing the RUN state shall be providedSWS_EcuM_04115 SWS_EcuM_04116 SWS_EcuM_04117 SWS_EcuM_04118 SWS_EcuM_04119 SWS_EcuM_04120 SWS_EcuM_04121 SWS_EcuM_04123 SWS_EcuM_04125 SWS_EcuM_04126 SWS_EcuM_04127 SWS_EcuM_04128 SWS_EcuM_04129 SWS_EcuM_04130 SWS_EcuM_04132 SRS_ModeMgm_- 09126An API for querying the wake-up reason shall be providedSWS_EcuM_02827 SWS_EcuM_02828 SWS_EcuM_02830 SWS_EcuM_02831 SRS_ModeMgm_- 09127The ECU State Manager shall de-initialize Basic Software modules where appropriate during the shutdown processSWS_EcuM_03021 SRS_ModeMgm_- 09128Several shutdown targets shall be supportedSWS_EcuM_02822 SWS_EcuM_02824 SWS_EcuM_02825 SRS_ModeMgm_- 09136The ECU State Manager shall be the receiver of all wake-up eventsSWS_EcuM_04091 SRS_ModeMgm_- 09186Alarm Clock shall be active while the ECU is poweredSWS_EcuM_04054 SWS_EcuM_04055 SWS_EcuM_04056 SWS_EcuM_04057 SWS_EcuM_04058 SWS_EcuM_04059 SWS_EcuM_04060 SRS_ModeMgm_- 09187In Case of wakeup, all the alarm clock shall be canceledSWS_EcuM_04009 SRS_ModeMgm_- 09188In Case of startup, all the alarm clock shall be canceledSWS_EcuM_04010 SRS_ModeMgm_- 09190The alarm clock service shall allow setting an alarm relative to the current time using a time resolution of secondsSWS_EcuM_04054 5 26 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager Specification of ECU State Manager AUTOSAR CP R20-11 4 Requirement Description Satisfied by SRS_ModeMgm_- 09194The alarm clock service shall allow setting the clockSWS_EcuM_04064 SRS_ModeMgm_- 09199The alarm clock service shall allow setting an alarm absolute by using an absolute time with a resolution of secondsSWS_EcuM_04057 SRS_ModeMgm_- 09234The EcuM shall handle the initialization of Basic Software modulesSWS_EcuM_02559",
          "Quality Management in the Automotive Industry Automotive SPICE Process Reference Model Process Assessment Model Version 3. 1 Title: Automotive SPICE Process Assessment Reference Model Author(s): VDA QMC Working Group 13 Automotive SIG Version: 3.1 Date: 2017-11-01 Status: PUBLISHED Confidentiality: Public Revision ID: 656 VDA Quality Management Center 2 Copyright n otice This document is a revision of the Automotive SPICE process assessment model 2.5 and the process reference model 4.5, which has been developed under the Automotive SPICE initiative by consensus of the car manufacturers within the Automotive Special Interest Group (SIG), a joint special interest group of Automotive OEM, the Procurement Forum and t he SPICE User Group. It has been revised by the Working Group 13 of the Quality Management Center (QMC) in the German Association of the Automotive Industry with the representation of members of the Automotive Specia l Interest Group, and with the agreement of the SPICE User Group. This agreement is based on a validation of the Automotive SPICE 3.0 version regarding any ISO copyright infringement and the st atements given from VDA QMC to t he S PICE User Group regarding t he current and future development of Automotive SPICE. This document reproduces relevant material from: ISOIEC 33020:2015 Information technology -- Process assessment -- Process measurement framework for assessment of process capability ISOIEC 33020 :2015 provides the following copyright release statement : Users of this International Standard may reproduce subclauses 5.2, 5.3, 5.4 and 5.6 as part of any process assessment model or maturity model so that it can be used for its intended purpose. ISOIEC 1 5504 -5:2006 Information Technology Process assessment Part 5: An exemplar Process Assessment Model ISOIEC 15504 -5:2006 provides the following copyright release statement : Users of this part of ISOIEC 15504 may freely reproduce the detailed descri ptions contained in the exemplar assessment model as part of any tool or other material to support the performance of process assessments, so that it can be used for its intended purpose. Relevant material from one of the mentioned standards is incorporated under the copyright release notice . Acknowledgemen t The VDA, the VDA QMC and the Working Group 13 explicitly acknowledge the high quality work carried out by the members of the Automoti ve Special Interest Group. We would like to thank all involved people, who have contributed to the development and publication of Automotive SPICE. VDA Quality Management Center 3 Derivative w orks You may not alter, transform, or build upon this work without the prior consent of both the SPICE User Group and the VDA Quality Management Center . Such consent may be given provided ISO copyright is not infringed. The detailed descriptions contained in this document may be incorporated as part of any tool or other material to support the perf ormance of process assessments, so that this process assessment model can be used for its intended purpose, provided that any such material is not offered for sale. All distribution of derivative works shall be made at no cost to the recipient. Distribution The Automotive SPICE process a ssessment model may only be obtained by download from the www.automotivespice.com web site. It is not permitted for the recipient to further distribute the document. Change r equests Any problems or change requests should be reported through the defined mechanism at the www.automotivespice.com web site. Trademark Automotive SPICE is a registered trademark of the Verband der Automobilindustrie e.V. (VDA) For further information about Automotive SPICE visit www.automotivespice.com . VDA Quality Management Center 4 Document history Version Date By Notes 2.0 2005 -05-04 AutoSIG SUG DRAFT RELEASE, pending final editorial review 2.1 2005 -06-24 AutoSIG SUG Editorial review comments implemented Updated to reflect changes in FDIS 15504 -5 2.2 2005 -08-21 AutoSIG SUG Final checks implemented: FORMAL RELEASE 2.3 2007 -05-05 AutoSIG SUG Revision following CCB: FORMAL RELEASE 2.4 2008 -08-01 AutoSIG SUG Revision following CCB: FORMAL RELEASE 2.5 2010 -05-10 AutoSIG SUG Revision following CCB: FORMAL RELEASE 3.0 2015 -07-16 VDA QMC WG13 Changes: See release notes 3.1 2017-11-01 VDA QMC WG13 Changes: See www.automotivespice.com Release n otes Version 3.0 of the process assessment model incorporates the following major changes : Chapter 1 Editorial adaption to ISOIEC 330xx series, Notes regarding combined PRMPAM in this document Chapter 2 Adaption to ISOIEC 330xx series Chapter 3 Text optimized for better understanding and adapted to ISOIEC 330xx series . Chapter 4 Renaming ENG to SYS SWE, Structure of old ENG Processes changed, Rework of AS 4.5 process reference model and AS 2.5 process performance indicators focusing on a set of highly significant processes assessed within the automotive industry ( VDA Scope). Chapter 5 Adaption based on AS 2.5 to the measurement f ramework of ISOIEC 33020 Annex A Conformity statement adapted to ISOIEC 33004 Annex B Modifications on work produ ct characteristics according to the changes in chapter 4. Annex C Update to recent standards. Introduction of specific terms used in AS 3.0 Annex D Added the major concepts used for AS 3.0 , incorporated Annex E of AS 2.5 Annex E Updated references to other standards Version 3.1 of the process assessment model incorporates minor changes. Please refer to www.automotivespice.com for a detailed change log. VDA Quality Management Center 5 Table of contents Copyright notice ................................ ................................ ................................ .............................. 2 Acknowledgement ................................ ................................ ................................ ........................... 2 Derivative works ................................ ................................ ................................ .............................. 3 Distribution ................................ ................................ ................................ ................................ ...... 3 Change requests ................................ ................................ ................................ ............................. 3 Trademark ................................ ................................ ................................ ................................ ...... 3 Document history ................................ ................................ ................................ ............................ 4 Release notes ................................ ................................ ................................ ................................ . 4 Table of contents ................................ ................................ ................................ ............................ 5 List of Figures ................................ ................................ ................................ ................................ . 7 List of Tables ................................ ................................ ................................ ................................ .. 7 1. Introduction ................................ ................................ ................................ .............................. 8 1.1. Scope ................................ ................................ ................................ .............................. 8 1.2. Terminology ................................ ................................ ................................ ..................... 9 1.3. Abbrevi ations ................................ ................................ ................................ ................... 9 2. Statement of compliance ................................ ................................ ................................ .......... 9 3. Process capability determination ................................ ................................ ............................",
          "a process execution: - key elements to be represented in the work product VDA Quality Management Center 119 Annex C Terminology Annex C lists the applicable terminology references from ISOIECIEEE 24765 and ISOIECIEEE 29119. It also provide s terms which are specifically defined within Automotive SPICE. Some of these definitions are based on ISOIECIEEE 24765. Table C.1 Terminology Term Origin Description Acceptance testing ISOIECIEEE 24765 Formal testing conducted to enable a user, customer, or authorized entity to determine whether to accept a system or component. Application parameter Automotive SPICE V3.1 An application parameter is a parameter containing data applied to the system or software functions, behavior or properties. T he notion of application parameter is expressed in two ways: firstly, the logical specification (including name, description, unit, value domain or threshold values or characteristic curves, respectively), and, secondly, the actual quantitative data value it receives by means of data application. Architecture element Automotive SPICE V3.1 Result of the decomposition of the architecture on system and software level: The system is decomposed into elements of the system architecture across appropriate hierarchical levels. The software is decomposed into elements of the software architecture across appropriate hierarchical levels down to the software components (the lowest level elements of the software architecture). Baseline ISOIECIEEE 24765 A speci fication or product that has been formally reviewed and agreed upon, that thereafter serves as the basis for further development, and can be changed only through formal change control procedures. Black -box testing Automotive SPICE V3.1 Method of requireme nt testing where tests are developed without knowledge of the internal structure and mechanisms of the tested item. Code review Automotive SPICE V3.1 A check of the code by one or more qualified persons to determine its suitability for its intended use an d identify discrepancies from specifications and standards. Coding ISOIECIEEE 24765 The transforming of logic and data from design specifications (design descriptions) into programming language. Consistency Automotive SPICE V3.1 Consistency addresses content and semantics and ensures that work products are not in contradiction to each other. Consistency is supported by bidirectional traceability. Defect FAULT Dynamic analysis ISOIECIEEE 24765 A process of evaluating a system or component based on its behavior during execution. Element Automotive SPICE V3.1 Elements are all structural objects on architectural and design level on the left side of the V. Such elements can be further decomposed into more fine -grained sub -elements of the architecture or design across appropriate hierarchical levels. Error ISOIECIEEE 24765 The difference between a computed, observed, or measured value or condition and the true, specified, or theoretically correct value or condition. VDA Quality Management Center 120 Fault ISOIECIEEE 24765 A manifestation of an error in software. Functional requirement ISOIECIEEE 24765 A statement that identifies what a product or process must accomplish to produce required behavior andor results. Functional specification ISOIECIEEE 24765 A document that specifies the functions that a system or component must perform. Often part of a requirements specification. Functional testing ISOIECIEEE 24765 Testing conducted to evaluate the compliance of a system or component with specified functional requirements. Hardware ISOIECIEEE 24765 Physical equipment used to process, store, or transmit computer programs or data. Hardware item Automotive SPICE V3.1 A physical representation of a hardware element. Integration Automotive SPICE V3.1 A process of combining items to larger items up to an overall system. Integrated software item Automotive SPICE V3.1 A set of software units or items that are integrated into a larger assembly for the purpose of integration testing. Integration testing Automotive SPICE V3.1 Testing in which items (software items, hardware items, or system items) are combined and tested to evaluate the interaction among them. Integrated system item Automotive SPICE V3.1 A set of items that are integrated into a larger assembly for the purpose of integration testing. Quality assurance ISOIECIEEE 24765 A planned and systematic pattern of all actions necessary to provide adequate confidence that an item or product conforms to established technical requirements. Regress ion testing Automotive SPICE V3.1 Selective retesting of a system or item to verify that modifications have not caused unintended effects and that the system or item still complies with its specified requirements. Requirement Automotive SPICE V3.1 A prope rty or capability that must be achieved or possessed by a system, system item, product, or service to satisfy a contract, standard, specification or other formally imposed documents. Requirements specification Automotive SPICE V3.1 A document that specifies the requirements for a system or item. Typically included are functional requirements, performance requirements, interface requirements, design requirements, and development standards. Software ISOIECIEEE 24765 Computer programs, procedures, and possibly associated documentation and data pertaining to the operation of a computer system. Software component Automotive SPICE V3.1 In Automotive SPICE V3.1 the term software component is used for the lowest level elements of the software architec ture for which finally the detailed design is defined. A software component consists of one or more software units. ARCHITECTURE ELEMENT , UNIT Software element ARCHITECTURE ELEMENT Software item ISOIECIEEE 24765 Identifiable part of a software product. Software unit UNIT VDA Quality Management Center 121 Static analysis Automotive SPICE V3.1 A process of evaluating an item based on its form, structure, content, or documentation. System Automotive SPICE V3.1 A collection of interacting items organized to accompli sh a specific function or set of functions within a specific environment. System item Automotive SPICE V3.1 Identifiable part of the system. System test ISOIECIEEE 24765 Testing conducted on a complete, integrated system to evaluate the systems compliance with its specified requirements. Testing Automotive SPICE V3.1 Activity in which an item (system, hardware, or software) is exe cuted under specific conditions; and the results are recorded , summarized and communicated . Traceability ISOIECIEE E 24765 The degree to which a relationship can be established between two or more products of the development process, especially products having a predecessor -successor or master -subordinate relationship to one another. Unit Automotive SPICE V3.1 Part of a software component which is not further subdivided. SOFTWARE COMPONENT Unit test Automotive SPICE",
          "BSW_00348, SRS_BSW_00353, SRS_BSW_00361, SRS_BSW_00439, SRS_- BSW_00449, SRS_BSW_00308, SRS_BSW_00309, SRS_BSW_00330, SRS_- BSW_00010, SRS_BSW_00341, SRS_BSW_00334) 210 of 210 Document ID 78: AUTOSAR_SWS_ECUStateManager",
          "................................ ......................... 87 5.6. Process capability Level 5: Innovating process ................................ .............................. 88 5.6.1. PA 5.1 Process innovation process attribute ................................ .......................... 88 5.6.2. PA 5.2 Process innovation implementation proc ess attribute ................................ . 89 Annex A Conformity of the process assessment and reference model ................................ ..... 91 A.1 Introduction ................................ ................................ ................................ .................... 91 A.2 Conformance to the requirements for process reference models ................................ ... 91 A.3 Conformance to the requirements for process assessment models ............................... 92 Annex B Work product characteristics ................................ ................................ ...................... 94 Annex C Terminology ................................ ................................ ................................ ............. 119 VDA Quality Management Center 7 Annex D Key concepts ................................ ................................ ................................ ........... 122 D.1 The Plug -in concept ................................ ................................ ................................ .. 122 D.2 The Tip of the V ................................ ................................ ................................ ........ 123 D.3 Terms Element, Component, Unit, and Item ................................ ...................... 123 D.4 Traceability and consistency ................................ ................................ ........................ 124 D.5 Agree and Summarize and Communicate ................................ .............................. 125 D.6 Evaluate, Verification Criteria and Ensuring compliance ................................ ...... 125 D.7 The relation between Strategy and Plan ................................ ................................ . 126 Annex E Reference standards ................................ ................................ ............................... 128 List of Figures Figure 1 Process assessment model relationship ................................ ................................ ..... 11 Figure 2 Automotive SPICE process reference model - Overview ................................ ............ 12 Figure 3 Relationship between assessment indicators and process capability .......................... 22 Figure 4 Possible levels of abstraction for the term process ................................ ................... 23 Figure 5 Performing a process assessment for determining process capability ........................ 23 Figure D.1 The Plug -in concept ................................ ................................ ............................ 122 Figure D.2 The tip of the V ................................ ................................ ................................ ... 123 Figure D.3 Element, component, unit, and item ................................ ................................ ...... 123 Figure D.4 Bidirectional traceability and consistency ................................ .............................. 124 Figure D.5 Agree, summarize and communicate ................................ ................................ .... 125 Figure D.6 Evaluation, verification criteria and c ompliance ................................ ..................... 126 Figure D.7 Strategy and plan ................................ ................................ ................................ ... 127 List of Tables Table 1 Abbreviation List ................................ ................................ ................................ ............ 9 Table 2 Primary life cycle processes ACQ process group ................................ ...................... 13 Table 3 Primary life cycle processes SPL process group ................................ ....................... 13 Table 4 Primary life cycle process es SYS process group ................................ ...................... 13 Table 5 Primary life cycle processes SWE process group ................................ ..................... 14 Table 6 Supporting life cycle processes - SUP process group ................................ .................. 14 Table 7 Organizational life cycle processes - MAN process group ................................ ............ 14 Table 8 Organizational life cycle processes - PIM process group ................................ ............. 15 Table 9 Organizational life cycle processes - REU process group ................................ ............ 15 Table 10 Process cap ability levels according to ISOIEC 33020 ................................ ............... 16 Table 11 Process attributes according to ISOIEC 33020 ................................ ......................... 16 Table 12 Rating scale according to ISOIEC 33020 ................................ ................................ .. 17 Table 13 Rating scale percentage values according to ISOIEC 33020 ................................ .... 17 Table 14 Refinement of rating scale according to ISOIEC 33020 ................................ ............ 17 Table 15 Refined rat ing scale percentage values according to ISOIEC 33020 ........................ 18 Table 16 Process capability level model according to ISOIEC 33020 ................................ ...... 20 Table 17 Template for the process description ................................ ................................ ......... 24 Table B.1 Structure of WPC tables ................................ ................................ ........................... 94 Table B.2 Work product characteristi cs ................................ ................................ .................... 94 Table C.1 Terminology ................................ ................................ ................................ ........... 119 Table E.1 Reference standards ................................ ................................ .............................. 128 VDA Quality Management Center 8 1. Introduction 1.1. Scope Process assessment is a disciplined evaluation of an organizational units processes against a process assessment model . The Automotive SPICE process assessment model (PAM) is intended for use when performing conformant assessments of the process capability on the development of embedded automotive systems. It was developed in accordance with the requirements of ISOIEC 33004. Automotive SPICE has its own process refere nce model (PRM) , which was developed based on the Automotive SPICE process reference model 4.5 . It was further developed and tailored considering the specific needs of the automotive industry. If processes beyond the scope of Automotive SPICE are needed, a ppropriate processes from other process reference models such as ISOIEC 12207 or ISOIEC 15288 may be added based on the business needs of the organization . The PRM is incorporated in this document and is used in conjunction with the Automotive SPICE process assessment model when performing an assessment. This Automotive SPICE process assessment model contains a set of indicators to be considered when interpreting the intent of the Automotive SPICE process reference m odel. These indicators may also be used when implementing a process improvement program subsequent to an assessment. VDA Quality Management Center 9 1.2. Terminology Automotive SPICE follows the following preceden ce for use of terminology: a) ISOIEC 33001 for assessment related terminology b) ISOIECIEEE 24765 and ISOIECIEEE 29119 terminology (as contained in Annex C) c) Terms introduced by Automotive SPICE (as contained in Annex C) 1.3. Abbreviations AS Automotive SPICE BP Base Practice CAN Controller Area Network CASE Computer -Aided Software Engineering, CCB Change Control Board CFP Call For Proposals CPU Central Processing Unit ECU Electronic Control Unit EEPROM Electrically Erasable Programmable Read-Only Memory GP Generic Practice GR Generic Resource IEC International Electrotechnical Commission IEEE Institute of Electrical and Electronics Engineers IO Input Output ISO International Organization for Standardization ITT Invitation To Tender LIN Local Interconnect Network MISRA Motor Industry Software Reliability Association MOST Media Oriented Systems Transport PA Process Attribute PAM Process Assessment Model PRM Process Reference Model PWM Pulse Width Modulation RAM Random Access Memory ROM Read Only Memory SPICE Software Process Improvement and Capability d Etermination SUG Spice User Group USB Universal Serial Bus WP Work Product WPC Work Product Characteristic Table 1 Abbreviation List 2. Statement of compliance The Automotive SPICE process assessment model and process reference model is conformant with the IS OIEC 33004 , and can be used as the basis for conducting an assessment of process capability. VDA Quality Management Center 10 ISOIEC 33020 is used as an",
          "and ISOIECIEEE 29119 terminology (as contained in Annex C) c) Terms introduced by Automotive SPICE (as contained in Annex C) 1.3. Abbreviations AS Automotive SPICE BP Base Practice CAN Controller Area Network CASE Computer -Aided Software Engineering, CCB Change Control Board CFP Call For Proposals CPU Central Processing Unit ECU Electronic Control Unit EEPROM Electrically Erasable Programmable Read-Only Memory GP Generic Practice GR Generic Resource IEC International Electrotechnical Commission IEEE Institute of Electrical and Electronics Engineers IO Input Output ISO International Organization for Standardization ITT Invitation To Tender LIN Local Interconnect Network MISRA Motor Industry Software Reliability Association MOST Media Oriented Systems Transport PA Process Attribute PAM Process Assessment Model PRM Process Reference Model PWM Pulse Width Modulation RAM Random Access Memory ROM Read Only Memory SPICE Software Process Improvement and Capability d Etermination SUG Spice User Group USB Universal Serial Bus WP Work Product WPC Work Product Characteristic Table 1 Abbreviation List 2. Statement of compliance The Automotive SPICE process assessment model and process reference model is conformant with the IS OIEC 33004 , and can be used as the basis for conducting an assessment of process capability. VDA Quality Management Center 10 ISOIEC 33020 is used as an ISOIEC 33003 compliant Measurement Framework. A statement of compliance of the process assessment model and process reference model with the requirements of ISOIEC 33004 is provided in Annex A. VDA Quality Management Center 11 3. Process capability determination The concept of process capability determination by using a process assessment model is based on a two -dimensional framework. The first dimension is provided by processes defined in a process reference model (process dimension). The second dimension consists of capability levels that are further subdivided into process attributes (capability dimension). The pr ocess attributes provide the measurable characteristics of process capability. The process assessment model selects processes from a process reference model and supplements with indicators. These indicators support the collection of objective evidence whic h enable an assessor to assign ratings for processes according to the capability dimension. The relationship is shown in Figure 1: Process1Measurement framework (ISOIEC 33020) Capability levels Process attributes Rating Scale Rating method Aggregation method Process capability level model Process2 Process3 Process4 ...Process assessment model (Automotive SPICE) Process capability indicators Process performance indicators Process reference model (Automotive SPICE) Domain and scopes Process purposes Process outcomes Figure 1 Process assessment model relationship VDA Quality Management Center 12 3.1. Process reference m odel Processes are grouped by process category and at a second level into process groups according to the type of activity they address. There are 3 p rocess categories: Primary life cycle processes , Organizational life cycle processes and Supporting life cycle processes . Each process is described in terms of a purpose statement. The purpose statement contains the unique functional objectives of the process when performed in a particular environment. For each purpose statement a list of speci fic outcomes is associated, as a list of expected positive results of the process performance. For the process dimension, the Automotive SPICE process reference model provides the set of processes shown in Figure 2. Management Process Group (MAN) Supporting Process Group (SUP)Acquisition Process Group (ACQ) Supply Process Group (SPL)ACQ.4 Supplier Monitoring ACQ.11 Technical Requirements ACQ.12 Legal and Administrative Requirements ACQ.13 Project Requirements ACQ.14 Request for Proposals ACQ.15 Supplier Qualification SPL.1 Supplier Tendering SPL.2 Product ReleaseSUP.1 Quality AssuranceSUP.2 VerificationSUP.4 Joint ReviewSUP.7 Documentation SUP.8 Configuration ManagementSUP.9 Problem Resolution ManagementSUP.10 Change Request ManagementMAN.3 Project Management MAN.5 Risk Management MAN.6 MeasurementACQ.3 Contract Agreement Process Improvement Process Group (PIM) PIM.3 Process ImprovementReuse Process Group (REU) REU.2 Reuse Program ManagementSystem Engineering Process Group (SYS) SYS.1 Requirements Elicitation SYS.2 System Requirements Analysis SYS.3 System Architectural DesignSYS.4 System Integration and Integration TestSYS.5 System Qualification Test Software Engineering Process Group (SWE) SWE.1 Software Requirements Analysis SWE.2 Software Architectural Design SWE.3 Software Detailed Design and Unit ConstructionSWE.4 Software Unit VerificationSWE.5 Software Integration and Integration TestSWE.6 Software Qualification Test Primary Life Cycle Processes Supporting Life Cycle Processes Organizational Life Cycle Processes Figure 2 Automotive SPICE process reference model - Overview VDA Quality Management Center 13 3.1.1. Primary life cycle processes category The p rimary life cycle processes category consists of processes that may be used by the customer when acquiring products from a supplier, and by the supplier when responding and delivering products to the customer including the engineering processes needed for specification, design, deve lopment, integration and testing. The primary life cycle processes category consists of the following groups: the Acquisition p rocess group; the Supply process group; the System engineering process group; the Sof tware engineering process group. The Acqui sition process group (ACQ) consists of processes that are performed by the customer, or by the supplier when acting as a customer for its own suppliers, in order to acquire a product andor service. ACQ.3 Contract Agreement ACQ.4 Supplier Monitoring ACQ.11 Technical Requirements ACQ.12 Legal and Administrative Requirements ACQ.13 Project Requirements ACQ.14 Request for Proposals ACQ.15 Supplier Qualification Table 2 Primary life cycle processes ACQ process group The Supply process group (SPL) consists of processes performed by the supplier in order to supply a product andor a service. SPL.1 Supplier Tendering SPL.2 Product Release Table 3 Primary life cycle processes SPL process group The System Engineering process group (SYS) consists of processes addressing the elicitation and management of customer and internal requirements, the definition of the system architecture and the integration and testing on the system level. SYS.1 Requirement s Elicitation SYS.2 System Requirements Analysis SYS.3 System Architectural Design SYS.4 System Integration and Integration Test SYS.5 System Qualification Test Table 4 Primary life cycle processes SYS process group The Software Engineering process group (SWE) consists of processes addressing the management of software requirements derived from the system requirements, the development of the VDA Quality Management Center 14 corresponding software architecture and design as well as the implementation, integration and testing of the software. SWE.1 Software Requirements Analysis SWE.2 Software Architectural Design SWE.3 Software Detailed Design and Unit Construction SWE.4 Software Unit Verification SWE.5 Software Integration and Integration"
        ],
        "relevant_ids": [
          "chunk_3",
          "chunk_7",
          "chunk_12",
          "chunk_18"
        ],
        "groundedness": 0.8,
        "hallucination_rate": 0.1
      }
    ],
    "avg_groundedness": 0.8,
    "avg_hallucination_rate": 0.1
  }
}